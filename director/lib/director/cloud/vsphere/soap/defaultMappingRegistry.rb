require 'director/cloud/vsphere/default.rb'
require 'soap/mapping'

module VSphereCloud

module DefaultMappingRegistry
  EncodedRegistry = ::SOAP::Mapping::EncodedRegistry.new
  LiteralRegistry = ::SOAP::Mapping::LiteralRegistry.new
  NsVim25 = "urn:vim25"

  EncodedRegistry.register(
    :class => VSphereCloud::DestroyPropertyFilterRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyPropertyFilterRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateFilterRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateFilterRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::PropertyFilterSpec"],
      ["partialUpdates", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrievePropertiesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrievePropertiesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["specSet", "VSphereCloud::PropertyFilterSpec[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CheckForUpdatesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckForUpdatesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::WaitForUpdatesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "WaitForUpdatesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CancelWaitForUpdatesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CancelWaitForUpdatesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::WaitForUpdatesExRequestType,
    :schema_type => XSD::QName.new(NsVim25, "WaitForUpdatesExRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["options", "VSphereCloud::WaitOptions", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrievePropertiesExRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrievePropertiesExRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["specSet", "VSphereCloud::PropertyFilterSpec[]", [1, nil]],
      ["options", "VSphereCloud::RetrieveOptions"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ContinueRetrievePropertiesExRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ContinueRetrievePropertiesExRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["token", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CancelRetrievePropertiesExRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CancelRetrievePropertiesExRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["token", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreatePropertyCollectorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreatePropertyCollectorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DestroyPropertyCollectorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyPropertyCollectorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DynamicArray,
    :schema_type => XSD::QName.new(NsVim25, "DynamicArray"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["val", "[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DynamicData,
    :schema_type => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DynamicProperty,
    :schema_type => XSD::QName.new(NsVim25, "DynamicProperty"),
    :schema_element => [
      ["name", "SOAP::SOAPString"],
      ["val", nil]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDynamicProperty,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDynamicProperty"),
    :schema_element => [
      ["dynamicProperty", ["VSphereCloud::DynamicProperty[]", XSD::QName.new(NsVim25, "DynamicProperty")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::KeyAnyValue,
    :schema_type => XSD::QName.new(NsVim25, "KeyAnyValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", nil]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfKeyAnyValue,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfKeyAnyValue"),
    :schema_element => [
      ["keyAnyValue", ["VSphereCloud::KeyAnyValue[]", XSD::QName.new(NsVim25, "KeyAnyValue")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LocalizableMessage,
    :schema_type => XSD::QName.new(NsVim25, "LocalizableMessage"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["arg", "VSphereCloud::KeyAnyValue[]", [0, nil]],
      ["message", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfLocalizableMessage,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLocalizableMessage"),
    :schema_element => [
      ["localizableMessage", ["VSphereCloud::LocalizableMessage[]", XSD::QName.new(NsVim25, "LocalizableMessage")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCommunication,
    :schema_type => XSD::QName.new(NsVim25, "HostCommunication"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNotConnected,
    :schema_type => XSD::QName.new(NsVim25, "HostNotConnected"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostCommunication"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNotReachable,
    :schema_type => XSD::QName.new(NsVim25, "HostNotReachable"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostCommunication"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidArgument,
    :schema_type => XSD::QName.new(NsVim25, "InvalidArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidRequest,
    :schema_type => XSD::QName.new(NsVim25, "InvalidRequest"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidType,
    :schema_type => XSD::QName.new(NsVim25, "InvalidType"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidRequest"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ManagedObjectNotFound,
    :schema_type => XSD::QName.new(NsVim25, "ManagedObjectNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["obj", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MethodNotFound,
    :schema_type => XSD::QName.new(NsVim25, "MethodNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidRequest"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["receiver", "VSphereCloud::ManagedObjectReference"],
      ["method", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NotEnoughLicenses,
    :schema_type => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NotImplemented,
    :schema_type => XSD::QName.new(NsVim25, "NotImplemented"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NotSupported,
    :schema_type => XSD::QName.new(NsVim25, "NotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RequestCanceled,
    :schema_type => XSD::QName.new(NsVim25, "RequestCanceled"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::C_SecurityError,
    :schema_type => XSD::QName.new(NsVim25, "SecurityError"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SystemError,
    :schema_type => XSD::QName.new(NsVim25, "SystemError"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnexpectedFault,
    :schema_type => XSD::QName.new(NsVim25, "UnexpectedFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["faultName", "SOAP::SOAPString"],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LocalizedMethodFault,
    :schema_type => XSD::QName.new(NsVim25, "LocalizedMethodFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fault", "VSphereCloud::MethodFault"],
      ["localizedMessage", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MethodFault,
    :schema_type => XSD::QName.new(NsVim25, "MethodFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfMethodFault,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfMethodFault"),
    :schema_element => [
      ["methodFault", ["VSphereCloud::MethodFault[]", XSD::QName.new(NsVim25, "MethodFault")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RuntimeFault,
    :schema_type => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "MethodFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ManagedObjectReference,
    :schema_type => XSD::QName.new(NsVim25, "ManagedObjectReference"),
    :schema_attribute => {
      XSD::QName.new(nil, "type") => "SOAP::SOAPString"
    }
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfString,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfString"),
    :schema_element => [
      ["string", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfAnyType,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAnyType"),
    :schema_element => [
      ["anyType", "[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfManagedObjectReference,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfManagedObjectReference"),
    :schema_element => [
      ["managedObjectReference", ["VSphereCloud::ManagedObjectReference[]", XSD::QName.new(NsVim25, "ManagedObjectReference")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfByte,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfByte"),
    :schema_element => [
      ["byte", "SOAP::SOAPByte[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfInt,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfInt"),
    :schema_element => [
      ["int", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfLong,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLong"),
    :schema_element => [
      ["long", "SOAP::SOAPLong[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfShort,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfShort"),
    :schema_element => [
      ["short", "SOAP::SOAPShort[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidCollectorVersion,
    :schema_type => XSD::QName.new(NsVim25, "InvalidCollectorVersion"),
    :schema_basetype => XSD::QName.new(NsVim25, "MethodFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidProperty,
    :schema_type => XSD::QName.new(NsVim25, "InvalidProperty"),
    :schema_basetype => XSD::QName.new(NsVim25, "MethodFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PropertyFilterSpec,
    :schema_type => XSD::QName.new(NsVim25, "PropertyFilterSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["propSet", "VSphereCloud::PropertySpec[]", [1, nil]],
      ["objectSet", "VSphereCloud::ObjectSpec[]", [1, nil]],
      ["reportMissingObjectsInResults", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPropertyFilterSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPropertyFilterSpec"),
    :schema_element => [
      ["propertyFilterSpec", ["VSphereCloud::PropertyFilterSpec[]", XSD::QName.new(NsVim25, "PropertyFilterSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PropertySpec,
    :schema_type => XSD::QName.new(NsVim25, "PropertySpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["all", "SOAP::SOAPBoolean", [0, 1]],
      ["pathSet", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPropertySpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPropertySpec"),
    :schema_element => [
      ["propertySpec", ["VSphereCloud::PropertySpec[]", XSD::QName.new(NsVim25, "PropertySpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ObjectSpec,
    :schema_type => XSD::QName.new(NsVim25, "ObjectSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["skip", "SOAP::SOAPBoolean", [0, 1]],
      ["selectSet", "VSphereCloud::SelectionSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfObjectSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfObjectSpec"),
    :schema_element => [
      ["objectSpec", ["VSphereCloud::ObjectSpec[]", XSD::QName.new(NsVim25, "ObjectSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SelectionSpec,
    :schema_type => XSD::QName.new(NsVim25, "SelectionSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfSelectionSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfSelectionSpec"),
    :schema_element => [
      ["selectionSpec", ["VSphereCloud::SelectionSpec[]", XSD::QName.new(NsVim25, "SelectionSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TraversalSpec,
    :schema_type => XSD::QName.new(NsVim25, "TraversalSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "SelectionSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"],
      ["skip", "SOAP::SOAPBoolean", [0, 1]],
      ["selectSet", "VSphereCloud::SelectionSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ObjectContent,
    :schema_type => XSD::QName.new(NsVim25, "ObjectContent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["propSet", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["missingSet", "VSphereCloud::MissingProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfObjectContent,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfObjectContent"),
    :schema_element => [
      ["objectContent", ["VSphereCloud::ObjectContent[]", XSD::QName.new(NsVim25, "ObjectContent")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateSet,
    :schema_type => XSD::QName.new(NsVim25, "UpdateSet"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["filterSet", "VSphereCloud::PropertyFilterUpdate[]", [0, nil]],
      ["truncated", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PropertyFilterUpdate,
    :schema_type => XSD::QName.new(NsVim25, "PropertyFilterUpdate"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["filter", "VSphereCloud::ManagedObjectReference"],
      ["objectSet", "VSphereCloud::ObjectUpdate[]", [0, nil]],
      ["missingSet", "VSphereCloud::MissingObject[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPropertyFilterUpdate,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPropertyFilterUpdate"),
    :schema_element => [
      ["propertyFilterUpdate", ["VSphereCloud::PropertyFilterUpdate[]", XSD::QName.new(NsVim25, "PropertyFilterUpdate")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ObjectUpdate,
    :schema_type => XSD::QName.new(NsVim25, "ObjectUpdate"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["kind", "VSphereCloud::ObjectUpdateKind"],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["changeSet", "VSphereCloud::PropertyChange[]", [0, nil]],
      ["missingSet", "VSphereCloud::MissingProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfObjectUpdate,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfObjectUpdate"),
    :schema_element => [
      ["objectUpdate", ["VSphereCloud::ObjectUpdate[]", XSD::QName.new(NsVim25, "ObjectUpdate")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PropertyChange,
    :schema_type => XSD::QName.new(NsVim25, "PropertyChange"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["op", "VSphereCloud::PropertyChangeOp"],
      ["val", nil, [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPropertyChange,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPropertyChange"),
    :schema_element => [
      ["propertyChange", ["VSphereCloud::PropertyChange[]", XSD::QName.new(NsVim25, "PropertyChange")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MissingProperty,
    :schema_type => XSD::QName.new(NsVim25, "MissingProperty"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfMissingProperty,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfMissingProperty"),
    :schema_element => [
      ["missingProperty", ["VSphereCloud::MissingProperty[]", XSD::QName.new(NsVim25, "MissingProperty")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MissingObject,
    :schema_type => XSD::QName.new(NsVim25, "MissingObject"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfMissingObject,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfMissingObject"),
    :schema_element => [
      ["missingObject", ["VSphereCloud::MissingObject[]", XSD::QName.new(NsVim25, "MissingObject")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::WaitOptions,
    :schema_type => XSD::QName.new(NsVim25, "WaitOptions"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["maxWaitSeconds", "SOAP::SOAPInt", [0, 1]],
      ["maxObjectUpdates", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrieveOptions,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveOptions"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["maxObjects", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrieveResult,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["token", "SOAP::SOAPString", [0, 1]],
      ["objects", "VSphereCloud::ObjectContent[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AddAuthorizationRoleRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddAuthorizationRoleRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["privIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveAuthorizationRoleRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveAuthorizationRoleRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["roleId", "SOAP::SOAPInt"],
      ["failIfUsed", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateAuthorizationRoleRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateAuthorizationRoleRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["roleId", "SOAP::SOAPInt"],
      ["newName", "SOAP::SOAPString"],
      ["privIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MergePermissionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MergePermissionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["srcRoleId", "SOAP::SOAPInt"],
      ["dstRoleId", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrieveRolePermissionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveRolePermissionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["roleId", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrieveEntityPermissionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveEntityPermissionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["inherited", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrieveAllPermissionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveAllPermissionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SetEntityPermissionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetEntityPermissionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["permission", "VSphereCloud::Permission[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResetEntityPermissionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetEntityPermissionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["permission", "VSphereCloud::Permission[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveEntityPermissionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveEntityPermissionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["user", "SOAP::SOAPString"],
      ["isGroup", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReconfigureClusterRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureClusterRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::ClusterConfigSpec"],
      ["modify", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ApplyRecommendationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ApplyRecommendationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CancelRecommendationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CancelRecommendationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RecommendHostsForVmRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RecommendHostsForVmRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AddHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostConnectSpec"],
      ["asConnected", "SOAP::SOAPBoolean"],
      ["resourcePool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["license", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MoveIntoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MoveIntoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MoveHostIntoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MoveHostIntoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["resourcePool", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RefreshRecommendationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshRecommendationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrieveDasAdvancedRuntimeInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveDasAdvancedRuntimeInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReconfigureComputeResourceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureComputeResourceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::ComputeResourceConfigSpec"],
      ["modify", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AddCustomFieldDefRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddCustomFieldDefRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["moType", "SOAP::SOAPString", [0, 1]],
      ["fieldDefPolicy", "VSphereCloud::PrivilegePolicyDef", [0, 1]],
      ["fieldPolicy", "VSphereCloud::PrivilegePolicyDef", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveCustomFieldDefRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveCustomFieldDefRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RenameCustomFieldDefRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RenameCustomFieldDefRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SetFieldRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetFieldRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["key", "SOAP::SOAPInt"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DoesCustomizationSpecExistRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DoesCustomizationSpecExistRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GetCustomizationSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "GetCustomizationSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateCustomizationSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateCustomizationSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["item", "VSphereCloud::CustomizationSpecItem"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OverwriteCustomizationSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "OverwriteCustomizationSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["item", "VSphereCloud::CustomizationSpecItem"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DeleteCustomizationSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DeleteCustomizationSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DuplicateCustomizationSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DuplicateCustomizationSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RenameCustomizationSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RenameCustomizationSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationSpecItemToXmlRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSpecItemToXmlRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["item", "VSphereCloud::CustomizationSpecItem"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::XmlToCustomizationSpecItemRequestType,
    :schema_type => XSD::QName.new(NsVim25, "XmlToCustomizationSpecItemRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["specItemXml", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CheckCustomizationResourcesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckCustomizationResourcesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["guestOs", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryConnectionInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryConnectionInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["hostname", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt"],
      ["username", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PowerOnMultiVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PowerOnMultiVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]],
      ["option", "VSphereCloud::OptionValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RefreshDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RefreshDatastoreStorageInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshDatastoreStorageInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateVirtualMachineFilesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateVirtualMachineFilesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["mountPathDatastoreMapping", "VSphereCloud::DatastoreMountPathDatastorePair[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RenameDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RenameDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DestroyDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryDescriptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryDescriptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::BrowseDiagnosticLogRequestType,
    :schema_type => XSD::QName.new(NsVim25, "BrowseDiagnosticLogRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["start", "SOAP::SOAPInt", [0, 1]],
      ["lines", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GenerateLogBundlesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "GenerateLogBundlesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["includeDefault", "SOAP::SOAPBoolean"],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FetchDVPortKeysRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FetchDVPortKeysRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["criteria", "VSphereCloud::DistributedVirtualSwitchPortCriteria", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FetchDVPortsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FetchDVPortsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["criteria", "VSphereCloud::DistributedVirtualSwitchPortCriteria", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryUsedVlanIdInDvsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryUsedVlanIdInDvsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReconfigureDvsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureDvsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::DVSConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerformDvsProductSpecOperationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PerformDvsProductSpecOperationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["operation", "SOAP::SOAPString"],
      ["productSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MergeDvsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MergeDvsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dvs", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AddDVPortgroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddDVPortgroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::DVPortgroupConfigSpec[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MoveDVPortRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MoveDVPortRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]],
      ["destinationPortgroupKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateDvsCapabilityRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateDvsCapabilityRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["capability", "VSphereCloud::DVSCapability"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReconfigureDVPortRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureDVPortRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["port", "VSphereCloud::DVPortConfigSpec[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RefreshDVPortStateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshDVPortStateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["portKeys", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RectifyDvsHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RectifyDvsHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["hosts", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateNetworkResourcePoolRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateNetworkResourcePoolRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["configSpec", "VSphereCloud::DVSNetworkResourcePoolConfigSpec[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EnableNetworkResourceManagementRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnableNetworkResourceManagementRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["enable", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryConfigOptionDescriptorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryConfigOptionDescriptorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryConfigOptionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryConfigOptionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryConfigTargetRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryConfigTargetRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryTargetCapabilitiesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryTargetCapabilitiesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SetCustomValueRequestType,
    :schema_type => XSD::QName.new(NsVim25, "setCustomValueRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnregisterExtensionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UnregisterExtensionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FindExtensionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindExtensionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RegisterExtensionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RegisterExtensionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extension", "VSphereCloud::Extension"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateExtensionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateExtensionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extension", "VSphereCloud::Extension"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GetPublicKeyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "GetPublicKeyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SetPublicKeyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetPublicKeyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["publicKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SetExtensionCertificateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetExtensionCertificateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["certificatePem", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MoveDatastoreFileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MoveDatastoreFileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["destinationName", "SOAP::SOAPString"],
      ["destinationDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CopyDatastoreFileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CopyDatastoreFileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["destinationName", "SOAP::SOAPString"],
      ["destinationDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DeleteDatastoreFileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DeleteDatastoreFileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MakeDirectoryRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MakeDirectoryRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["createParentDirectories", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ChangeOwnerRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ChangeOwnerRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["owner", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateFolderRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateFolderRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MoveIntoFolderRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MoveIntoFolderRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["list", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::VirtualMachineConfigSpec"],
      ["pool", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RegisterVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RegisterVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["path", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["asTemplate", "SOAP::SOAPBoolean"],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateClusterRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateClusterRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::ClusterConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateClusterExRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateClusterExRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::ClusterConfigSpecEx"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AddStandaloneHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddStandaloneHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostConnectSpec"],
      ["compResSpec", "VSphereCloud::ComputeResourceConfigSpec", [0, 1]],
      ["addConnected", "SOAP::SOAPBoolean"],
      ["license", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateDatacenterRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateDatacenterRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnregisterAndDestroyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UnregisterAndDestroyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateDVSRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateDVSRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::DVSCreateSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SetCollectorPageSizeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetCollectorPageSizeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RewindCollectorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RewindCollectorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResetCollectorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetCollectorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DestroyCollectorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyCollectorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryHostConnectionInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryHostConnectionInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateSystemResourcesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateSystemResourcesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["resourceInfo", "VSphereCloud::HostSystemResourceInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReconnectHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconnectHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["cnxSpec", "VSphereCloud::HostConnectSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DisconnectHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DisconnectHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EnterMaintenanceModeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnterMaintenanceModeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["timeout", "SOAP::SOAPInt"],
      ["evacuatePoweredOffVms", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExitMaintenanceModeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExitMaintenanceModeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["timeout", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RebootHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RebootHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ShutdownHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ShutdownHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PowerDownHostToStandByRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PowerDownHostToStandByRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["timeoutSec", "SOAP::SOAPInt"],
      ["evacuatePoweredOffVms", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PowerUpHostFromStandByRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PowerUpHostFromStandByRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["timeoutSec", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryMemoryOverheadRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryMemoryOverheadRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["memorySize", "SOAP::SOAPLong"],
      ["videoRamSize", "SOAP::SOAPInt", [0, 1]],
      ["numVcpus", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryMemoryOverheadExRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryMemoryOverheadExRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vmConfigInfo", "VSphereCloud::VirtualMachineConfigInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReconfigureHostForDASRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureHostForDASRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateFlagsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateFlagsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["flagInfo", "VSphereCloud::HostFlagInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EnterLockdownModeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnterLockdownModeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExitLockdownModeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExitLockdownModeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AcquireCimServicesTicketRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AcquireCimServicesTicketRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateIpmiRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateIpmiRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ipmiInfo", "VSphereCloud::HostIpmiInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrieveHardwareUptimeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveHardwareUptimeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseGetManifestRequestType,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseGetManifestRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseCompleteRequestType,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseCompleteRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseAbortRequestType,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseAbortRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseProgressRequestType,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseProgressRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["percent", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryIpPoolsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryIpPoolsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dc", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateIpPoolRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateIpPoolRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dc", "VSphereCloud::ManagedObjectReference"],
      ["pool", "VSphereCloud::IpPool"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateIpPoolRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateIpPoolRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dc", "VSphereCloud::ManagedObjectReference"],
      ["pool", "VSphereCloud::IpPool"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DestroyIpPoolRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyIpPoolRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dc", "VSphereCloud::ManagedObjectReference"],
      ["id", "SOAP::SOAPInt"],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateAssignedLicenseRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateAssignedLicenseRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "SOAP::SOAPString"],
      ["licenseKey", "SOAP::SOAPString"],
      ["entityDisplayName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveAssignedLicenseRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveAssignedLicenseRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entityId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryAssignedLicensesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryAssignedLicensesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entityId", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QuerySupportedFeaturesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QuerySupportedFeaturesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryLicenseSourceAvailabilityRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryLicenseSourceAvailabilityRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryLicenseUsageRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryLicenseUsageRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SetLicenseEditionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetLicenseEditionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CheckLicenseFeatureRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckLicenseFeatureRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EnableFeatureRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnableFeatureRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DisableFeatureRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DisableFeatureRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ConfigureLicenseSourceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ConfigureLicenseSourceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["licenseSource", "VSphereCloud::LicenseSource"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateLicenseRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateLicenseRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labels", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AddLicenseRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddLicenseRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labels", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveLicenseRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveLicenseRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DecodeLicenseRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DecodeLicenseRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateLicenseLabelRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateLicenseLabelRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labelKey", "SOAP::SOAPString"],
      ["labelValue", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveLicenseLabelRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveLicenseLabelRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labelKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReloadRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReloadRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RenameRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RenameRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DestroyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DestroyNetworkRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyNetworkRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ValidateHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ValidateHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["vhp", "VSphereCloud::OvfValidateHostParams"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ParseDescriptorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ParseDescriptorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["pdp", "VSphereCloud::OvfParseDescriptorParams"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateImportSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateImportSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["resourcePool", "VSphereCloud::ManagedObjectReference"],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["cisp", "VSphereCloud::OvfCreateImportSpecParams"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateDescriptorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateDescriptorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["cdp", "VSphereCloud::OvfCreateDescriptorParams"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryPerfProviderSummaryRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPerfProviderSummaryRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryAvailablePerfMetricRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryAvailablePerfMetricRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["beginTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]],
      ["intervalId", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryPerfCounterRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPerfCounterRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["counterId", "SOAP::SOAPInt[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryPerfCounterByLevelRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPerfCounterByLevelRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["level", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryPerfRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPerfRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["querySpec", "VSphereCloud::PerfQuerySpec[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryPerfCompositeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPerfCompositeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["querySpec", "VSphereCloud::PerfQuerySpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreatePerfIntervalRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreatePerfIntervalRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["intervalId", "VSphereCloud::PerfInterval"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemovePerfIntervalRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemovePerfIntervalRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["samplePeriod", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdatePerfIntervalRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdatePerfIntervalRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["interval", "VSphereCloud::PerfInterval"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EstimateDatabaseSizeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EstimateDatabaseSizeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dbSizeParam", "VSphereCloud::DatabaseSizeParam"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["config", "VSphereCloud::ResourceConfigSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MoveIntoResourcePoolRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MoveIntoResourcePoolRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["list", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateChildResourceConfigurationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateChildResourceConfigurationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::ResourceConfigSpec[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateResourcePoolRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateResourcePoolRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::ResourceConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DestroyChildrenRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyChildrenRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["resSpec", "VSphereCloud::ResourceConfigSpec"],
      ["configSpec", "VSphereCloud::VAppConfigSpec"],
      ["vmFolder", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateChildVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateChildVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::VirtualMachineConfigSpec"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RegisterChildVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RegisterChildVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["path", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ImportVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ImportVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::ImportSpec"],
      ["folder", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryResourceConfigOptionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryResourceConfigOptionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RefreshRuntimeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshRuntimeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FindByUuidRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindByUuidRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FindByDatastorePathRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindByDatastorePathRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference"],
      ["path", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FindByDnsNameRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindByDnsNameRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["dnsName", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FindByIpRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindByIpRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["ip", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FindByInventoryPathRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindByInventoryPathRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["inventoryPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FindChildRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindChildRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FindAllByUuidRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindAllByUuidRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FindAllByDnsNameRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindAllByDnsNameRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["dnsName", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FindAllByIpRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindAllByIpRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["ip", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CurrentTimeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CurrentTimeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrieveServiceContentRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveServiceContentRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ValidateMigrationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ValidateMigrationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]],
      ["state", "VSphereCloud::VirtualMachinePowerState", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryVMotionCompatibilityRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVMotionCompatibilityRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference[]", [1, nil]],
      ["compatibility", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrieveProductComponentsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveProductComponentsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateServiceMessageRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateServiceMessageRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LoginRequestType,
    :schema_type => XSD::QName.new(NsVim25, "LoginRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LoginBySSPIRequestType,
    :schema_type => XSD::QName.new(NsVim25, "LoginBySSPIRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["base64Token", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LogoutRequestType,
    :schema_type => XSD::QName.new(NsVim25, "LogoutRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AcquireLocalTicketRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AcquireLocalTicketRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TerminateSessionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "TerminateSessionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sessionId", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SetLocaleRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetLocaleRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["locale", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LoginExtensionBySubjectNameRequestType,
    :schema_type => XSD::QName.new(NsVim25, "LoginExtensionBySubjectNameRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LoginExtensionByCertificateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "LoginExtensionByCertificateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ImpersonateUserRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ImpersonateUserRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SessionIsActiveRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SessionIsActiveRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sessionID", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AcquireCloneTicketRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AcquireCloneTicketRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CloneSessionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CloneSessionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["cloneTicket", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ConfigureDatastoreIORMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ConfigureDatastoreIORMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::StorageIORMConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryIORMConfigOptionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryIORMConfigOptionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CancelTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CancelTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateProgressRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateProgressRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["percentDone", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SetTaskStateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetTaskStateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["state", "VSphereCloud::TaskInfoState"],
      ["result", nil, [0, 1]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SetTaskDescriptionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetTaskDescriptionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["description", "VSphereCloud::LocalizableMessage"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReadNextTasksRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReadNextTasksRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReadPreviousTasksRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReadPreviousTasksRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateCollectorForTasksRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateCollectorForTasksRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["filter", "VSphereCloud::TaskFilterSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["taskTypeId", "SOAP::SOAPString"],
      ["initiatedBy", "SOAP::SOAPString", [0, 1]],
      ["cancelable", "SOAP::SOAPBoolean"],
      ["parentTaskKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrieveUserGroupsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveUserGroupsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["domain", "SOAP::SOAPString", [0, 1]],
      ["searchStr", "SOAP::SOAPString"],
      ["belongsToGroup", "SOAP::SOAPString", [0, 1]],
      ["belongsToUser", "SOAP::SOAPString", [0, 1]],
      ["exactMatch", "SOAP::SOAPBoolean"],
      ["findUsers", "SOAP::SOAPBoolean"],
      ["findGroups", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateVAppConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateVAppConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::VAppConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateLinkedChildrenRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateLinkedChildrenRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["addChangeSet", "VSphereCloud::VirtualAppLinkInfo[]", [0, nil]],
      ["removeSet", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CloneVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CloneVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["target", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::VAppCloneSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExportVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExportVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PowerOnVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PowerOnVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PowerOffVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PowerOffVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SuspendVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SuspendVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnregisterVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "unregisterVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["spec", "VSphereCloud::VirtualDiskSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DeleteVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DeleteVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MoveVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MoveVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["destName", "SOAP::SOAPString"],
      ["destDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CopyVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CopyVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["destName", "SOAP::SOAPString"],
      ["destDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["destSpec", "VSphereCloud::VirtualDiskSpec", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtendVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExtendVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["newCapacityKb", "SOAP::SOAPLong"],
      ["eagerZero", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryVirtualDiskFragmentationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVirtualDiskFragmentationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DefragmentVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DefragmentVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ShrinkVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ShrinkVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["copy", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InflateVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "InflateVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EagerZeroVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EagerZeroVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ZeroFillVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ZeroFillVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SetVirtualDiskUuidRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetVirtualDiskUuidRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryVirtualDiskUuidRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVirtualDiskUuidRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryVirtualDiskGeometryRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVirtualDiskGeometryRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RefreshStorageInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshStorageInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateSnapshotRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateSnapshotRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["memory", "SOAP::SOAPBoolean"],
      ["quiesce", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RevertToCurrentSnapshotRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RevertToCurrentSnapshotRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["suppressPowerOn", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveAllSnapshotsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveAllSnapshotsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReconfigVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::VirtualMachineConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpgradeVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpgradeVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtractOvfEnvironmentRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExtractOvfEnvironmentRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PowerOnVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PowerOnVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PowerOffVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PowerOffVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SuspendVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SuspendVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResetVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ShutdownGuestRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ShutdownGuestRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RebootGuestRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RebootGuestRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StandbyGuestRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StandbyGuestRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AnswerVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AnswerVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["questionId", "SOAP::SOAPString"],
      ["answerChoice", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizeVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CustomizeVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::CustomizationSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CheckCustomizationSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckCustomizationSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::CustomizationSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MigrateVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MigrateVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["priority", "VSphereCloud::VirtualMachineMovePriority"],
      ["state", "VSphereCloud::VirtualMachinePowerState", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RelocateVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RelocateVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::VirtualMachineRelocateSpec"],
      ["priority", "VSphereCloud::VirtualMachineMovePriority", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CloneVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CloneVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["folder", "VSphereCloud::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::VirtualMachineCloneSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExportVmRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExportVmRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MarkAsTemplateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MarkAsTemplateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MarkAsVirtualMachineRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MarkAsVirtualMachineRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pool", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnregisterVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UnregisterVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResetGuestInformationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetGuestInformationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MountToolsInstallerRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MountToolsInstallerRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnmountToolsInstallerRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UnmountToolsInstallerRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpgradeToolsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpgradeToolsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["installerOptions", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AcquireMksTicketRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AcquireMksTicketRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AcquireTicketRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AcquireTicketRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ticketType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SetScreenResolutionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetScreenResolutionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["width", "SOAP::SOAPInt"],
      ["height", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DefragmentAllDisksRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DefragmentAllDisksRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateSecondaryVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateSecondaryVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TurnOffFaultToleranceForVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "TurnOffFaultToleranceForVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MakePrimaryVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MakePrimaryVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TerminateFaultTolerantVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "TerminateFaultTolerantVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DisableSecondaryVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DisableSecondaryVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EnableSecondaryVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnableSecondaryVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SetDisplayTopologyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetDisplayTopologyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["displays", "VSphereCloud::VirtualMachineDisplayTopology[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StartRecordingRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StartRecordingRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StopRecordingRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StopRecordingRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StartReplayingRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StartReplayingRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["replaySnapshot", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StopReplayingRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StopReplayingRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PromoteDisksRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PromoteDisksRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["unlink", "SOAP::SOAPBoolean"],
      ["disks", "VSphereCloud::VirtualDisk[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateScreenshotRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateScreenshotRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryChangedDiskAreasRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryChangedDiskAreasRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["snapshot", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["deviceKey", "SOAP::SOAPInt"],
      ["startOffset", "SOAP::SOAPLong"],
      ["changeId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryUnownedFilesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryUnownedFilesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReloadVirtualMachineFromPathRequestType,
    :schema_type => XSD::QName.new(NsVim25, "reloadVirtualMachineFromPathRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["configurationPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryFaultToleranceCompatibilityRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryFaultToleranceCompatibilityRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveAlarmRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveAlarmRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReconfigureAlarmRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureAlarmRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::AlarmSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateAlarmRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateAlarmRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::AlarmSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GetAlarmRequestType,
    :schema_type => XSD::QName.new(NsVim25, "GetAlarmRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AreAlarmActionsEnabledRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AreAlarmActionsEnabledRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EnableAlarmActionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnableAlarmActionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GetAlarmStateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "GetAlarmStateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AcknowledgeAlarmRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AcknowledgeAlarmRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["alarm", "VSphereCloud::ManagedObjectReference"],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReconfigureDVPortgroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureDVPortgroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::DVPortgroupConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryAvailableDvsSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryAvailableDvsSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryCompatibleHostForNewDvsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryCompatibleHostForNewDvsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["container", "VSphereCloud::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"],
      ["switchProductSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryCompatibleHostForExistingDvsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryCompatibleHostForExistingDvsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["container", "VSphereCloud::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"],
      ["dvs", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryDvsCompatibleHostSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryDvsCompatibleHostSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["switchProductSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryDvsFeatureCapabilityRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryDvsFeatureCapabilityRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["switchProductSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryDvsByUuidRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryDvsByUuidRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryDvsConfigTargetRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryDvsConfigTargetRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["dvs", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryDvsCheckCompatibilityRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryDvsCheckCompatibilityRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["hostContainer", "VSphereCloud::DistributedVirtualSwitchManagerHostContainer"],
      ["dvsProductSpec", "VSphereCloud::DistributedVirtualSwitchManagerDvsProductSpec", [0, 1]],
      ["hostFilterSpec", "VSphereCloud::DistributedVirtualSwitchManagerHostDvsFilterSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReadNextEventsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReadNextEventsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReadPreviousEventsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReadPreviousEventsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrieveArgumentDescriptionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveArgumentDescriptionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["eventTypeId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateCollectorForEventsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateCollectorForEventsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["filter", "VSphereCloud::EventFilterSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LogUserEventRequestType,
    :schema_type => XSD::QName.new(NsVim25, "LogUserEventRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["msg", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryEventsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryEventsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["filter", "VSphereCloud::EventFilterSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PostEventRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PostEventRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["eventToPost", "VSphereCloud::Event"],
      ["taskInfo", "VSphereCloud::TaskInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::JoinDomainRequestType,
    :schema_type => XSD::QName.new(NsVim25, "JoinDomainRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["domainName", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LeaveCurrentDomainRequestType,
    :schema_type => XSD::QName.new(NsVim25, "LeaveCurrentDomainRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReconfigureAutostartRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureAutostartRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostAutoStartManagerConfig"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AutoStartPowerOnRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AutoStartPowerOnRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AutoStartPowerOffRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AutoStartPowerOffRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryBootDevicesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryBootDevicesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateBootDeviceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateBootDeviceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EnableHyperThreadingRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnableHyperThreadingRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DisableHyperThreadingRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DisableHyperThreadingRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SearchDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SearchDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastorePath", "SOAP::SOAPString"],
      ["searchSpec", "VSphereCloud::HostDatastoreBrowserSearchSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SearchDatastoreSubFoldersRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SearchDatastoreSubFoldersRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastorePath", "SOAP::SOAPString"],
      ["searchSpec", "VSphereCloud::HostDatastoreBrowserSearchSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DeleteFileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DeleteFileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastorePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateLocalSwapDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateLocalSwapDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryAvailableDisksForVmfsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryAvailableDisksForVmfsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryVmfsDatastoreCreateOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVmfsDatastoreCreateOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["devicePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateVmfsDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateVmfsDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::VmfsDatastoreCreateSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryVmfsDatastoreExtendOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVmfsDatastoreExtendOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["devicePath", "SOAP::SOAPString"],
      ["suppressExpandCandidates", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryVmfsDatastoreExpandOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVmfsDatastoreExpandOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtendVmfsDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExtendVmfsDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::VmfsDatastoreExtendSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExpandVmfsDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExpandVmfsDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::VmfsDatastoreExpandSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateNasDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateNasDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostNasVolumeSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateLocalDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateLocalDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ConfigureDatastorePrincipalRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ConfigureDatastorePrincipalRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryUnresolvedVmfsVolumesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryUnresolvedVmfsVolumesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResignatureUnresolvedVmfsVolumeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResignatureUnresolvedVmfsVolumeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["resolutionSpec", "VSphereCloud::HostUnresolvedVmfsResignatureSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateDateTimeConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateDateTimeConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostDateTimeConfig"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryAvailableTimeZonesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryAvailableTimeZonesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryDateTimeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryDateTimeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateDateTimeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateDateTimeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dateTime", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RefreshDateTimeSystemRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshDateTimeSystemRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryAvailablePartitionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryAvailablePartitionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SelectActivePartitionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SelectActivePartitionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["partition", "VSphereCloud::HostScsiDiskPartition", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryPartitionCreateOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPartitionCreateOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryPartitionCreateDescRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPartitionCreateDescRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["diskUuid", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateDiagnosticPartitionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateDiagnosticPartitionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostDiagnosticPartitionCreateSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateDefaultPolicyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateDefaultPolicyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["defaultPolicy", "VSphereCloud::HostFirewallDefaultPolicy"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EnableRulesetRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnableRulesetRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DisableRulesetRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DisableRulesetRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RefreshFirewallRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshFirewallRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResetFirmwareToFactoryDefaultsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetFirmwareToFactoryDefaultsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::BackupFirmwareConfigurationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "BackupFirmwareConfigurationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryFirmwareConfigUploadURLRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryFirmwareConfigUploadURLRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RestoreFirmwareConfigurationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RestoreFirmwareConfigurationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RefreshHealthStatusSystemRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshHealthStatusSystemRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResetSystemHealthInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetSystemHealthInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryModulesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryModulesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateModuleOptionStringRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateModuleOptionStringRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["options", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryConfiguredModuleOptionStringRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryConfiguredModuleOptionStringRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateUserRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateUserRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["user", "VSphereCloud::HostAccountSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateUserRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateUserRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["user", "VSphereCloud::HostAccountSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateGroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateGroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["group", "VSphereCloud::HostAccountSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveUserRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveUserRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveGroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveGroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["groupName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AssignUserToGroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AssignUserToGroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["user", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnassignUserFromGroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UnassignUserFromGroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["user", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReconfigureServiceConsoleReservationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureServiceConsoleReservationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["cfgBytes", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReconfigureVirtualMachineReservationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureVirtualMachineReservationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::VirtualMachineMemoryReservationSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateNetworkConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateNetworkConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostNetworkConfig"],
      ["changeMode", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateDnsConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateDnsConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostDnsConfig"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateIpRouteConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateIpRouteConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostIpRouteConfig"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateConsoleIpRouteConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateConsoleIpRouteConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostIpRouteConfig"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateIpRouteTableConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateIpRouteTableConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostIpRouteTableConfig"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AddVirtualSwitchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddVirtualSwitchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vswitchName", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostVirtualSwitchSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveVirtualSwitchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveVirtualSwitchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vswitchName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateVirtualSwitchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateVirtualSwitchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vswitchName", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostVirtualSwitchSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AddPortGroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddPortGroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["portgrp", "VSphereCloud::HostPortGroupSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemovePortGroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemovePortGroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pgName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdatePortGroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdatePortGroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pgName", "SOAP::SOAPString"],
      ["portgrp", "VSphereCloud::HostPortGroupSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdatePhysicalNicLinkSpeedRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdatePhysicalNicLinkSpeedRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"],
      ["linkSpeed", "VSphereCloud::PhysicalNicLinkInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryNetworkHintRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryNetworkHintRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AddVirtualNicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddVirtualNicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["portgroup", "SOAP::SOAPString"],
      ["nic", "VSphereCloud::HostVirtualNicSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveVirtualNicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveVirtualNicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateVirtualNicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateVirtualNicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"],
      ["nic", "VSphereCloud::HostVirtualNicSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AddServiceConsoleVirtualNicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddServiceConsoleVirtualNicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["portgroup", "SOAP::SOAPString"],
      ["nic", "VSphereCloud::HostVirtualNicSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveServiceConsoleVirtualNicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveServiceConsoleVirtualNicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateServiceConsoleVirtualNicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateServiceConsoleVirtualNicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"],
      ["nic", "VSphereCloud::HostVirtualNicSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RestartServiceConsoleVirtualNicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RestartServiceConsoleVirtualNicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RefreshNetworkSystemRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshNetworkSystemRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CheckHostPatchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckHostPatchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScanHostPatchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ScanHostPatchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["repository", "VSphereCloud::HostPatchManagerLocator"],
      ["updateID", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScanHostPatchV2RequestType,
    :schema_type => XSD::QName.new(NsVim25, "ScanHostPatchV2RequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StageHostPatchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StageHostPatchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["vibUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InstallHostPatchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "InstallHostPatchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["repository", "VSphereCloud::HostPatchManagerLocator"],
      ["updateID", "SOAP::SOAPString"],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InstallHostPatchV2RequestType,
    :schema_type => XSD::QName.new(NsVim25, "InstallHostPatchV2RequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["vibUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UninstallHostPatchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UninstallHostPatchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["bulletinIds", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryHostPatchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryHostPatchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RefreshRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdatePassthruConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdatePassthruConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostPciPassthruConfig[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ConfigurePowerPolicyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ConfigurePowerPolicyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateServicePolicyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateServicePolicyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StartServiceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StartServiceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StopServiceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StopServiceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RestartServiceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RestartServiceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UninstallServiceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UninstallServiceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RefreshServicesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshServicesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReconfigureSnmpAgentRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureSnmpAgentRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostSnmpConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SendTestNotificationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SendTestNotificationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrieveDiskPartitionInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveDiskPartitionInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["devicePath", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ComputeDiskPartitionInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ComputeDiskPartitionInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["devicePath", "SOAP::SOAPString"],
      ["layout", "VSphereCloud::HostDiskPartitionLayout"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ComputeDiskPartitionInfoForResizeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ComputeDiskPartitionInfoForResizeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["partition", "VSphereCloud::HostScsiDiskPartition"],
      ["blockRange", "VSphereCloud::HostDiskPartitionBlockRange"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateDiskPartitionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateDiskPartitionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["devicePath", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostDiskPartitionSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FormatVmfsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FormatVmfsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["createSpec", "VSphereCloud::HostVmfsSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RescanVmfsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RescanVmfsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AttachVmfsExtentRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AttachVmfsExtentRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vmfsPath", "SOAP::SOAPString"],
      ["extent", "VSphereCloud::HostScsiDiskPartition"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExpandVmfsExtentRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExpandVmfsExtentRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vmfsPath", "SOAP::SOAPString"],
      ["extent", "VSphereCloud::HostScsiDiskPartition"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpgradeVmfsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpgradeVmfsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vmfsPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpgradeVmLayoutRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpgradeVmLayoutRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryUnresolvedVmfsVolumeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryUnresolvedVmfsVolumeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResolveMultipleUnresolvedVmfsVolumesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResolveMultipleUnresolvedVmfsVolumesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["resolutionSpec", "VSphereCloud::HostUnresolvedVmfsResolutionSpec[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnmountForceMountedVmfsVolumeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UnmountForceMountedVmfsVolumeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vmfsUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RescanHbaRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RescanHbaRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["hbaDevice", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RescanAllHbaRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RescanAllHbaRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateSoftwareInternetScsiEnabledRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateSoftwareInternetScsiEnabledRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiDiscoveryPropertiesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateInternetScsiDiscoveryPropertiesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["discoveryProperties", "VSphereCloud::HostInternetScsiHbaDiscoveryProperties"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiAuthenticationPropertiesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateInternetScsiAuthenticationPropertiesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["authenticationProperties", "VSphereCloud::HostInternetScsiHbaAuthenticationProperties"],
      ["targetSet", "VSphereCloud::HostInternetScsiHbaTargetSet", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiDigestPropertiesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateInternetScsiDigestPropertiesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targetSet", "VSphereCloud::HostInternetScsiHbaTargetSet", [0, 1]],
      ["digestProperties", "VSphereCloud::HostInternetScsiHbaDigestProperties"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiAdvancedOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateInternetScsiAdvancedOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targetSet", "VSphereCloud::HostInternetScsiHbaTargetSet", [0, 1]],
      ["options", "VSphereCloud::HostInternetScsiHbaParamValue[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiIPPropertiesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateInternetScsiIPPropertiesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["ipProperties", "VSphereCloud::HostInternetScsiHbaIPProperties"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiNameRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateInternetScsiNameRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["iScsiName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiAliasRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateInternetScsiAliasRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["iScsiAlias", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AddInternetScsiSendTargetsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddInternetScsiSendTargetsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VSphereCloud::HostInternetScsiHbaSendTarget[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveInternetScsiSendTargetsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveInternetScsiSendTargetsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VSphereCloud::HostInternetScsiHbaSendTarget[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AddInternetScsiStaticTargetsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddInternetScsiStaticTargetsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VSphereCloud::HostInternetScsiHbaStaticTarget[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveInternetScsiStaticTargetsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveInternetScsiStaticTargetsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VSphereCloud::HostInternetScsiHbaStaticTarget[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EnableMultipathPathRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnableMultipathPathRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pathName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DisableMultipathPathRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DisableMultipathPathRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pathName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SetMultipathLunPolicyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetMultipathLunPolicyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["lunId", "SOAP::SOAPString"],
      ["policy", "VSphereCloud::HostMultipathInfoLogicalUnitPolicy"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryPathSelectionPolicyOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPathSelectionPolicyOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryStorageArrayTypePolicyOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryStorageArrayTypePolicyOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateScsiLunDisplayNameRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateScsiLunDisplayNameRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["lunUuid", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RefreshStorageSystemRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshStorageSystemRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateIpConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateIpConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ipConfig", "VSphereCloud::HostIpConfig"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SelectVnicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SelectVnicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DeselectVnicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DeselectVnicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryNetConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryNetConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["nicType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SelectVnicForNicTypeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SelectVnicForNicTypeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["nicType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DeselectVnicForNicTypeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DeselectVnicForNicTypeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["nicType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["changedValue", "VSphereCloud::OptionValue[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CheckComplianceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckComplianceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["profile", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryComplianceStatusRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryComplianceStatusRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["profile", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClearComplianceStatusRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ClearComplianceStatusRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["profile", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryExpressionMetadataRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryExpressionMetadataRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["expressionName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DestroyProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AssociateProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AssociateProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DissociateProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DissociateProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CheckProfileComplianceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckProfileComplianceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExportProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExportProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["createSpec", "VSphereCloud::ProfileCreateSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryPolicyMetadataRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPolicyMetadataRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["policyName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FindAssociatedProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindAssociatedProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateClusterProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateClusterProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::ClusterProfileConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateReferenceHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateReferenceHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateHostProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateHostProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostProfileConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExecuteHostProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExecuteHostProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["deferredParam", "VSphereCloud::ProfileDeferredPolicyOptionParameter[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ApplyHostConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ApplyHostConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["configSpec", "VSphereCloud::HostConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GenerateConfigTaskListRequestType,
    :schema_type => XSD::QName.new(NsVim25, "GenerateConfigTaskListRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["configSpec", "VSphereCloud::HostConfigSpec"],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryHostProfileMetadataRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryHostProfileMetadataRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["profileName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateDefaultProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateDefaultProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["profileType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveScheduledTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveScheduledTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReconfigureScheduledTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureScheduledTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::ScheduledTaskSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RunScheduledTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RunScheduledTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateScheduledTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateScheduledTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::ScheduledTaskSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrieveEntityScheduledTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveEntityScheduledTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateObjectScheduledTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateObjectScheduledTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::ScheduledTaskSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RetrieveObjectScheduledTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveObjectScheduledTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OpenInventoryViewFolderRequestType,
    :schema_type => XSD::QName.new(NsVim25, "OpenInventoryViewFolderRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CloseInventoryViewFolderRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CloseInventoryViewFolderRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ModifyListViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ModifyListViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["add", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["remove", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResetListViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetListViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResetListViewFromViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetListViewFromViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["view", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DestroyViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateInventoryViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateInventoryViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateContainerViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateContainerViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["container", "VSphereCloud::ManagedObjectReference"],
      ["type", "SOAP::SOAPString[]", [0, nil]],
      ["recursive", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateListViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateListViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateListViewFromViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateListViewFromViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["view", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RevertToSnapshotRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RevertToSnapshotRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["suppressPowerOn", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveSnapshotRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveSnapshotRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["removeChildren", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RenameSnapshotRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RenameSnapshotRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CheckCompatibilityRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckCompatibilityRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QueryVMotionCompatibilityExRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVMotionCompatibilityExRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CheckMigrateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckMigrateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["state", "VSphereCloud::VirtualMachinePowerState", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CheckRelocateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckRelocateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::VirtualMachineRelocateSpec"],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AboutInfo,
    :schema_type => XSD::QName.new(NsVim25, "AboutInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["build", "SOAP::SOAPString"],
      ["localeVersion", "SOAP::SOAPString", [0, 1]],
      ["localeBuild", "SOAP::SOAPString", [0, 1]],
      ["osType", "SOAP::SOAPString"],
      ["productLineId", "SOAP::SOAPString"],
      ["apiType", "SOAP::SOAPString"],
      ["apiVersion", "SOAP::SOAPString"],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["licenseProductName", "SOAP::SOAPString", [0, 1]],
      ["licenseProductVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AuthorizationDescription,
    :schema_type => XSD::QName.new(NsVim25, "AuthorizationDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["privilege", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["privilegeGroup", "VSphereCloud::ElementDescription[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::Permission,
    :schema_type => XSD::QName.new(NsVim25, "Permission"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"],
      ["roleId", "SOAP::SOAPInt"],
      ["propagate", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPermission,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPermission"),
    :schema_element => [
      ["permission", ["VSphereCloud::Permission[]", XSD::QName.new(NsVim25, "Permission")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AuthorizationRole,
    :schema_type => XSD::QName.new(NsVim25, "AuthorizationRole"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["roleId", "SOAP::SOAPInt"],
      ["system", "SOAP::SOAPBoolean"],
      ["name", "SOAP::SOAPString"],
      ["info", "VSphereCloud::Description"],
      ["privilege", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfAuthorizationRole,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAuthorizationRole"),
    :schema_element => [
      ["authorizationRole", ["VSphereCloud::AuthorizationRole[]", XSD::QName.new(NsVim25, "AuthorizationRole")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AuthorizationPrivilege,
    :schema_type => XSD::QName.new(NsVim25, "AuthorizationPrivilege"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["privId", "SOAP::SOAPString"],
      ["onParent", "SOAP::SOAPBoolean"],
      ["name", "SOAP::SOAPString"],
      ["privGroupName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfAuthorizationPrivilege,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAuthorizationPrivilege"),
    :schema_element => [
      ["authorizationPrivilege", ["VSphereCloud::AuthorizationPrivilege[]", XSD::QName.new(NsVim25, "AuthorizationPrivilege")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::BoolPolicy,
    :schema_type => XSD::QName.new(NsVim25, "BoolPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::Capability,
    :schema_type => XSD::QName.new(NsVim25, "Capability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["provisioningSupported", "SOAP::SOAPBoolean"],
      ["multiHostSupported", "SOAP::SOAPBoolean"],
      ["userShellAccessSupported", "SOAP::SOAPBoolean"],
      ["supportedEVCMode", "VSphereCloud::EVCMode[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterComputeResourceSummary,
    :schema_type => XSD::QName.new(NsVim25, "ClusterComputeResourceSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "ComputeResourceSummary"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["totalCpu", "SOAP::SOAPInt"],
      ["totalMemory", "SOAP::SOAPLong"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["effectiveCpu", "SOAP::SOAPInt"],
      ["effectiveMemory", "SOAP::SOAPLong"],
      ["numHosts", "SOAP::SOAPInt"],
      ["numEffectiveHosts", "SOAP::SOAPInt"],
      ["overallStatus", "VSphereCloud::ManagedEntityStatus"],
      ["currentFailoverLevel", "SOAP::SOAPInt"],
      ["admissionControlInfo", "VSphereCloud::ClusterDasAdmissionControlInfo", [0, 1]],
      ["numVmotions", "SOAP::SOAPInt"],
      ["targetBalance", "SOAP::SOAPInt", [0, 1]],
      ["currentBalance", "SOAP::SOAPInt", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ComputeResourceSummary,
    :schema_type => XSD::QName.new(NsVim25, "ComputeResourceSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["totalCpu", "SOAP::SOAPInt"],
      ["totalMemory", "SOAP::SOAPLong"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["effectiveCpu", "SOAP::SOAPInt"],
      ["effectiveMemory", "SOAP::SOAPLong"],
      ["numHosts", "SOAP::SOAPInt"],
      ["numEffectiveHosts", "SOAP::SOAPInt"],
      ["overallStatus", "VSphereCloud::ManagedEntityStatus"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ComputeResourceConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ComputeResourceConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ComputeResourceConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ComputeResourceConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomFieldDef,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldDef"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["managedObjectType", "SOAP::SOAPString", [0, 1]],
      ["fieldDefPrivileges", "VSphereCloud::PrivilegePolicyDef", [0, 1]],
      ["fieldInstancePrivileges", "VSphereCloud::PrivilegePolicyDef", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfCustomFieldDef,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfCustomFieldDef"),
    :schema_element => [
      ["customFieldDef", ["VSphereCloud::CustomFieldDef[]", XSD::QName.new(NsVim25, "CustomFieldDef")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomFieldValue,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfCustomFieldValue,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfCustomFieldValue"),
    :schema_element => [
      ["customFieldValue", ["VSphereCloud::CustomFieldValue[]", XSD::QName.new(NsVim25, "CustomFieldValue")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomFieldStringValue,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldStringValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomFieldValue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationSpecInfo,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSpecInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["changeVersion", "SOAP::SOAPString", [0, 1]],
      ["lastUpdateTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfCustomizationSpecInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfCustomizationSpecInfo"),
    :schema_element => [
      ["customizationSpecInfo", ["VSphereCloud::CustomizationSpecInfo[]", XSD::QName.new(NsVim25, "CustomizationSpecInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationSpecItem,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSpecItem"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["info", "VSphereCloud::CustomizationSpecInfo"],
      ["spec", "VSphereCloud::CustomizationSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreSummary,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["uncommitted", "SOAP::SOAPLong", [0, 1]],
      ["accessible", "SOAP::SOAPBoolean"],
      ["multipleHostAccess", "SOAP::SOAPBoolean", [0, 1]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreCapability,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["directoryHierarchySupported", "SOAP::SOAPBoolean"],
      ["rawDiskMappingsSupported", "SOAP::SOAPBoolean"],
      ["perFileThinProvisioningSupported", "SOAP::SOAPBoolean"],
      ["storageIORMSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreHostMount,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreHostMount"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["mountInfo", "VSphereCloud::HostMountInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDatastoreHostMount,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDatastoreHostMount"),
    :schema_element => [
      ["datastoreHostMount", ["VSphereCloud::DatastoreHostMount[]", XSD::QName.new(NsVim25, "DatastoreHostMount")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreMountPathDatastorePair,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreMountPathDatastorePair"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["oldMountPath", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDatastoreMountPathDatastorePair,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDatastoreMountPathDatastorePair"),
    :schema_element => [
      ["datastoreMountPathDatastorePair", ["VSphereCloud::DatastoreMountPathDatastorePair[]", XSD::QName.new(NsVim25, "DatastoreMountPathDatastorePair")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::Description,
    :schema_type => XSD::QName.new(NsVim25, "Description"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DiagnosticManagerLogDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "DiagnosticManagerLogDescriptor"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["fileName", "SOAP::SOAPString"],
      ["creator", "SOAP::SOAPString"],
      ["format", "SOAP::SOAPString"],
      ["mimeType", "SOAP::SOAPString"],
      ["info", "VSphereCloud::Description"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDiagnosticManagerLogDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDiagnosticManagerLogDescriptor"),
    :schema_element => [
      ["diagnosticManagerLogDescriptor", ["VSphereCloud::DiagnosticManagerLogDescriptor[]", XSD::QName.new(NsVim25, "DiagnosticManagerLogDescriptor")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DiagnosticManagerLogHeader,
    :schema_type => XSD::QName.new(NsVim25, "DiagnosticManagerLogHeader"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["lineStart", "SOAP::SOAPInt"],
      ["lineEnd", "SOAP::SOAPInt"],
      ["lineText", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DiagnosticManagerBundleInfo,
    :schema_type => XSD::QName.new(NsVim25, "DiagnosticManagerBundleInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["system", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["url", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDiagnosticManagerBundleInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDiagnosticManagerBundleInfo"),
    :schema_element => [
      ["diagnosticManagerBundleInfo", ["VSphereCloud::DiagnosticManagerBundleInfo[]", XSD::QName.new(NsVim25, "DiagnosticManagerBundleInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSContactInfo,
    :schema_type => XSD::QName.new(NsVim25, "DVSContactInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["contact", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSFeatureCapability,
    :schema_type => XSD::QName.new(NsVim25, "DVSFeatureCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["networkResourceManagementSupported", "SOAP::SOAPBoolean"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean"],
      ["nicTeamingPolicy", "SOAP::SOAPString[]", [0, nil]],
      ["networkResourcePoolHighShareValue", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSCapability,
    :schema_type => XSD::QName.new(NsVim25, "DVSCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dvsOperationSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["dvPortGroupOperationSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["dvPortOperationSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["compatibleHostComponentProductInfo", "VSphereCloud::DistributedVirtualSwitchHostProductSpec[]", [0, nil]],
      ["featuresSupported", "VSphereCloud::DVSFeatureCapability", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSSummary,
    :schema_type => XSD::QName.new(NsVim25, "DVSSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["hostMember", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["portgroupName", "SOAP::SOAPString[]", [0, nil]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["contact", "VSphereCloud::DVSContactInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSPolicy,
    :schema_type => XSD::QName.new(NsVim25, "DVSPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["autoPreInstallAllowed", "SOAP::SOAPBoolean", [0, 1]],
      ["autoUpgradeAllowed", "SOAP::SOAPBoolean", [0, 1]],
      ["partialUpgradeAllowed", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSUplinkPortPolicy,
    :schema_type => XSD::QName.new(NsVim25, "DVSUplinkPortPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSNameArrayUplinkPortPolicy,
    :schema_type => XSD::QName.new(NsVim25, "DVSNameArrayUplinkPortPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVSUplinkPortPolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["uplinkPortName", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "DVSConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["numStandalonePorts", "SOAP::SOAPInt", [0, 1]],
      ["maxPorts", "SOAP::SOAPInt", [0, 1]],
      ["uplinkPortPolicy", "VSphereCloud::DVSUplinkPortPolicy", [0, 1]],
      ["uplinkPortgroup", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VSphereCloud::DVPortSetting", [0, 1]],
      ["host", "VSphereCloud::DistributedVirtualSwitchHostMemberConfigSpec[]", [0, nil]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["policy", "VSphereCloud::DVSPolicy", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["contact", "VSphereCloud::DVSContactInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSCreateSpec,
    :schema_type => XSD::QName.new(NsVim25, "DVSCreateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["configSpec", "VSphereCloud::DVSConfigSpec"],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["capability", "VSphereCloud::DVSCapability", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "DVSConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["numStandalonePorts", "SOAP::SOAPInt"],
      ["numPorts", "SOAP::SOAPInt"],
      ["maxPorts", "SOAP::SOAPInt"],
      ["uplinkPortPolicy", "VSphereCloud::DVSUplinkPortPolicy"],
      ["uplinkPortgroup", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VSphereCloud::DVPortSetting"],
      ["host", "VSphereCloud::DistributedVirtualSwitchHostMember[]", [0, nil]],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec"],
      ["targetInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["policy", "VSphereCloud::DVSPolicy", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPString"],
      ["contact", "VSphereCloud::DVSContactInfo"],
      ["createTime", "SOAP::SOAPDateTime"],
      ["networkResourceManagementEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EVCMode,
    :schema_type => XSD::QName.new(NsVim25, "EVCMode"),
    :schema_basetype => XSD::QName.new(NsVim25, "ElementDescription"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["guaranteedCPUFeatures", "VSphereCloud::HostCpuIdInfo[]", [0, nil]],
      ["vendor", "SOAP::SOAPString"],
      ["track", "SOAP::SOAPString[]", [0, nil]],
      ["vendorTier", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfEVCMode,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfEVCMode"),
    :schema_element => [
      ["eVCMode", ["VSphereCloud::EVCMode[]", XSD::QName.new(NsVim25, "EVCMode")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ElementDescription,
    :schema_type => XSD::QName.new(NsVim25, "ElementDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "Description"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfElementDescription,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfElementDescription"),
    :schema_element => [
      ["elementDescription", ["VSphereCloud::ElementDescription[]", XSD::QName.new(NsVim25, "ElementDescription")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EnumDescription,
    :schema_type => XSD::QName.new(NsVim25, "EnumDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["tags", "VSphereCloud::ElementDescription[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfEnumDescription,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfEnumDescription"),
    :schema_element => [
      ["enumDescription", ["VSphereCloud::EnumDescription[]", XSD::QName.new(NsVim25, "EnumDescription")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtendedDescription,
    :schema_type => XSD::QName.new(NsVim25, "ExtendedDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "Description"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["messageCatalogKeyPrefix", "SOAP::SOAPString"],
      ["messageArg", "VSphereCloud::KeyAnyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtendedElementDescription,
    :schema_type => XSD::QName.new(NsVim25, "ExtendedElementDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "ElementDescription"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["messageCatalogKeyPrefix", "SOAP::SOAPString"],
      ["messageArg", "VSphereCloud::KeyAnyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtensionServerInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionServerInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"],
      ["description", "VSphereCloud::Description"],
      ["company", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["adminEmail", "SOAP::SOAPString[]", [1, nil]],
      ["serverThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfExtensionServerInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtensionServerInfo"),
    :schema_element => [
      ["extensionServerInfo", ["VSphereCloud::ExtensionServerInfo[]", XSD::QName.new(NsVim25, "ExtensionServerInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtensionClientInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionClientInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["description", "VSphereCloud::Description"],
      ["company", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfExtensionClientInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtensionClientInfo"),
    :schema_element => [
      ["extensionClientInfo", ["VSphereCloud::ExtensionClientInfo[]", XSD::QName.new(NsVim25, "ExtensionClientInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtensionTaskTypeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionTaskTypeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["taskID", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfExtensionTaskTypeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtensionTaskTypeInfo"),
    :schema_element => [
      ["extensionTaskTypeInfo", ["VSphereCloud::ExtensionTaskTypeInfo[]", XSD::QName.new(NsVim25, "ExtensionTaskTypeInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtensionEventTypeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionEventTypeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["eventID", "SOAP::SOAPString"],
      ["eventTypeSchema", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfExtensionEventTypeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtensionEventTypeInfo"),
    :schema_element => [
      ["extensionEventTypeInfo", ["VSphereCloud::ExtensionEventTypeInfo[]", XSD::QName.new(NsVim25, "ExtensionEventTypeInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtensionFaultTypeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionFaultTypeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultID", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfExtensionFaultTypeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtensionFaultTypeInfo"),
    :schema_element => [
      ["extensionFaultTypeInfo", ["VSphereCloud::ExtensionFaultTypeInfo[]", XSD::QName.new(NsVim25, "ExtensionFaultTypeInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtensionPrivilegeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionPrivilegeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["privID", "SOAP::SOAPString"],
      ["privGroupName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfExtensionPrivilegeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtensionPrivilegeInfo"),
    :schema_element => [
      ["extensionPrivilegeInfo", ["VSphereCloud::ExtensionPrivilegeInfo[]", XSD::QName.new(NsVim25, "ExtensionPrivilegeInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtensionResourceInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionResourceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["v_module", ["SOAP::SOAPString", XSD::QName.new(NsVim25, "module")]],
      ["data", "VSphereCloud::KeyValue[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfExtensionResourceInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtensionResourceInfo"),
    :schema_element => [
      ["extensionResourceInfo", ["VSphereCloud::ExtensionResourceInfo[]", XSD::QName.new(NsVim25, "ExtensionResourceInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtensionHealthInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionHealthInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::Extension,
    :schema_type => XSD::QName.new(NsVim25, "Extension"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["description", "VSphereCloud::Description"],
      ["key", "SOAP::SOAPString"],
      ["company", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString"],
      ["subjectName", "SOAP::SOAPString", [0, 1]],
      ["server", "VSphereCloud::ExtensionServerInfo[]", [0, nil]],
      ["client", "VSphereCloud::ExtensionClientInfo[]", [0, nil]],
      ["taskList", "VSphereCloud::ExtensionTaskTypeInfo[]", [0, nil]],
      ["eventList", "VSphereCloud::ExtensionEventTypeInfo[]", [0, nil]],
      ["faultList", "VSphereCloud::ExtensionFaultTypeInfo[]", [0, nil]],
      ["privilegeList", "VSphereCloud::ExtensionPrivilegeInfo[]", [0, nil]],
      ["resourceList", "VSphereCloud::ExtensionResourceInfo[]", [0, nil]],
      ["lastHeartbeatTime", "SOAP::SOAPDateTime"],
      ["healthInfo", "VSphereCloud::ExtensionHealthInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfExtension,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtension"),
    :schema_element => [
      ["extension", ["VSphereCloud::Extension[]", XSD::QName.new(NsVim25, "Extension")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostServiceTicket,
    :schema_type => XSD::QName.new(NsVim25, "HostServiceTicket"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]],
      ["service", "SOAP::SOAPString"],
      ["serviceVersion", "SOAP::SOAPString"],
      ["sessionId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseDatastoreLeaseInfo,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseDatastoreLeaseInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["datastoreKey", "SOAP::SOAPString"],
      ["hosts", "VSphereCloud::HttpNfcLeaseHostInfo[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHttpNfcLeaseDatastoreLeaseInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHttpNfcLeaseDatastoreLeaseInfo"),
    :schema_element => [
      ["httpNfcLeaseDatastoreLeaseInfo", ["VSphereCloud::HttpNfcLeaseDatastoreLeaseInfo[]", XSD::QName.new(NsVim25, "HttpNfcLeaseDatastoreLeaseInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseHostInfo,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseHostInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"],
      ["sslThumbprint", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHttpNfcLeaseHostInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHttpNfcLeaseHostInfo"),
    :schema_element => [
      ["httpNfcLeaseHostInfo", ["VSphereCloud::HttpNfcLeaseHostInfo[]", XSD::QName.new(NsVim25, "HttpNfcLeaseHostInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseInfo,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["lease", "VSphereCloud::ManagedObjectReference"],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["deviceUrl", "VSphereCloud::HttpNfcLeaseDeviceUrl[]", [0, nil]],
      ["totalDiskCapacityInKB", "SOAP::SOAPLong"],
      ["leaseTimeout", "SOAP::SOAPInt"],
      ["hostMap", "VSphereCloud::HttpNfcLeaseDatastoreLeaseInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseDeviceUrl,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseDeviceUrl"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["importKey", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["sslThumbprint", "SOAP::SOAPString"],
      ["disk", "SOAP::SOAPBoolean", [0, 1]],
      ["targetId", "SOAP::SOAPString", [0, 1]],
      ["datastoreKey", "SOAP::SOAPString", [0, 1]],
      ["fileSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHttpNfcLeaseDeviceUrl,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHttpNfcLeaseDeviceUrl"),
    :schema_element => [
      ["httpNfcLeaseDeviceUrl", ["VSphereCloud::HttpNfcLeaseDeviceUrl[]", XSD::QName.new(NsVim25, "HttpNfcLeaseDeviceUrl")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseManifestEntry,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseManifestEntry"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["sha1", "SOAP::SOAPString"],
      ["size", "SOAP::SOAPLong"],
      ["disk", "SOAP::SOAPBoolean"],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["populatedSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHttpNfcLeaseManifestEntry,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHttpNfcLeaseManifestEntry"),
    :schema_element => [
      ["httpNfcLeaseManifestEntry", ["VSphereCloud::HttpNfcLeaseManifestEntry[]", XSD::QName.new(NsVim25, "HttpNfcLeaseManifestEntry")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ImportSpec,
    :schema_type => XSD::QName.new(NsVim25, "ImportSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entityConfig", "VSphereCloud::VAppEntityConfigInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfImportSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfImportSpec"),
    :schema_element => [
      ["importSpec", ["VSphereCloud::ImportSpec[]", XSD::QName.new(NsVim25, "ImportSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InheritablePolicy,
    :schema_type => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IntPolicy,
    :schema_type => XSD::QName.new(NsVim25, "IntPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::KeyValue,
    :schema_type => XSD::QName.new(NsVim25, "KeyValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfKeyValue,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfKeyValue"),
    :schema_element => [
      ["keyValue", ["VSphereCloud::KeyValue[]", XSD::QName.new(NsVim25, "KeyValue")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseAssignmentManagerLicenseAssignment,
    :schema_type => XSD::QName.new(NsVim25, "LicenseAssignmentManagerLicenseAssignment"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entityId", "SOAP::SOAPString"],
      ["scope", "SOAP::SOAPString", [0, 1]],
      ["entityDisplayName", "SOAP::SOAPString", [0, 1]],
      ["assignedLicense", "VSphereCloud::LicenseManagerLicenseInfo"],
      ["properties", "VSphereCloud::KeyAnyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfLicenseAssignmentManagerLicenseAssignment,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLicenseAssignmentManagerLicenseAssignment"),
    :schema_element => [
      ["licenseAssignmentManagerLicenseAssignment", ["VSphereCloud::LicenseAssignmentManagerLicenseAssignment[]", XSD::QName.new(NsVim25, "LicenseAssignmentManagerLicenseAssignment")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseSource,
    :schema_type => XSD::QName.new(NsVim25, "LicenseSource"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseServerSource,
    :schema_type => XSD::QName.new(NsVim25, "LicenseServerSource"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseSource"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LocalLicenseSource,
    :schema_type => XSD::QName.new(NsVim25, "LocalLicenseSource"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseSource"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["licenseKeys", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EvaluationLicenseSource,
    :schema_type => XSD::QName.new(NsVim25, "EvaluationLicenseSource"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseSource"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["remainingHours", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseFeatureInfo,
    :schema_type => XSD::QName.new(NsVim25, "LicenseFeatureInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["featureName", "SOAP::SOAPString"],
      ["featureDescription", "SOAP::SOAPString", [0, 1]],
      ["state", "VSphereCloud::LicenseFeatureInfoState", [0, 1]],
      ["costUnit", "SOAP::SOAPString"],
      ["sourceRestriction", "SOAP::SOAPString", [0, 1]],
      ["dependentKey", "SOAP::SOAPString[]", [0, nil]],
      ["edition", "SOAP::SOAPBoolean", [0, 1]],
      ["expiresOn", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfLicenseFeatureInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLicenseFeatureInfo"),
    :schema_element => [
      ["licenseFeatureInfo", ["VSphereCloud::LicenseFeatureInfo[]", XSD::QName.new(NsVim25, "LicenseFeatureInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseReservationInfo,
    :schema_type => XSD::QName.new(NsVim25, "LicenseReservationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["state", "VSphereCloud::LicenseReservationInfoState"],
      ["required", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfLicenseReservationInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLicenseReservationInfo"),
    :schema_element => [
      ["licenseReservationInfo", ["VSphereCloud::LicenseReservationInfo[]", XSD::QName.new(NsVim25, "LicenseReservationInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseAvailabilityInfo,
    :schema_type => XSD::QName.new(NsVim25, "LicenseAvailabilityInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["feature", "VSphereCloud::LicenseFeatureInfo"],
      ["total", "SOAP::SOAPInt"],
      ["available", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfLicenseAvailabilityInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLicenseAvailabilityInfo"),
    :schema_element => [
      ["licenseAvailabilityInfo", ["VSphereCloud::LicenseAvailabilityInfo[]", XSD::QName.new(NsVim25, "LicenseAvailabilityInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseDiagnostics,
    :schema_type => XSD::QName.new(NsVim25, "LicenseDiagnostics"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["sourceLastChanged", "SOAP::SOAPDateTime"],
      ["sourceLost", "SOAP::SOAPString"],
      ["sourceLatency", "SOAP::SOAPFloat"],
      ["licenseRequests", "SOAP::SOAPString"],
      ["licenseRequestFailures", "SOAP::SOAPString"],
      ["licenseFeatureUnknowns", "SOAP::SOAPString"],
      ["opState", "VSphereCloud::LicenseManagerState"],
      ["lastStatusUpdate", "SOAP::SOAPDateTime"],
      ["opFailureMessage", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseUsageInfo,
    :schema_type => XSD::QName.new(NsVim25, "LicenseUsageInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["source", "VSphereCloud::LicenseSource"],
      ["sourceAvailable", "SOAP::SOAPBoolean"],
      ["reservationInfo", "VSphereCloud::LicenseReservationInfo[]", [0, nil]],
      ["featureInfo", "VSphereCloud::LicenseFeatureInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseManagerEvaluationInfo,
    :schema_type => XSD::QName.new(NsVim25, "LicenseManagerEvaluationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["properties", "VSphereCloud::KeyAnyValue[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseManagerLicenseInfo,
    :schema_type => XSD::QName.new(NsVim25, "LicenseManagerLicenseInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["licenseKey", "SOAP::SOAPString"],
      ["editionKey", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["total", "SOAP::SOAPInt"],
      ["used", "SOAP::SOAPInt", [0, 1]],
      ["costUnit", "SOAP::SOAPString"],
      ["properties", "VSphereCloud::KeyAnyValue[]", [0, nil]],
      ["labels", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfLicenseManagerLicenseInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLicenseManagerLicenseInfo"),
    :schema_element => [
      ["licenseManagerLicenseInfo", ["VSphereCloud::LicenseManagerLicenseInfo[]", XSD::QName.new(NsVim25, "LicenseManagerLicenseInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LocalizationManagerMessageCatalog,
    :schema_type => XSD::QName.new(NsVim25, "LocalizationManagerMessageCatalog"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["moduleName", "SOAP::SOAPString"],
      ["catalogName", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString"],
      ["catalogUri", "SOAP::SOAPString"],
      ["lastModified", "SOAP::SOAPDateTime", [0, 1]],
      ["md5sum", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfLocalizationManagerMessageCatalog,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLocalizationManagerMessageCatalog"),
    :schema_element => [
      ["localizationManagerMessageCatalog", ["VSphereCloud::LocalizationManagerMessageCatalog[]", XSD::QName.new(NsVim25, "LocalizationManagerMessageCatalog")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LongPolicy,
    :schema_type => XSD::QName.new(NsVim25, "LongPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MethodDescription,
    :schema_type => XSD::QName.new(NsVim25, "MethodDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "Description"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetworkSummary,
    :schema_type => XSD::QName.new(NsVim25, "NetworkSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["network", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["accessible", "SOAP::SOAPBoolean"],
      ["ipPoolName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NumericRange,
    :schema_type => XSD::QName.new(NsVim25, "NumericRange"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["start", "SOAP::SOAPInt"],
      ["v_end", ["SOAP::SOAPInt", XSD::QName.new(NsVim25, "end")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfNumericRange,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNumericRange"),
    :schema_element => [
      ["numericRange", ["VSphereCloud::NumericRange[]", XSD::QName.new(NsVim25, "NumericRange")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfDeploymentOption,
    :schema_type => XSD::QName.new(NsVim25, "OvfDeploymentOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfOvfDeploymentOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOvfDeploymentOption"),
    :schema_element => [
      ["ovfDeploymentOption", ["VSphereCloud::OvfDeploymentOption[]", XSD::QName.new(NsVim25, "OvfDeploymentOption")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfManagerCommonParams,
    :schema_type => XSD::QName.new(NsVim25, "OvfManagerCommonParams"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfValidateHostParams,
    :schema_type => XSD::QName.new(NsVim25, "OvfValidateHostParams"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfManagerCommonParams"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfValidateHostResult,
    :schema_type => XSD::QName.new(NsVim25, "OvfValidateHostResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["downloadSize", "SOAP::SOAPLong", [0, 1]],
      ["flatDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["sparseDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["warning", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["supportedDiskProvisioning", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfParseDescriptorParams,
    :schema_type => XSD::QName.new(NsVim25, "OvfParseDescriptorParams"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfManagerCommonParams"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfParseDescriptorResult,
    :schema_type => XSD::QName.new(NsVim25, "OvfParseDescriptorResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["network", "VSphereCloud::OvfNetworkInfo[]", [0, nil]],
      ["ipAllocationScheme", "SOAP::SOAPString[]", [0, nil]],
      ["ipProtocols", "SOAP::SOAPString[]", [0, nil]],
      ["property", "VSphereCloud::VAppPropertyInfo[]", [0, nil]],
      ["productInfo", "VSphereCloud::VAppProductInfo", [0, 1]],
      ["annotation", "SOAP::SOAPString"],
      ["approximateDownloadSize", "SOAP::SOAPLong", [0, 1]],
      ["approximateFlatDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["approximateSparseDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["defaultEntityName", "SOAP::SOAPString"],
      ["virtualApp", "SOAP::SOAPBoolean"],
      ["deploymentOption", "VSphereCloud::OvfDeploymentOption[]", [0, nil]],
      ["defaultDeploymentOption", "SOAP::SOAPString"],
      ["entityName", "VSphereCloud::KeyValue[]", [0, nil]],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["warning", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfNetworkInfo,
    :schema_type => XSD::QName.new(NsVim25, "OvfNetworkInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfOvfNetworkInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOvfNetworkInfo"),
    :schema_element => [
      ["ovfNetworkInfo", ["VSphereCloud::OvfNetworkInfo[]", XSD::QName.new(NsVim25, "OvfNetworkInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfCreateImportSpecParams,
    :schema_type => XSD::QName.new(NsVim25, "OvfCreateImportSpecParams"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfManagerCommonParams"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VSphereCloud::KeyValue[]", [0, nil]],
      ["entityName", "SOAP::SOAPString"],
      ["hostSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["networkMapping", "VSphereCloud::OvfNetworkMapping[]", [0, nil]],
      ["ipAllocationPolicy", "SOAP::SOAPString", [0, 1]],
      ["ipProtocol", "SOAP::SOAPString", [0, 1]],
      ["propertyMapping", "VSphereCloud::KeyValue[]", [0, nil]],
      ["resourceMapping", "VSphereCloud::OvfResourceMap[]", [0, nil]],
      ["diskProvisioning", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfResourceMap,
    :schema_type => XSD::QName.new(NsVim25, "OvfResourceMap"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["source", "SOAP::SOAPString"],
      ["parent", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["resourceSpec", "VSphereCloud::ResourceConfigSpec", [0, 1]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfOvfResourceMap,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOvfResourceMap"),
    :schema_element => [
      ["ovfResourceMap", ["VSphereCloud::OvfResourceMap[]", XSD::QName.new(NsVim25, "OvfResourceMap")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfNetworkMapping,
    :schema_type => XSD::QName.new(NsVim25, "OvfNetworkMapping"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["network", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfOvfNetworkMapping,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOvfNetworkMapping"),
    :schema_element => [
      ["ovfNetworkMapping", ["VSphereCloud::OvfNetworkMapping[]", XSD::QName.new(NsVim25, "OvfNetworkMapping")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfCreateImportSpecResult,
    :schema_type => XSD::QName.new(NsVim25, "OvfCreateImportSpecResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["importSpec", "VSphereCloud::ImportSpec", [0, 1]],
      ["fileItem", "VSphereCloud::OvfFileItem[]", [0, nil]],
      ["warning", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfFileItem,
    :schema_type => XSD::QName.new(NsVim25, "OvfFileItem"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceId", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"],
      ["compressionMethod", "SOAP::SOAPString", [0, 1]],
      ["chunkSize", "SOAP::SOAPLong", [0, 1]],
      ["size", "SOAP::SOAPLong", [0, 1]],
      ["cimType", "SOAP::SOAPInt"],
      ["create", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfOvfFileItem,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOvfFileItem"),
    :schema_element => [
      ["ovfFileItem", ["VSphereCloud::OvfFileItem[]", XSD::QName.new(NsVim25, "OvfFileItem")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfCreateDescriptorParams,
    :schema_type => XSD::QName.new(NsVim25, "OvfCreateDescriptorParams"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ovfFiles", "VSphereCloud::OvfFile[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["includeImageFiles", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfCreateDescriptorResult,
    :schema_type => XSD::QName.new(NsVim25, "OvfCreateDescriptorResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["warning", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["includeImageFiles", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfFile,
    :schema_type => XSD::QName.new(NsVim25, "OvfFile"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceId", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"],
      ["compressionMethod", "SOAP::SOAPString", [0, 1]],
      ["chunkSize", "SOAP::SOAPLong", [0, 1]],
      ["size", "SOAP::SOAPLong"],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["populatedSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfOvfFile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOvfFile"),
    :schema_element => [
      ["ovfFile", ["VSphereCloud::OvfFile[]", XSD::QName.new(NsVim25, "OvfFile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PasswordField,
    :schema_type => XSD::QName.new(NsVim25, "PasswordField"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerformanceDescription,
    :schema_type => XSD::QName.new(NsVim25, "PerformanceDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["counterType", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["statsType", "VSphereCloud::ElementDescription[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfProviderSummary,
    :schema_type => XSD::QName.new(NsVim25, "PerfProviderSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["currentSupported", "SOAP::SOAPBoolean"],
      ["summarySupported", "SOAP::SOAPBoolean"],
      ["refreshRate", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfCounterInfo,
    :schema_type => XSD::QName.new(NsVim25, "PerfCounterInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["nameInfo", "VSphereCloud::ElementDescription"],
      ["groupInfo", "VSphereCloud::ElementDescription"],
      ["unitInfo", "VSphereCloud::ElementDescription"],
      ["rollupType", "VSphereCloud::PerfSummaryType"],
      ["statsType", "VSphereCloud::PerfStatsType"],
      ["level", "SOAP::SOAPInt", [0, 1]],
      ["perDeviceLevel", "SOAP::SOAPInt", [0, 1]],
      ["associatedCounterId", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPerfCounterInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfCounterInfo"),
    :schema_element => [
      ["perfCounterInfo", ["VSphereCloud::PerfCounterInfo[]", XSD::QName.new(NsVim25, "PerfCounterInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfMetricId,
    :schema_type => XSD::QName.new(NsVim25, "PerfMetricId"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["counterId", "SOAP::SOAPInt"],
      ["instance", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPerfMetricId,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfMetricId"),
    :schema_element => [
      ["perfMetricId", ["VSphereCloud::PerfMetricId[]", XSD::QName.new(NsVim25, "PerfMetricId")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfQuerySpec,
    :schema_type => XSD::QName.new(NsVim25, "PerfQuerySpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["startTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]],
      ["maxSample", "SOAP::SOAPInt", [0, 1]],
      ["metricId", "VSphereCloud::PerfMetricId[]", [0, nil]],
      ["intervalId", "SOAP::SOAPInt", [0, 1]],
      ["format", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPerfQuerySpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfQuerySpec"),
    :schema_element => [
      ["perfQuerySpec", ["VSphereCloud::PerfQuerySpec[]", XSD::QName.new(NsVim25, "PerfQuerySpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfSampleInfo,
    :schema_type => XSD::QName.new(NsVim25, "PerfSampleInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["timestamp", "SOAP::SOAPDateTime"],
      ["interval", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPerfSampleInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfSampleInfo"),
    :schema_element => [
      ["perfSampleInfo", ["VSphereCloud::PerfSampleInfo[]", XSD::QName.new(NsVim25, "PerfSampleInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfMetricSeries,
    :schema_type => XSD::QName.new(NsVim25, "PerfMetricSeries"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::PerfMetricId"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPerfMetricSeries,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfMetricSeries"),
    :schema_element => [
      ["perfMetricSeries", ["VSphereCloud::PerfMetricSeries[]", XSD::QName.new(NsVim25, "PerfMetricSeries")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfMetricIntSeries,
    :schema_type => XSD::QName.new(NsVim25, "PerfMetricIntSeries"),
    :schema_basetype => XSD::QName.new(NsVim25, "PerfMetricSeries"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::PerfMetricId"],
      ["value", "SOAP::SOAPLong[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfMetricSeriesCSV,
    :schema_type => XSD::QName.new(NsVim25, "PerfMetricSeriesCSV"),
    :schema_basetype => XSD::QName.new(NsVim25, "PerfMetricSeries"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::PerfMetricId"],
      ["value", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPerfMetricSeriesCSV,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfMetricSeriesCSV"),
    :schema_element => [
      ["perfMetricSeriesCSV", ["VSphereCloud::PerfMetricSeriesCSV[]", XSD::QName.new(NsVim25, "PerfMetricSeriesCSV")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfEntityMetricBase,
    :schema_type => XSD::QName.new(NsVim25, "PerfEntityMetricBase"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPerfEntityMetricBase,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfEntityMetricBase"),
    :schema_element => [
      ["perfEntityMetricBase", ["VSphereCloud::PerfEntityMetricBase[]", XSD::QName.new(NsVim25, "PerfEntityMetricBase")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfEntityMetric,
    :schema_type => XSD::QName.new(NsVim25, "PerfEntityMetric"),
    :schema_basetype => XSD::QName.new(NsVim25, "PerfEntityMetricBase"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["sampleInfo", "VSphereCloud::PerfSampleInfo[]", [0, nil]],
      ["value", "VSphereCloud::PerfMetricSeries[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfEntityMetricCSV,
    :schema_type => XSD::QName.new(NsVim25, "PerfEntityMetricCSV"),
    :schema_basetype => XSD::QName.new(NsVim25, "PerfEntityMetricBase"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["sampleInfoCSV", "SOAP::SOAPString"],
      ["value", "VSphereCloud::PerfMetricSeriesCSV[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfCompositeMetric,
    :schema_type => XSD::QName.new(NsVim25, "PerfCompositeMetric"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::PerfEntityMetricBase", [0, 1]],
      ["childEntity", "VSphereCloud::PerfEntityMetricBase[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfInterval,
    :schema_type => XSD::QName.new(NsVim25, "PerfInterval"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["samplingPeriod", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["length", "SOAP::SOAPInt"],
      ["level", "SOAP::SOAPInt", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPerfInterval,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfInterval"),
    :schema_element => [
      ["perfInterval", ["VSphereCloud::PerfInterval[]", XSD::QName.new(NsVim25, "PerfInterval")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PosixUserSearchResult,
    :schema_type => XSD::QName.new(NsVim25, "PosixUserSearchResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "UserSearchResult"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString", [0, 1]],
      ["group", "SOAP::SOAPBoolean"],
      ["id", "SOAP::SOAPInt"],
      ["shellAccess", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PrivilegePolicyDef,
    :schema_type => XSD::QName.new(NsVim25, "PrivilegePolicyDef"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["createPrivilege", "SOAP::SOAPString"],
      ["readPrivilege", "SOAP::SOAPString"],
      ["updatePrivilege", "SOAP::SOAPString"],
      ["deletePrivilege", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourceAllocationInfo,
    :schema_type => XSD::QName.new(NsVim25, "ResourceAllocationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["reservation", "SOAP::SOAPLong", [0, 1]],
      ["expandableReservation", "SOAP::SOAPBoolean", [0, 1]],
      ["limit", "SOAP::SOAPLong", [0, 1]],
      ["shares", "VSphereCloud::SharesInfo", [0, 1]],
      ["overheadLimit", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourceAllocationOption,
    :schema_type => XSD::QName.new(NsVim25, "ResourceAllocationOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["sharesOption", "VSphereCloud::SharesOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourceConfigOption,
    :schema_type => XSD::QName.new(NsVim25, "ResourceConfigOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["cpuAllocationOption", "VSphereCloud::ResourceAllocationOption"],
      ["memoryAllocationOption", "VSphereCloud::ResourceAllocationOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourceConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ResourceConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["changeVersion", "SOAP::SOAPString", [0, 1]],
      ["lastModified", "SOAP::SOAPDateTime", [0, 1]],
      ["cpuAllocation", "VSphereCloud::ResourceAllocationInfo"],
      ["memoryAllocation", "VSphereCloud::ResourceAllocationInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfResourceConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfResourceConfigSpec"),
    :schema_element => [
      ["resourceConfigSpec", ["VSphereCloud::ResourceConfigSpec[]", XSD::QName.new(NsVim25, "ResourceConfigSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatabaseSizeParam,
    :schema_type => XSD::QName.new(NsVim25, "DatabaseSizeParam"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inventoryDesc", "VSphereCloud::InventoryDescription"],
      ["perfStatsDesc", "VSphereCloud::PerformanceStatisticsDescription", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InventoryDescription,
    :schema_type => XSD::QName.new(NsVim25, "InventoryDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["numHosts", "SOAP::SOAPInt"],
      ["numVirtualMachines", "SOAP::SOAPInt"],
      ["numResourcePools", "SOAP::SOAPInt", [0, 1]],
      ["numClusters", "SOAP::SOAPInt", [0, 1]],
      ["numCpuDev", "SOAP::SOAPInt", [0, 1]],
      ["numNetDev", "SOAP::SOAPInt", [0, 1]],
      ["numDiskDev", "SOAP::SOAPInt", [0, 1]],
      ["numvCpuDev", "SOAP::SOAPInt", [0, 1]],
      ["numvNetDev", "SOAP::SOAPInt", [0, 1]],
      ["numvDiskDev", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerformanceStatisticsDescription,
    :schema_type => XSD::QName.new(NsVim25, "PerformanceStatisticsDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["intervals", "VSphereCloud::PerfInterval[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatabaseSizeEstimate,
    :schema_type => XSD::QName.new(NsVim25, "DatabaseSizeEstimate"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["size", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourcePoolResourceUsage,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolResourceUsage"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["reservationUsed", "SOAP::SOAPLong"],
      ["reservationUsedForVm", "SOAP::SOAPLong"],
      ["unreservedForPool", "SOAP::SOAPLong"],
      ["unreservedForVm", "SOAP::SOAPLong"],
      ["overallUsage", "SOAP::SOAPLong"],
      ["maxUsage", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourcePoolRuntimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolRuntimeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["memory", "VSphereCloud::ResourcePoolResourceUsage"],
      ["cpu", "VSphereCloud::ResourcePoolResourceUsage"],
      ["overallStatus", "VSphereCloud::ManagedEntityStatus"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourcePoolQuickStats,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolQuickStats"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["overallCpuUsage", "SOAP::SOAPLong", [0, 1]],
      ["overallCpuDemand", "SOAP::SOAPLong", [0, 1]],
      ["guestMemoryUsage", "SOAP::SOAPLong", [0, 1]],
      ["hostMemoryUsage", "SOAP::SOAPLong", [0, 1]],
      ["distributedCpuEntitlement", "SOAP::SOAPLong", [0, 1]],
      ["distributedMemoryEntitlement", "SOAP::SOAPLong", [0, 1]],
      ["staticCpuEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["staticMemoryEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["privateMemory", "SOAP::SOAPLong", [0, 1]],
      ["sharedMemory", "SOAP::SOAPLong", [0, 1]],
      ["swappedMemory", "SOAP::SOAPLong", [0, 1]],
      ["balloonedMemory", "SOAP::SOAPLong", [0, 1]],
      ["overheadMemory", "SOAP::SOAPLong", [0, 1]],
      ["consumedOverheadMemory", "SOAP::SOAPLong", [0, 1]],
      ["compressedMemory", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourcePoolSummary,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["config", "VSphereCloud::ResourceConfigSpec"],
      ["runtime", "VSphereCloud::ResourcePoolRuntimeInfo"],
      ["quickStats", "VSphereCloud::ResourcePoolQuickStats", [0, 1]],
      ["configuredMemoryMB", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVMotionCompatibility,
    :schema_type => XSD::QName.new(NsVim25, "HostVMotionCompatibility"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["compatibility", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostVMotionCompatibility,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostVMotionCompatibility"),
    :schema_element => [
      ["hostVMotionCompatibility", ["VSphereCloud::HostVMotionCompatibility[]", XSD::QName.new(NsVim25, "HostVMotionCompatibility")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProductComponentInfo,
    :schema_type => XSD::QName.new(NsVim25, "ProductComponentInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["release", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfProductComponentInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProductComponentInfo"),
    :schema_element => [
      ["productComponentInfo", ["VSphereCloud::ProductComponentInfo[]", XSD::QName.new(NsVim25, "ProductComponentInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ServiceContent,
    :schema_type => XSD::QName.new(NsVim25, "ServiceContent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["rootFolder", "VSphereCloud::ManagedObjectReference"],
      ["propertyCollector", "VSphereCloud::ManagedObjectReference"],
      ["viewManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["about", "VSphereCloud::AboutInfo"],
      ["setting", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["userDirectory", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["sessionManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["authorizationManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["perfManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["scheduledTaskManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["alarmManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["eventManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["taskManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["extensionManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["customizationSpecManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["customFieldsManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["accountManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["diagnosticManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["licenseManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["searchIndex", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["fileManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["virtualDiskManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["virtualizationManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["snmpSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["vmProvisioningChecker", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["vmCompatibilityChecker", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["ovfManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["ipPoolManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["dvSwitchManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["hostProfileManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["clusterProfileManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["complianceManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["localizationManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["storageResourceManager", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SessionManagerLocalTicket,
    :schema_type => XSD::QName.new(NsVim25, "SessionManagerLocalTicket"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["userName", "SOAP::SOAPString"],
      ["passwordFilePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UserSession,
    :schema_type => XSD::QName.new(NsVim25, "UserSession"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString"],
      ["loginTime", "SOAP::SOAPDateTime"],
      ["lastActiveTime", "SOAP::SOAPDateTime"],
      ["locale", "SOAP::SOAPString"],
      ["messageLocale", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfUserSession,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfUserSession"),
    :schema_element => [
      ["userSession", ["VSphereCloud::UserSession[]", XSD::QName.new(NsVim25, "UserSession")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SharesInfo,
    :schema_type => XSD::QName.new(NsVim25, "SharesInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["shares", "SOAP::SOAPInt"],
      ["level", "VSphereCloud::SharesLevel"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SharesOption,
    :schema_type => XSD::QName.new(NsVim25, "SharesOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["sharesOption", "VSphereCloud::IntOption"],
      ["defaultLevel", "VSphereCloud::SharesLevel"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StorageIOAllocationInfo,
    :schema_type => XSD::QName.new(NsVim25, "StorageIOAllocationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["limit", "SOAP::SOAPLong", [0, 1]],
      ["shares", "VSphereCloud::SharesInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StorageIOAllocationOption,
    :schema_type => XSD::QName.new(NsVim25, "StorageIOAllocationOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["limitOption", "VSphereCloud::LongOption"],
      ["sharesOption", "VSphereCloud::SharesOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StorageIORMInfo,
    :schema_type => XSD::QName.new(NsVim25, "StorageIORMInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["congestionThreshold", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StorageIORMConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "StorageIORMConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["congestionThreshold", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StorageIORMConfigOption,
    :schema_type => XSD::QName.new(NsVim25, "StorageIORMConfigOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabledOption", "VSphereCloud::BoolOption"],
      ["congestionThresholdOption", "VSphereCloud::IntOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StringPolicy,
    :schema_type => XSD::QName.new(NsVim25, "StringPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::Tag,
    :schema_type => XSD::QName.new(NsVim25, "Tag"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfTag,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfTag"),
    :schema_element => [
      ["tag", ["VSphereCloud::Tag[]", XSD::QName.new(NsVim25, "Tag")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskDescription,
    :schema_type => XSD::QName.new(NsVim25, "TaskDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["methodInfo", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["state", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["reason", "VSphereCloud::TypeDescription[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskFilterSpecByEntity,
    :schema_type => XSD::QName.new(NsVim25, "TaskFilterSpecByEntity"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["recursion", "VSphereCloud::TaskFilterSpecRecursionOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskFilterSpecByTime,
    :schema_type => XSD::QName.new(NsVim25, "TaskFilterSpecByTime"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["timeType", "VSphereCloud::TaskFilterSpecTimeOption"],
      ["beginTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskFilterSpecByUsername,
    :schema_type => XSD::QName.new(NsVim25, "TaskFilterSpecByUsername"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["systemUser", "SOAP::SOAPBoolean"],
      ["userList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskFilterSpec,
    :schema_type => XSD::QName.new(NsVim25, "TaskFilterSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::TaskFilterSpecByEntity", [0, 1]],
      ["time", "VSphereCloud::TaskFilterSpecByTime", [0, 1]],
      ["userName", "VSphereCloud::TaskFilterSpecByUsername", [0, 1]],
      ["state", "VSphereCloud::TaskInfoState[]", [0, nil]],
      ["alarm", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["scheduledTask", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["eventChainId", "SOAP::SOAPInt[]", [0, nil]],
      ["tag", "SOAP::SOAPString[]", [0, nil]],
      ["parentTaskKey", "SOAP::SOAPString[]", [0, nil]],
      ["rootTaskKey", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfTaskInfoState,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfTaskInfoState"),
    :schema_element => [
      ["taskInfoState", ["VSphereCloud::TaskInfoState[]", XSD::QName.new(NsVim25, "TaskInfoState")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskInfo,
    :schema_type => XSD::QName.new(NsVim25, "TaskInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["task", "VSphereCloud::ManagedObjectReference"],
      ["description", "VSphereCloud::LocalizableMessage", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["descriptionId", "SOAP::SOAPString"],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["locked", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["state", "VSphereCloud::TaskInfoState"],
      ["cancelled", "SOAP::SOAPBoolean"],
      ["cancelable", "SOAP::SOAPBoolean"],
      ["error", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["result", nil, [0, 1]],
      ["progress", "SOAP::SOAPInt", [0, 1]],
      ["reason", "VSphereCloud::TaskReason"],
      ["queueTime", "SOAP::SOAPDateTime"],
      ["startTime", "SOAP::SOAPDateTime", [0, 1]],
      ["completeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["eventChainId", "SOAP::SOAPInt"],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parentTaskKey", "SOAP::SOAPString", [0, 1]],
      ["rootTaskKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfTaskInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfTaskInfo"),
    :schema_element => [
      ["taskInfo", ["VSphereCloud::TaskInfo[]", XSD::QName.new(NsVim25, "TaskInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskReason,
    :schema_type => XSD::QName.new(NsVim25, "TaskReason"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskReasonSystem,
    :schema_type => XSD::QName.new(NsVim25, "TaskReasonSystem"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskReason"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskReasonUser,
    :schema_type => XSD::QName.new(NsVim25, "TaskReasonUser"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskReason"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskReasonAlarm,
    :schema_type => XSD::QName.new(NsVim25, "TaskReasonAlarm"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskReason"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["alarmName", "SOAP::SOAPString"],
      ["alarm", "VSphereCloud::ManagedObjectReference"],
      ["entityName", "SOAP::SOAPString"],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskReasonSchedule,
    :schema_type => XSD::QName.new(NsVim25, "TaskReasonSchedule"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskReason"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["scheduledTask", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TypeDescription,
    :schema_type => XSD::QName.new(NsVim25, "TypeDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "Description"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfTypeDescription,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfTypeDescription"),
    :schema_element => [
      ["typeDescription", ["VSphereCloud::TypeDescription[]", XSD::QName.new(NsVim25, "TypeDescription")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateVirtualMachineFilesResultFailedVmFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "UpdateVirtualMachineFilesResultFailedVmFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmFile", "SOAP::SOAPString"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo"),
    :schema_element => [
      ["updateVirtualMachineFilesResultFailedVmFileInfo", ["VSphereCloud::UpdateVirtualMachineFilesResultFailedVmFileInfo[]", XSD::QName.new(NsVim25, "UpdateVirtualMachineFilesResultFailedVmFileInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdateVirtualMachineFilesResult,
    :schema_type => XSD::QName.new(NsVim25, "UpdateVirtualMachineFilesResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["failedVmFile", "VSphereCloud::UpdateVirtualMachineFilesResultFailedVmFileInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UserSearchResult,
    :schema_type => XSD::QName.new(NsVim25, "UserSearchResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString", [0, 1]],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfUserSearchResult,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfUserSearchResult"),
    :schema_element => [
      ["userSearchResult", ["VSphereCloud::UserSearchResult[]", XSD::QName.new(NsVim25, "UserSearchResult")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualAppSummary,
    :schema_type => XSD::QName.new(NsVim25, "VirtualAppSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "ResourcePoolSummary"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["config", "VSphereCloud::ResourceConfigSpec"],
      ["runtime", "VSphereCloud::ResourcePoolRuntimeInfo"],
      ["quickStats", "VSphereCloud::ResourcePoolQuickStats", [0, 1]],
      ["configuredMemoryMB", "SOAP::SOAPInt", [0, 1]],
      ["product", "VSphereCloud::VAppProductInfo", [0, 1]],
      ["vAppState", "VSphereCloud::VirtualAppVAppState", [0, 1]],
      ["suspended", "SOAP::SOAPBoolean", [0, 1]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualAppLinkInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualAppLinkInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["destroyWithParent", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualAppLinkInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualAppLinkInfo"),
    :schema_element => [
      ["virtualAppLinkInfo", ["VSphereCloud::VirtualAppLinkInfo[]", XSD::QName.new(NsVim25, "VirtualAppLinkInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString"],
      ["adapterType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FileBackedVirtualDiskSpec,
    :schema_type => XSD::QName.new(NsVim25, "FileBackedVirtualDiskSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDiskSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString"],
      ["adapterType", "SOAP::SOAPString"],
      ["capacityKb", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DeviceBackedVirtualDiskSpec,
    :schema_type => XSD::QName.new(NsVim25, "DeviceBackedVirtualDiskSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDiskSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString"],
      ["adapterType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineTicket,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineTicket"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ticket", "SOAP::SOAPString"],
      ["cfgFile", "SOAP::SOAPString"],
      ["host", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineMksTicket,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineMksTicket"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ticket", "SOAP::SOAPString"],
      ["cfgFile", "SOAP::SOAPString"],
      ["host", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineDisplayTopology,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDisplayTopology"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["x", "SOAP::SOAPInt"],
      ["y", "SOAP::SOAPInt"],
      ["width", "SOAP::SOAPInt"],
      ["height", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineDisplayTopology,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineDisplayTopology"),
    :schema_element => [
      ["virtualMachineDisplayTopology", ["VSphereCloud::VirtualMachineDisplayTopology[]", XSD::QName.new(NsVim25, "VirtualMachineDisplayTopology")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DiskChangeExtent,
    :schema_type => XSD::QName.new(NsVim25, "DiskChangeExtent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["start", "SOAP::SOAPLong"],
      ["length", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDiskChangeExtent,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDiskChangeExtent"),
    :schema_element => [
      ["diskChangeExtent", ["VSphereCloud::DiskChangeExtent[]", XSD::QName.new(NsVim25, "DiskChangeExtent")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DiskChangeInfo,
    :schema_type => XSD::QName.new(NsVim25, "DiskChangeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["startOffset", "SOAP::SOAPLong"],
      ["length", "SOAP::SOAPLong"],
      ["changedArea", "VSphereCloud::DiskChangeExtent[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::Action,
    :schema_type => XSD::QName.new(NsVim25, "Action"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MethodActionArgument,
    :schema_type => XSD::QName.new(NsVim25, "MethodActionArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["value", nil, [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfMethodActionArgument,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfMethodActionArgument"),
    :schema_element => [
      ["methodActionArgument", ["VSphereCloud::MethodActionArgument[]", XSD::QName.new(NsVim25, "MethodActionArgument")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MethodAction,
    :schema_type => XSD::QName.new(NsVim25, "MethodAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "Action"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["argument", "VSphereCloud::MethodActionArgument[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SendEmailAction,
    :schema_type => XSD::QName.new(NsVim25, "SendEmailAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "Action"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["toList", "SOAP::SOAPString"],
      ["ccList", "SOAP::SOAPString"],
      ["subject", "SOAP::SOAPString"],
      ["body", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SendSNMPAction,
    :schema_type => XSD::QName.new(NsVim25, "SendSNMPAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "Action"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RunScriptAction,
    :schema_type => XSD::QName.new(NsVim25, "RunScriptAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "Action"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["script", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CreateTaskAction,
    :schema_type => XSD::QName.new(NsVim25, "CreateTaskAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "Action"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["taskTypeId", "SOAP::SOAPString"],
      ["cancelable", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmAction,
    :schema_type => XSD::QName.new(NsVim25, "AlarmAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfAlarmAction,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAlarmAction"),
    :schema_element => [
      ["alarmAction", ["VSphereCloud::AlarmAction[]", XSD::QName.new(NsVim25, "AlarmAction")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmTriggeringActionTransitionSpec,
    :schema_type => XSD::QName.new(NsVim25, "AlarmTriggeringActionTransitionSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["startState", "VSphereCloud::ManagedEntityStatus"],
      ["finalState", "VSphereCloud::ManagedEntityStatus"],
      ["repeats", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfAlarmTriggeringActionTransitionSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAlarmTriggeringActionTransitionSpec"),
    :schema_element => [
      ["alarmTriggeringActionTransitionSpec", ["VSphereCloud::AlarmTriggeringActionTransitionSpec[]", XSD::QName.new(NsVim25, "AlarmTriggeringActionTransitionSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmTriggeringAction,
    :schema_type => XSD::QName.new(NsVim25, "AlarmTriggeringAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmAction"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["action", "VSphereCloud::Action"],
      ["transitionSpecs", "VSphereCloud::AlarmTriggeringActionTransitionSpec[]", [0, nil]],
      ["green2yellow", "SOAP::SOAPBoolean"],
      ["yellow2red", "SOAP::SOAPBoolean"],
      ["red2yellow", "SOAP::SOAPBoolean"],
      ["yellow2green", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GroupAlarmAction,
    :schema_type => XSD::QName.new(NsVim25, "GroupAlarmAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmAction"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["action", "VSphereCloud::AlarmAction[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmDescription,
    :schema_type => XSD::QName.new(NsVim25, "AlarmDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["expr", "VSphereCloud::TypeDescription[]", [1, nil]],
      ["stateOperator", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["metricOperator", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["hostSystemConnectionState", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["virtualMachinePowerState", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["datastoreConnectionState", "VSphereCloud::ElementDescription[]", [0, nil]],
      ["hostSystemPowerState", "VSphereCloud::ElementDescription[]", [0, nil]],
      ["virtualMachineGuestHeartbeatStatus", "VSphereCloud::ElementDescription[]", [0, nil]],
      ["entityStatus", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["action", "VSphereCloud::TypeDescription[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmExpression,
    :schema_type => XSD::QName.new(NsVim25, "AlarmExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfAlarmExpression,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAlarmExpression"),
    :schema_element => [
      ["alarmExpression", ["VSphereCloud::AlarmExpression[]", XSD::QName.new(NsVim25, "AlarmExpression")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AndAlarmExpression,
    :schema_type => XSD::QName.new(NsVim25, "AndAlarmExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmExpression"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["expression", "VSphereCloud::AlarmExpression[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OrAlarmExpression,
    :schema_type => XSD::QName.new(NsVim25, "OrAlarmExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmExpression"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["expression", "VSphereCloud::AlarmExpression[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StateAlarmExpression,
    :schema_type => XSD::QName.new(NsVim25, "StateAlarmExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmExpression"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operator", "VSphereCloud::StateAlarmOperator"],
      ["type", "SOAP::SOAPString"],
      ["statePath", "SOAP::SOAPString"],
      ["yellow", "SOAP::SOAPString", [0, 1]],
      ["red", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EventAlarmExpressionComparison,
    :schema_type => XSD::QName.new(NsVim25, "EventAlarmExpressionComparison"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["attributeName", "SOAP::SOAPString"],
      ["operator", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfEventAlarmExpressionComparison,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfEventAlarmExpressionComparison"),
    :schema_element => [
      ["eventAlarmExpressionComparison", ["VSphereCloud::EventAlarmExpressionComparison[]", XSD::QName.new(NsVim25, "EventAlarmExpressionComparison")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EventAlarmExpression,
    :schema_type => XSD::QName.new(NsVim25, "EventAlarmExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmExpression"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["comparisons", "VSphereCloud::EventAlarmExpressionComparison[]", [0, nil]],
      ["eventType", "SOAP::SOAPString"],
      ["eventTypeId", "SOAP::SOAPString", [0, 1]],
      ["objectType", "SOAP::SOAPString", [0, 1]],
      ["status", "VSphereCloud::ManagedEntityStatus", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MetricAlarmExpression,
    :schema_type => XSD::QName.new(NsVim25, "MetricAlarmExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmExpression"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operator", "VSphereCloud::MetricAlarmOperator"],
      ["type", "SOAP::SOAPString"],
      ["metric", "VSphereCloud::PerfMetricId"],
      ["yellow", "SOAP::SOAPInt", [0, 1]],
      ["yellowInterval", "SOAP::SOAPInt", [0, 1]],
      ["red", "SOAP::SOAPInt", [0, 1]],
      ["redInterval", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmInfo,
    :schema_type => XSD::QName.new(NsVim25, "AlarmInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["expression", "VSphereCloud::AlarmExpression"],
      ["action", "VSphereCloud::AlarmAction", [0, 1]],
      ["actionFrequency", "SOAP::SOAPInt", [0, 1]],
      ["setting", "VSphereCloud::AlarmSetting", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["alarm", "VSphereCloud::ManagedObjectReference"],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["lastModifiedTime", "SOAP::SOAPDateTime"],
      ["lastModifiedUser", "SOAP::SOAPString"],
      ["creationEventId", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmSetting,
    :schema_type => XSD::QName.new(NsVim25, "AlarmSetting"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["toleranceRange", "SOAP::SOAPInt"],
      ["reportingFrequency", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmSpec,
    :schema_type => XSD::QName.new(NsVim25, "AlarmSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["expression", "VSphereCloud::AlarmExpression"],
      ["action", "VSphereCloud::AlarmAction", [0, 1]],
      ["actionFrequency", "SOAP::SOAPInt", [0, 1]],
      ["setting", "VSphereCloud::AlarmSetting", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmState,
    :schema_type => XSD::QName.new(NsVim25, "AlarmState"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["alarm", "VSphereCloud::ManagedObjectReference"],
      ["overallStatus", "VSphereCloud::ManagedEntityStatus"],
      ["time", "SOAP::SOAPDateTime"],
      ["acknowledged", "SOAP::SOAPBoolean", [0, 1]],
      ["acknowledgedByUser", "SOAP::SOAPString", [0, 1]],
      ["acknowledgedTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfAlarmState,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAlarmState"),
    :schema_element => [
      ["alarmState", ["VSphereCloud::AlarmState[]", XSD::QName.new(NsVim25, "AlarmState")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterAction,
    :schema_type => XSD::QName.new(NsVim25, "ClusterAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterAction,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterAction"),
    :schema_element => [
      ["clusterAction", ["VSphereCloud::ClusterAction[]", XSD::QName.new(NsVim25, "ClusterAction")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterActionHistory,
    :schema_type => XSD::QName.new(NsVim25, "ClusterActionHistory"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["action", "VSphereCloud::ClusterAction"],
      ["time", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterActionHistory,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterActionHistory"),
    :schema_element => [
      ["clusterActionHistory", ["VSphereCloud::ClusterActionHistory[]", XSD::QName.new(NsVim25, "ClusterActionHistory")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterAffinityRuleSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterAffinityRuleSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterRuleInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "VSphereCloud::ManagedEntityStatus", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterAntiAffinityRuleSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterAntiAffinityRuleSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterRuleInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "VSphereCloud::ManagedEntityStatus", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterAttemptedVmInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterAttemptedVmInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["task", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterAttemptedVmInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterAttemptedVmInfo"),
    :schema_element => [
      ["clusterAttemptedVmInfo", ["VSphereCloud::ClusterAttemptedVmInfo[]", XSD::QName.new(NsVim25, "ClusterAttemptedVmInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dasConfig", "VSphereCloud::ClusterDasConfigInfo"],
      ["dasVmConfig", "VSphereCloud::ClusterDasVmConfigInfo[]", [0, nil]],
      ["drsConfig", "VSphereCloud::ClusterDrsConfigInfo"],
      ["drsVmConfig", "VSphereCloud::ClusterDrsVmConfigInfo[]", [0, nil]],
      ["rule", "VSphereCloud::ClusterRuleInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDrsConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDrsConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["enableVmBehaviorOverrides", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultVmBehavior", "VSphereCloud::DrsBehavior", [0, 1]],
      ["vmotionRate", "SOAP::SOAPInt", [0, 1]],
      ["option", "VSphereCloud::OptionValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDrsVmConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDrsVmConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["behavior", "VSphereCloud::DrsBehavior", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDrsVmConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDrsVmConfigInfo"),
    :schema_element => [
      ["clusterDrsVmConfigInfo", ["VSphereCloud::ClusterDrsVmConfigInfo[]", XSD::QName.new(NsVim25, "ClusterDrsVmConfigInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterConfigInfoEx,
    :schema_type => XSD::QName.new(NsVim25, "ClusterConfigInfoEx"),
    :schema_basetype => XSD::QName.new(NsVim25, "ComputeResourceConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString"],
      ["dasConfig", "VSphereCloud::ClusterDasConfigInfo"],
      ["dasVmConfig", "VSphereCloud::ClusterDasVmConfigInfo[]", [0, nil]],
      ["drsConfig", "VSphereCloud::ClusterDrsConfigInfo"],
      ["drsVmConfig", "VSphereCloud::ClusterDrsVmConfigInfo[]", [0, nil]],
      ["rule", "VSphereCloud::ClusterRuleInfo[]", [0, nil]],
      ["dpmConfigInfo", "VSphereCloud::ClusterDpmConfigInfo", [0, 1]],
      ["dpmHostConfig", "VSphereCloud::ClusterDpmHostConfigInfo[]", [0, nil]],
      ["group", "VSphereCloud::ClusterGroupInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDpmConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDpmConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultDpmBehavior", "VSphereCloud::DpmBehavior", [0, 1]],
      ["hostPowerActionRate", "SOAP::SOAPInt", [0, 1]],
      ["option", "VSphereCloud::OptionValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDpmHostConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDpmHostConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["behavior", "VSphereCloud::DpmBehavior", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDpmHostConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDpmHostConfigInfo"),
    :schema_element => [
      ["clusterDpmHostConfigInfo", ["VSphereCloud::ClusterDpmHostConfigInfo[]", XSD::QName.new(NsVim25, "ClusterDpmHostConfigInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dasConfig", "VSphereCloud::ClusterDasConfigInfo", [0, 1]],
      ["dasVmConfigSpec", "VSphereCloud::ClusterDasVmConfigSpec[]", [0, nil]],
      ["drsConfig", "VSphereCloud::ClusterDrsConfigInfo", [0, 1]],
      ["drsVmConfigSpec", "VSphereCloud::ClusterDrsVmConfigSpec[]", [0, nil]],
      ["rulesSpec", "VSphereCloud::ClusterRuleSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasVmConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasVmConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::ClusterDasVmConfigInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDasVmConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDasVmConfigSpec"),
    :schema_element => [
      ["clusterDasVmConfigSpec", ["VSphereCloud::ClusterDasVmConfigSpec[]", XSD::QName.new(NsVim25, "ClusterDasVmConfigSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDrsVmConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDrsVmConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::ClusterDrsVmConfigInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDrsVmConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDrsVmConfigSpec"),
    :schema_element => [
      ["clusterDrsVmConfigSpec", ["VSphereCloud::ClusterDrsVmConfigSpec[]", XSD::QName.new(NsVim25, "ClusterDrsVmConfigSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterRuleSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterRuleSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::ClusterRuleInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterRuleSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterRuleSpec"),
    :schema_element => [
      ["clusterRuleSpec", ["VSphereCloud::ClusterRuleSpec[]", XSD::QName.new(NsVim25, "ClusterRuleSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterConfigSpecEx,
    :schema_type => XSD::QName.new(NsVim25, "ClusterConfigSpecEx"),
    :schema_basetype => XSD::QName.new(NsVim25, "ComputeResourceConfigSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString", [0, 1]],
      ["dasConfig", "VSphereCloud::ClusterDasConfigInfo", [0, 1]],
      ["dasVmConfigSpec", "VSphereCloud::ClusterDasVmConfigSpec[]", [0, nil]],
      ["drsConfig", "VSphereCloud::ClusterDrsConfigInfo", [0, 1]],
      ["drsVmConfigSpec", "VSphereCloud::ClusterDrsVmConfigSpec[]", [0, nil]],
      ["rulesSpec", "VSphereCloud::ClusterRuleSpec[]", [0, nil]],
      ["dpmConfig", "VSphereCloud::ClusterDpmConfigInfo", [0, 1]],
      ["dpmHostConfigSpec", "VSphereCloud::ClusterDpmHostConfigSpec[]", [0, nil]],
      ["groupSpec", "VSphereCloud::ClusterGroupSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDpmHostConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDpmHostConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::ClusterDpmHostConfigInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDpmHostConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDpmHostConfigSpec"),
    :schema_element => [
      ["clusterDpmHostConfigSpec", ["VSphereCloud::ClusterDpmHostConfigSpec[]", XSD::QName.new(NsVim25, "ClusterDpmHostConfigSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterGroupSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterGroupSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::ClusterGroupInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterGroupSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterGroupSpec"),
    :schema_element => [
      ["clusterGroupSpec", ["VSphereCloud::ClusterGroupSpec[]", XSD::QName.new(NsVim25, "ClusterGroupSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasAamHostInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasAamHostInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasHostInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["hostDasState", "VSphereCloud::ClusterDasAamNodeState[]", [0, nil]],
      ["primaryHosts", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasAamNodeState,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasAamNodeState"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"],
      ["configState", "SOAP::SOAPString"],
      ["runtimeState", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDasAamNodeState,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDasAamNodeState"),
    :schema_element => [
      ["clusterDasAamNodeState", ["VSphereCloud::ClusterDasAamNodeState[]", XSD::QName.new(NsVim25, "ClusterDasAamNodeState")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasAdmissionControlInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasAdmissionControlPolicy,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasAdvancedRuntimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasAdvancedRuntimeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dasHostInfo", "VSphereCloud::ClusterDasHostInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["vmMonitoring", "SOAP::SOAPString", [0, 1]],
      ["hostMonitoring", "SOAP::SOAPString", [0, 1]],
      ["failoverLevel", "SOAP::SOAPInt", [0, 1]],
      ["admissionControlPolicy", "VSphereCloud::ClusterDasAdmissionControlPolicy", [0, 1]],
      ["admissionControlEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultVmSettings", "VSphereCloud::ClusterDasVmSettings", [0, 1]],
      ["option", "VSphereCloud::OptionValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["numVcpus", "SOAP::SOAPInt"],
      ["cpuMHz", "SOAP::SOAPInt"],
      ["memoryMB", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["slots", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots"),
    :schema_element => [
      ["clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots", ["VSphereCloud::ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots[]", XSD::QName.new(NsVim25, "ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasFailoverLevelAdvancedRuntimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasFailoverLevelAdvancedRuntimeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasAdvancedRuntimeInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dasHostInfo", "VSphereCloud::ClusterDasHostInfo", [0, 1]],
      ["slotInfo", "VSphereCloud::ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo"],
      ["totalSlots", "SOAP::SOAPInt"],
      ["usedSlots", "SOAP::SOAPInt"],
      ["unreservedSlots", "SOAP::SOAPInt"],
      ["totalVms", "SOAP::SOAPInt"],
      ["totalHosts", "SOAP::SOAPInt"],
      ["totalGoodHosts", "SOAP::SOAPInt"],
      ["hostSlots", "VSphereCloud::ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasHostInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasHostInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasHostRecommendation,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasHostRecommendation"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["drsRating", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasVmConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasVmConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["restartPriority", "VSphereCloud::DasVmPriority", [0, 1]],
      ["powerOffOnIsolation", "SOAP::SOAPBoolean", [0, 1]],
      ["dasSettings", "VSphereCloud::ClusterDasVmSettings", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDasVmConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDasVmConfigInfo"),
    :schema_element => [
      ["clusterDasVmConfigInfo", ["VSphereCloud::ClusterDasVmConfigInfo[]", XSD::QName.new(NsVim25, "ClusterDasVmConfigInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasVmSettings,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasVmSettings"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["restartPriority", "SOAP::SOAPString", [0, 1]],
      ["isolationResponse", "SOAP::SOAPString", [0, 1]],
      ["vmToolsMonitoringSettings", "VSphereCloud::ClusterVmToolsMonitoringSettings", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDrsFaultsFaultsByVm,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDrsFaultsFaultsByVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["fault", "VSphereCloud::LocalizedMethodFault[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDrsFaultsFaultsByVm,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDrsFaultsFaultsByVm"),
    :schema_element => [
      ["clusterDrsFaultsFaultsByVm", ["VSphereCloud::ClusterDrsFaultsFaultsByVm[]", XSD::QName.new(NsVim25, "ClusterDrsFaultsFaultsByVm")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDrsFaults,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDrsFaults"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["reason", "SOAP::SOAPString"],
      ["faultsByVm", "VSphereCloud::ClusterDrsFaultsFaultsByVm[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDrsFaults,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDrsFaults"),
    :schema_element => [
      ["clusterDrsFaults", ["VSphereCloud::ClusterDrsFaults[]", XSD::QName.new(NsVim25, "ClusterDrsFaults")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDrsMigration,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDrsMigration"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["time", "SOAP::SOAPDateTime"],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["cpuLoad", "SOAP::SOAPInt", [0, 1]],
      ["memoryLoad", "SOAP::SOAPLong", [0, 1]],
      ["source", "VSphereCloud::ManagedObjectReference"],
      ["sourceCpuLoad", "SOAP::SOAPInt", [0, 1]],
      ["sourceMemoryLoad", "SOAP::SOAPLong", [0, 1]],
      ["destination", "VSphereCloud::ManagedObjectReference"],
      ["destinationCpuLoad", "SOAP::SOAPInt", [0, 1]],
      ["destinationMemoryLoad", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDrsMigration,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDrsMigration"),
    :schema_element => [
      ["clusterDrsMigration", ["VSphereCloud::ClusterDrsMigration[]", XSD::QName.new(NsVim25, "ClusterDrsMigration")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDrsRecommendation,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDrsRecommendation"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["rating", "SOAP::SOAPInt"],
      ["reason", "SOAP::SOAPString"],
      ["reasonText", "SOAP::SOAPString"],
      ["migrationList", "VSphereCloud::ClusterDrsMigration[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDrsRecommendation,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDrsRecommendation"),
    :schema_element => [
      ["clusterDrsRecommendation", ["VSphereCloud::ClusterDrsRecommendation[]", XSD::QName.new(NsVim25, "ClusterDrsRecommendation")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterFailoverHostAdmissionControlInfoHostStatus,
    :schema_type => XSD::QName.new(NsVim25, "ClusterFailoverHostAdmissionControlInfoHostStatus"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["status", "VSphereCloud::ManagedEntityStatus"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus"),
    :schema_element => [
      ["clusterFailoverHostAdmissionControlInfoHostStatus", ["VSphereCloud::ClusterFailoverHostAdmissionControlInfoHostStatus[]", XSD::QName.new(NsVim25, "ClusterFailoverHostAdmissionControlInfoHostStatus")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterFailoverHostAdmissionControlInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterFailoverHostAdmissionControlInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["hostStatus", "VSphereCloud::ClusterFailoverHostAdmissionControlInfoHostStatus[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterFailoverHostAdmissionControlPolicy,
    :schema_type => XSD::QName.new(NsVim25, "ClusterFailoverHostAdmissionControlPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlPolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["failoverHosts", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterFailoverLevelAdmissionControlInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterFailoverLevelAdmissionControlInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["currentFailoverLevel", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterFailoverLevelAdmissionControlPolicy,
    :schema_type => XSD::QName.new(NsVim25, "ClusterFailoverLevelAdmissionControlPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlPolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["failoverLevel", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterFailoverResourcesAdmissionControlInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterFailoverResourcesAdmissionControlInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["currentCpuFailoverResourcesPercent", "SOAP::SOAPInt"],
      ["currentMemoryFailoverResourcesPercent", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterFailoverResourcesAdmissionControlPolicy,
    :schema_type => XSD::QName.new(NsVim25, "ClusterFailoverResourcesAdmissionControlPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlPolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["cpuFailoverResourcesPercent", "SOAP::SOAPInt"],
      ["memoryFailoverResourcesPercent", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterGroupInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterGroupInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterGroupInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterGroupInfo"),
    :schema_element => [
      ["clusterGroupInfo", ["VSphereCloud::ClusterGroupInfo[]", XSD::QName.new(NsVim25, "ClusterGroupInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterHostGroup,
    :schema_type => XSD::QName.new(NsVim25, "ClusterHostGroup"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterGroupInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterHostPowerAction,
    :schema_type => XSD::QName.new(NsVim25, "ClusterHostPowerAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterAction"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["operationType", "VSphereCloud::HostPowerOperationType"],
      ["powerConsumptionWatt", "SOAP::SOAPInt", [0, 1]],
      ["cpuCapacityMHz", "SOAP::SOAPInt", [0, 1]],
      ["memCapacityMB", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterHostRecommendation,
    :schema_type => XSD::QName.new(NsVim25, "ClusterHostRecommendation"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["rating", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterHostRecommendation,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterHostRecommendation"),
    :schema_element => [
      ["clusterHostRecommendation", ["VSphereCloud::ClusterHostRecommendation[]", XSD::QName.new(NsVim25, "ClusterHostRecommendation")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterInitialPlacementAction,
    :schema_type => XSD::QName.new(NsVim25, "ClusterInitialPlacementAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterAction"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["targetHost", "VSphereCloud::ManagedObjectReference"],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterMigrationAction,
    :schema_type => XSD::QName.new(NsVim25, "ClusterMigrationAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterAction"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["drsMigration", "VSphereCloud::ClusterDrsMigration", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterNotAttemptedVmInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterNotAttemptedVmInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterNotAttemptedVmInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterNotAttemptedVmInfo"),
    :schema_element => [
      ["clusterNotAttemptedVmInfo", ["VSphereCloud::ClusterNotAttemptedVmInfo[]", XSD::QName.new(NsVim25, "ClusterNotAttemptedVmInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterPowerOnVmResult,
    :schema_type => XSD::QName.new(NsVim25, "ClusterPowerOnVmResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["attempted", "VSphereCloud::ClusterAttemptedVmInfo[]", [0, nil]],
      ["notAttempted", "VSphereCloud::ClusterNotAttemptedVmInfo[]", [0, nil]],
      ["recommendations", "VSphereCloud::ClusterRecommendation[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterRecommendation,
    :schema_type => XSD::QName.new(NsVim25, "ClusterRecommendation"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["time", "SOAP::SOAPDateTime"],
      ["rating", "SOAP::SOAPInt"],
      ["reason", "SOAP::SOAPString"],
      ["reasonText", "SOAP::SOAPString"],
      ["prerequisite", "SOAP::SOAPString[]", [0, nil]],
      ["action", "VSphereCloud::ClusterAction[]", [0, nil]],
      ["target", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterRecommendation,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterRecommendation"),
    :schema_element => [
      ["clusterRecommendation", ["VSphereCloud::ClusterRecommendation[]", XSD::QName.new(NsVim25, "ClusterRecommendation")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterRuleInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterRuleInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "VSphereCloud::ManagedEntityStatus", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfClusterRuleInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterRuleInfo"),
    :schema_element => [
      ["clusterRuleInfo", ["VSphereCloud::ClusterRuleInfo[]", XSD::QName.new(NsVim25, "ClusterRuleInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterVmGroup,
    :schema_type => XSD::QName.new(NsVim25, "ClusterVmGroup"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterGroupInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterVmHostRuleInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterVmHostRuleInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterRuleInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "VSphereCloud::ManagedEntityStatus", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]],
      ["vmGroupName", "SOAP::SOAPString", [0, 1]],
      ["affineHostGroupName", "SOAP::SOAPString", [0, 1]],
      ["antiAffineHostGroupName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterVmToolsMonitoringSettings,
    :schema_type => XSD::QName.new(NsVim25, "ClusterVmToolsMonitoringSettings"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["vmMonitoring", "SOAP::SOAPString", [0, 1]],
      ["clusterSettings", "SOAP::SOAPBoolean", [0, 1]],
      ["failureInterval", "SOAP::SOAPInt", [0, 1]],
      ["minUpTime", "SOAP::SOAPInt", [0, 1]],
      ["maxFailures", "SOAP::SOAPInt", [0, 1]],
      ["maxFailureWindow", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "DVPortConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["scope", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["setting", "VSphereCloud::DVPortSetting", [0, 1]],
      ["configVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDVPortConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDVPortConfigSpec"),
    :schema_element => [
      ["dVPortConfigSpec", ["VSphereCloud::DVPortConfigSpec[]", XSD::QName.new(NsVim25, "DVPortConfigSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "DVPortConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["scope", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["setting", "VSphereCloud::DVPortSetting", [0, 1]],
      ["configVersion", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSTrafficShapingPolicy,
    :schema_type => XSD::QName.new(NsVim25, "DVSTrafficShapingPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["enabled", "VSphereCloud::BoolPolicy", [0, 1]],
      ["averageBandwidth", "VSphereCloud::LongPolicy", [0, 1]],
      ["peakBandwidth", "VSphereCloud::LongPolicy", [0, 1]],
      ["burstSize", "VSphereCloud::LongPolicy", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSVendorSpecificConfig,
    :schema_type => XSD::QName.new(NsVim25, "DVSVendorSpecificConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["keyValue", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortSetting,
    :schema_type => XSD::QName.new(NsVim25, "DVPortSetting"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["blocked", "VSphereCloud::BoolPolicy", [0, 1]],
      ["vmDirectPathGen2Allowed", "VSphereCloud::BoolPolicy", [0, 1]],
      ["inShapingPolicy", "VSphereCloud::DVSTrafficShapingPolicy", [0, 1]],
      ["outShapingPolicy", "VSphereCloud::DVSTrafficShapingPolicy", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DVSVendorSpecificConfig", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortStatus,
    :schema_type => XSD::QName.new(NsVim25, "DVPortStatus"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["linkUp", "SOAP::SOAPBoolean"],
      ["blocked", "SOAP::SOAPBoolean"],
      ["vlanIds", "VSphereCloud::NumericRange[]", [0, nil]],
      ["trunkingMode", "SOAP::SOAPBoolean", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["linkPeer", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["statusDetail", "SOAP::SOAPString", [0, 1]],
      ["vmDirectPathGen2Active", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2InactiveReasonNetwork", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonOther", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonExtended", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortState,
    :schema_type => XSD::QName.new(NsVim25, "DVPortState"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["runtimeInfo", "VSphereCloud::DVPortStatus", [0, 1]],
      ["stats", "VSphereCloud::DistributedVirtualSwitchPortStatistics"],
      ["vendorSpecificState", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualPort,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualPort"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["config", "VSphereCloud::DVPortConfigInfo"],
      ["dvsUuid", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString", [0, 1]],
      ["proxyHost", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["connectee", "VSphereCloud::DistributedVirtualSwitchPortConnectee", [0, 1]],
      ["conflict", "SOAP::SOAPBoolean"],
      ["conflictPortKey", "SOAP::SOAPString", [0, 1]],
      ["state", "VSphereCloud::DVPortState", [0, 1]],
      ["connectionCookie", "SOAP::SOAPInt", [0, 1]],
      ["lastStatusChange", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualPort,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualPort"),
    :schema_element => [
      ["distributedVirtualPort", ["VSphereCloud::DistributedVirtualPort[]", XSD::QName.new(NsVim25, "DistributedVirtualPort")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortgroupPolicy,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["blockOverrideAllowed", "SOAP::SOAPBoolean"],
      ["shapingOverrideAllowed", "SOAP::SOAPBoolean"],
      ["vendorConfigOverrideAllowed", "SOAP::SOAPBoolean"],
      ["livePortMovingAllowed", "SOAP::SOAPBoolean"],
      ["portConfigResetAtDisconnect", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortgroupConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["numPorts", "SOAP::SOAPInt", [0, 1]],
      ["portNameFormat", "SOAP::SOAPString", [0, 1]],
      ["defaultPortConfig", "VSphereCloud::DVPortSetting", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["scope", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["policy", "VSphereCloud::DVPortgroupPolicy", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDVPortgroupConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDVPortgroupConfigSpec"),
    :schema_element => [
      ["dVPortgroupConfigSpec", ["VSphereCloud::DVPortgroupConfigSpec[]", XSD::QName.new(NsVim25, "DVPortgroupConfigSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortgroupConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["distributedVirtualSwitch", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["defaultPortConfig", "VSphereCloud::DVPortSetting", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString"],
      ["policy", "VSphereCloud::DVPortgroupPolicy"],
      ["portNameFormat", "SOAP::SOAPString", [0, 1]],
      ["scope", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualPortgroupInfo,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualPortgroupInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["switchName", "SOAP::SOAPString"],
      ["switchUuid", "SOAP::SOAPString"],
      ["portgroupName", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString"],
      ["portgroupType", "SOAP::SOAPString"],
      ["uplinkPortgroup", "SOAP::SOAPBoolean"],
      ["portgroup", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualPortgroupInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualPortgroupInfo"),
    :schema_element => [
      ["distributedVirtualPortgroupInfo", ["VSphereCloud::DistributedVirtualPortgroupInfo[]", XSD::QName.new(NsVim25, "DistributedVirtualPortgroupInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchInfo,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["switchName", "SOAP::SOAPString"],
      ["switchUuid", "SOAP::SOAPString"],
      ["distributedVirtualSwitch", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchInfo"),
    :schema_element => [
      ["distributedVirtualSwitchInfo", ["VSphereCloud::DistributedVirtualSwitchInfo[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSManagerDvsConfigTarget,
    :schema_type => XSD::QName.new(NsVim25, "DVSManagerDvsConfigTarget"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["distributedVirtualPortgroup", "VSphereCloud::DistributedVirtualPortgroupInfo[]", [0, nil]],
      ["distributedVirtualSwitch", "VSphereCloud::DistributedVirtualSwitchInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchManagerCompatibilityResult,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerCompatibilityResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchManagerCompatibilityResult,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchManagerCompatibilityResult"),
    :schema_element => [
      ["distributedVirtualSwitchManagerCompatibilityResult", ["VSphereCloud::DistributedVirtualSwitchManagerCompatibilityResult[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerCompatibilityResult")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchManagerHostContainer,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostContainer"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["container", "VSphereCloud::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchManagerHostDvsFilterSpec,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostDvsFilterSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec"),
    :schema_element => [
      ["distributedVirtualSwitchManagerHostDvsFilterSpec", ["VSphereCloud::DistributedVirtualSwitchManagerHostDvsFilterSpec[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostDvsFilterSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchManagerHostArrayFilter,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostArrayFilter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostDvsFilterSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"],
      ["host", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchManagerHostContainerFilter,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostContainerFilter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostDvsFilterSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"],
      ["hostContainer", "VSphereCloud::DistributedVirtualSwitchManagerHostContainer"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchManagerHostDvsMembershipFilter,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostDvsMembershipFilter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostDvsFilterSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"],
      ["distributedVirtualSwitch", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchManagerDvsProductSpec,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerDvsProductSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["newSwitchProductSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["distributedVirtualSwitch", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostMemberConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["backing", "VSphereCloud::DistributedVirtualSwitchHostMemberBacking", [0, 1]],
      ["maxProxySwitchPorts", "SOAP::SOAPInt", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchHostMemberConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchHostMemberConfigSpec"),
    :schema_element => [
      ["distributedVirtualSwitchHostMemberConfigSpec", ["VSphereCloud::DistributedVirtualSwitchHostMemberConfigSpec[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberConfigSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostMemberPnicSpec,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberPnicSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["pnicDevice", "SOAP::SOAPString"],
      ["uplinkPortKey", "SOAP::SOAPString", [0, 1]],
      ["uplinkPortgroupKey", "SOAP::SOAPString", [0, 1]],
      ["connectionCookie", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchHostMemberPnicSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchHostMemberPnicSpec"),
    :schema_element => [
      ["distributedVirtualSwitchHostMemberPnicSpec", ["VSphereCloud::DistributedVirtualSwitchHostMemberPnicSpec[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberPnicSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostMemberBacking,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberBacking"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostMemberPnicBacking,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberPnicBacking"),
    :schema_basetype => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberBacking"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["pnicSpec", "VSphereCloud::DistributedVirtualSwitchHostMemberPnicSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostMemberConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["maxProxySwitchPorts", "SOAP::SOAPInt"],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["backing", "VSphereCloud::DistributedVirtualSwitchHostMemberBacking"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostMember,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMember"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["config", "VSphereCloud::DistributedVirtualSwitchHostMemberConfigInfo"],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["uplinkPortKey", "SOAP::SOAPString[]", [0, nil]],
      ["status", "SOAP::SOAPString"],
      ["statusDetail", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchHostMember,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchHostMember"),
    :schema_element => [
      ["distributedVirtualSwitchHostMember", ["VSphereCloud::DistributedVirtualSwitchHostMember[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMember")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostProductSpec,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostProductSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["productLineId", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchHostProductSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchHostProductSpec"),
    :schema_element => [
      ["distributedVirtualSwitchHostProductSpec", ["VSphereCloud::DistributedVirtualSwitchHostProductSpec[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostProductSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchKeyedOpaqueBlob"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["opaqueData", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob"),
    :schema_element => [
      ["distributedVirtualSwitchKeyedOpaqueBlob", ["VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchKeyedOpaqueBlob")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSNetworkResourcePoolAllocationInfo,
    :schema_type => XSD::QName.new(NsVim25, "DVSNetworkResourcePoolAllocationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["limit", "SOAP::SOAPLong", [0, 1]],
      ["shares", "VSphereCloud::SharesInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSNetworkResourcePoolConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "DVSNetworkResourcePoolConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["allocationInfo", "VSphereCloud::DVSNetworkResourcePoolAllocationInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDVSNetworkResourcePoolConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDVSNetworkResourcePoolConfigSpec"),
    :schema_element => [
      ["dVSNetworkResourcePoolConfigSpec", ["VSphereCloud::DVSNetworkResourcePoolConfigSpec[]", XSD::QName.new(NsVim25, "DVSNetworkResourcePoolConfigSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSNetworkResourcePool,
    :schema_type => XSD::QName.new(NsVim25, "DVSNetworkResourcePool"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPString"],
      ["allocationInfo", "VSphereCloud::DVSNetworkResourcePoolAllocationInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDVSNetworkResourcePool,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDVSNetworkResourcePool"),
    :schema_element => [
      ["dVSNetworkResourcePool", ["VSphereCloud::DVSNetworkResourcePool[]", XSD::QName.new(NsVim25, "DVSNetworkResourcePool")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchPortConnectee,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchPortConnectee"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["connectedEntity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["nicKey", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["addressHint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchPortConnection,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchPortConnection"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["switchUuid", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString", [0, 1]],
      ["connectionCookie", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchPortCriteria,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchPortCriteria"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["connected", "SOAP::SOAPBoolean", [0, 1]],
      ["active", "SOAP::SOAPBoolean", [0, 1]],
      ["uplinkPort", "SOAP::SOAPBoolean", [0, 1]],
      ["scope", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["portgroupKey", "SOAP::SOAPString[]", [0, nil]],
      ["inside", "SOAP::SOAPBoolean", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchPortStatistics,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchPortStatistics"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["packetsInMulticast", "SOAP::SOAPLong"],
      ["packetsOutMulticast", "SOAP::SOAPLong"],
      ["bytesInMulticast", "SOAP::SOAPLong"],
      ["bytesOutMulticast", "SOAP::SOAPLong"],
      ["packetsInUnicast", "SOAP::SOAPLong"],
      ["packetsOutUnicast", "SOAP::SOAPLong"],
      ["bytesInUnicast", "SOAP::SOAPLong"],
      ["bytesOutUnicast", "SOAP::SOAPLong"],
      ["packetsInBroadcast", "SOAP::SOAPLong"],
      ["packetsOutBroadcast", "SOAP::SOAPLong"],
      ["bytesInBroadcast", "SOAP::SOAPLong"],
      ["bytesOutBroadcast", "SOAP::SOAPLong"],
      ["packetsInDropped", "SOAP::SOAPLong"],
      ["packetsOutDropped", "SOAP::SOAPLong"],
      ["packetsInException", "SOAP::SOAPLong"],
      ["packetsOutException", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchProductSpec,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchProductSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["build", "SOAP::SOAPString", [0, 1]],
      ["forwardingClass", "SOAP::SOAPString", [0, 1]],
      ["bundleId", "SOAP::SOAPString", [0, 1]],
      ["bundleUrl", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchProductSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchProductSpec"),
    :schema_element => [
      ["distributedVirtualSwitchProductSpec", ["VSphereCloud::DistributedVirtualSwitchProductSpec[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchProductSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMwareDVSFeatureCapability,
    :schema_type => XSD::QName.new(NsVim25, "VMwareDVSFeatureCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVSFeatureCapability"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["networkResourceManagementSupported", "SOAP::SOAPBoolean"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean"],
      ["nicTeamingPolicy", "SOAP::SOAPString[]", [0, nil]],
      ["networkResourcePoolHighShareValue", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMwareDVSConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "VMwareDVSConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVSConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["numStandalonePorts", "SOAP::SOAPInt"],
      ["numPorts", "SOAP::SOAPInt"],
      ["maxPorts", "SOAP::SOAPInt"],
      ["uplinkPortPolicy", "VSphereCloud::DVSUplinkPortPolicy"],
      ["uplinkPortgroup", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VSphereCloud::DVPortSetting"],
      ["host", "VSphereCloud::DistributedVirtualSwitchHostMember[]", [0, nil]],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec"],
      ["targetInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["policy", "VSphereCloud::DVSPolicy", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPString"],
      ["contact", "VSphereCloud::DVSContactInfo"],
      ["createTime", "SOAP::SOAPDateTime"],
      ["networkResourceManagementEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["pvlanConfig", "VSphereCloud::VMwareDVSPvlanMapEntry[]", [0, nil]],
      ["maxMtu", "SOAP::SOAPInt"],
      ["linkDiscoveryProtocolConfig", "VSphereCloud::LinkDiscoveryProtocolConfig", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMwareDVSConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "VMwareDVSConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVSConfigSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["numStandalonePorts", "SOAP::SOAPInt", [0, 1]],
      ["maxPorts", "SOAP::SOAPInt", [0, 1]],
      ["uplinkPortPolicy", "VSphereCloud::DVSUplinkPortPolicy", [0, 1]],
      ["uplinkPortgroup", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VSphereCloud::DVPortSetting", [0, 1]],
      ["host", "VSphereCloud::DistributedVirtualSwitchHostMemberConfigSpec[]", [0, nil]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["policy", "VSphereCloud::DVSPolicy", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["contact", "VSphereCloud::DVSContactInfo", [0, 1]],
      ["pvlanConfigSpec", "VSphereCloud::VMwareDVSPvlanConfigSpec[]", [0, nil]],
      ["maxMtu", "SOAP::SOAPInt", [0, 1]],
      ["linkDiscoveryProtocolConfig", "VSphereCloud::LinkDiscoveryProtocolConfig", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMwareUplinkPortOrderPolicy,
    :schema_type => XSD::QName.new(NsVim25, "VMwareUplinkPortOrderPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["activeUplinkPort", "SOAP::SOAPString[]", [0, nil]],
      ["standbyUplinkPort", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSFailureCriteria,
    :schema_type => XSD::QName.new(NsVim25, "DVSFailureCriteria"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["checkSpeed", "VSphereCloud::StringPolicy", [0, 1]],
      ["speed", "VSphereCloud::IntPolicy", [0, 1]],
      ["checkDuplex", "VSphereCloud::BoolPolicy", [0, 1]],
      ["fullDuplex", "VSphereCloud::BoolPolicy", [0, 1]],
      ["checkErrorPercent", "VSphereCloud::BoolPolicy", [0, 1]],
      ["percentage", "VSphereCloud::IntPolicy", [0, 1]],
      ["checkBeacon", "VSphereCloud::BoolPolicy", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmwareUplinkPortTeamingPolicy,
    :schema_type => XSD::QName.new(NsVim25, "VmwareUplinkPortTeamingPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::StringPolicy", [0, 1]],
      ["reversePolicy", "VSphereCloud::BoolPolicy", [0, 1]],
      ["notifySwitches", "VSphereCloud::BoolPolicy", [0, 1]],
      ["rollingOrder", "VSphereCloud::BoolPolicy", [0, 1]],
      ["failureCriteria", "VSphereCloud::DVSFailureCriteria", [0, 1]],
      ["uplinkPortOrder", "VSphereCloud::VMwareUplinkPortOrderPolicy", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmwareDistributedVirtualSwitchVlanSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchVlanSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmwareDistributedVirtualSwitchPvlanSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchPvlanSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchVlanSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["pvlanId", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmwareDistributedVirtualSwitchVlanIdSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchVlanIdSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchVlanSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["vlanId", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmwareDistributedVirtualSwitchTrunkVlanSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchTrunkVlanSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchVlanSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["vlanId", "VSphereCloud::NumericRange[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVSSecurityPolicy,
    :schema_type => XSD::QName.new(NsVim25, "DVSSecurityPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["allowPromiscuous", "VSphereCloud::BoolPolicy", [0, 1]],
      ["macChanges", "VSphereCloud::BoolPolicy", [0, 1]],
      ["forgedTransmits", "VSphereCloud::BoolPolicy", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMwareDVSPortSetting,
    :schema_type => XSD::QName.new(NsVim25, "VMwareDVSPortSetting"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVPortSetting"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["blocked", "VSphereCloud::BoolPolicy", [0, 1]],
      ["vmDirectPathGen2Allowed", "VSphereCloud::BoolPolicy", [0, 1]],
      ["inShapingPolicy", "VSphereCloud::DVSTrafficShapingPolicy", [0, 1]],
      ["outShapingPolicy", "VSphereCloud::DVSTrafficShapingPolicy", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DVSVendorSpecificConfig", [0, 1]],
      ["vlan", "VSphereCloud::VmwareDistributedVirtualSwitchVlanSpec", [0, 1]],
      ["qosTag", "VSphereCloud::IntPolicy", [0, 1]],
      ["uplinkTeamingPolicy", "VSphereCloud::VmwareUplinkPortTeamingPolicy", [0, 1]],
      ["securityPolicy", "VSphereCloud::DVSSecurityPolicy", [0, 1]],
      ["txUplink", "VSphereCloud::BoolPolicy", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMwareDVSPortgroupPolicy,
    :schema_type => XSD::QName.new(NsVim25, "VMwareDVSPortgroupPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVPortgroupPolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["blockOverrideAllowed", "SOAP::SOAPBoolean"],
      ["shapingOverrideAllowed", "SOAP::SOAPBoolean"],
      ["vendorConfigOverrideAllowed", "SOAP::SOAPBoolean"],
      ["livePortMovingAllowed", "SOAP::SOAPBoolean"],
      ["portConfigResetAtDisconnect", "SOAP::SOAPBoolean"],
      ["vlanOverrideAllowed", "SOAP::SOAPBoolean"],
      ["uplinkTeamingOverrideAllowed", "SOAP::SOAPBoolean"],
      ["securityPolicyOverrideAllowed", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMwareDVSPvlanConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "VMwareDVSPvlanConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["pvlanEntry", "VSphereCloud::VMwareDVSPvlanMapEntry"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVMwareDVSPvlanConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVMwareDVSPvlanConfigSpec"),
    :schema_element => [
      ["vMwareDVSPvlanConfigSpec", ["VSphereCloud::VMwareDVSPvlanConfigSpec[]", XSD::QName.new(NsVim25, "VMwareDVSPvlanConfigSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMwareDVSPvlanMapEntry,
    :schema_type => XSD::QName.new(NsVim25, "VMwareDVSPvlanMapEntry"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["primaryVlanId", "SOAP::SOAPInt"],
      ["secondaryVlanId", "SOAP::SOAPInt"],
      ["pvlanType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVMwareDVSPvlanMapEntry,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVMwareDVSPvlanMapEntry"),
    :schema_element => [
      ["vMwareDVSPvlanMapEntry", ["VSphereCloud::VMwareDVSPvlanMapEntry[]", XSD::QName.new(NsVim25, "VMwareDVSPvlanMapEntry")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::Event,
    :schema_type => XSD::QName.new(NsVim25, "Event"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfEvent,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfEvent"),
    :schema_element => [
      ["event", ["VSphereCloud::Event[]", XSD::QName.new(NsVim25, "Event")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EventEx,
    :schema_type => XSD::QName.new(NsVim25, "EventEx"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["eventTypeId", "SOAP::SOAPString"],
      ["severity", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString", [0, 1]],
      ["arguments", "VSphereCloud::KeyAnyValue[]", [0, nil]],
      ["objectId", "SOAP::SOAPString", [0, 1]],
      ["objectType", "SOAP::SOAPString", [0, 1]],
      ["objectName", "SOAP::SOAPString", [0, 1]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GeneralEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GeneralHostInfoEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralHostInfoEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GeneralHostWarningEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralHostWarningEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GeneralHostErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralHostErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GeneralVmInfoEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralVmInfoEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GeneralVmWarningEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralVmWarningEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GeneralVmErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralVmErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GeneralUserEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralUserEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtendedEventPair,
    :schema_type => XSD::QName.new(NsVim25, "ExtendedEventPair"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfExtendedEventPair,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtendedEventPair"),
    :schema_element => [
      ["extendedEventPair", ["VSphereCloud::ExtendedEventPair[]", XSD::QName.new(NsVim25, "ExtendedEventPair")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtendedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ExtendedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"],
      ["eventTypeId", "SOAP::SOAPString"],
      ["managedObject", "VSphereCloud::ManagedObjectReference"],
      ["data", "VSphereCloud::ExtendedEventPair[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HealthStatusChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HealthStatusChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["componentId", "SOAP::SOAPString"],
      ["oldStatus", "SOAP::SOAPString"],
      ["newStatus", "SOAP::SOAPString"],
      ["componentName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInventoryUnreadableEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostInventoryUnreadableEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatacenterEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatacenterEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatacenterCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatacenterCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatacenterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::FolderEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatacenterRenamedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatacenterRenamedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatacenterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SessionEvent,
    :schema_type => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ServerStartedSessionEvent,
    :schema_type => XSD::QName.new(NsVim25, "ServerStartedSessionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UserLoginSessionEvent,
    :schema_type => XSD::QName.new(NsVim25, "UserLoginSessionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString"],
      ["sessionId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UserLogoutSessionEvent,
    :schema_type => XSD::QName.new(NsVim25, "UserLogoutSessionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::BadUsernameSessionEvent,
    :schema_type => XSD::QName.new(NsVim25, "BadUsernameSessionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlreadyAuthenticatedSessionEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlreadyAuthenticatedSessionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoAccessUserEvent,
    :schema_type => XSD::QName.new(NsVim25, "NoAccessUserEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SessionTerminatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "SessionTerminatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["sessionId", "SOAP::SOAPString"],
      ["terminatedUsername", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GlobalMessageChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "GlobalMessageChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpgradeEvent,
    :schema_type => XSD::QName.new(NsVim25, "UpgradeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InfoUpgradeEvent,
    :schema_type => XSD::QName.new(NsVim25, "InfoUpgradeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "UpgradeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::WarningUpgradeEvent,
    :schema_type => XSD::QName.new(NsVim25, "WarningUpgradeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "UpgradeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ErrorUpgradeEvent,
    :schema_type => XSD::QName.new(NsVim25, "ErrorUpgradeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "UpgradeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UserUpgradeEvent,
    :schema_type => XSD::QName.new(NsVim25, "UserUpgradeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "UpgradeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDasEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostConnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDisconnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDisconnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostSyncFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostSyncFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConnectionLostEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostConnectionLostEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostReconnectionFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostReconnectionFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCnxFailedNoConnectionEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedNoConnectionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCnxFailedBadUsernameEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedBadUsernameEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCnxFailedBadVersionEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedBadVersionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCnxFailedAlreadyManagedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedAlreadyManagedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["serverName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCnxFailedNoLicenseEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedNoLicenseEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCnxFailedNetworkErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedNetworkErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCnxFailedCcagentUpgradeEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedCcagentUpgradeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCnxFailedBadCcagentEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedBadCcagentEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCnxFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCnxFailedAccountFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedAccountFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCnxFailedNoAccessEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedNoAccessEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostShutdownEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostShutdownEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCnxFailedNotFoundEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedNotFoundEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCnxFailedTimeoutEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedTimeoutEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostUpgradeFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostUpgradeFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EnteringMaintenanceModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "EnteringMaintenanceModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EnteredMaintenanceModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "EnteredMaintenanceModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExitMaintenanceModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "ExitMaintenanceModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CanceledHostOperationEvent,
    :schema_type => XSD::QName.new(NsVim25, "CanceledHostOperationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TimedOutHostOperationEvent,
    :schema_type => XSD::QName.new(NsVim25, "TimedOutHostOperationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDasEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDasEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDasDisabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDasDisabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDasEnablingEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDasEnablingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDasDisablingEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDasDisablingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDasErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDasErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDasOkEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDasOkEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VcAgentUpgradedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VcAgentUpgradedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VcAgentUninstalledEvent,
    :schema_type => XSD::QName.new(NsVim25, "VcAgentUninstalledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VcAgentUpgradeFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VcAgentUpgradeFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VcAgentUninstallFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VcAgentUninstallFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostAddedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostAddedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostAddFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostAddFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostname", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIpChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostIpChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldIP", "SOAP::SOAPString"],
      ["newIP", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EnteringStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "EnteringStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsEnteringStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsEnteringStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "EnteringStandbyModeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EnteredStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "EnteredStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsEnteredStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsEnteredStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "EnteredStandbyModeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExitingStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "ExitingStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsExitingStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsExitingStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ExitingStandbyModeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExitedStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "ExitedStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsExitedStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsExitedStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ExitedStandbyModeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExitStandbyModeFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ExitStandbyModeFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsExitStandbyModeFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsExitStandbyModeFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ExitStandbyModeFailedEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpdatedAgentBeingRestartedEvent,
    :schema_type => XSD::QName.new(NsVim25, "UpdatedAgentBeingRestartedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AccountCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AccountCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["spec", "VSphereCloud::HostAccountSpec"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AccountRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AccountRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["account", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UserPasswordChanged,
    :schema_type => XSD::QName.new(NsVim25, "UserPasswordChanged"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["userLogin", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AccountUpdatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AccountUpdatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["spec", "VSphereCloud::HostAccountSpec"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UserAssignedToGroup,
    :schema_type => XSD::QName.new(NsVim25, "UserAssignedToGroup"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["userLogin", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UserUnassignedFromGroup,
    :schema_type => XSD::QName.new(NsVim25, "UserUnassignedFromGroup"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["userLogin", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastorePrincipalConfigured,
    :schema_type => XSD::QName.new(NsVim25, "DatastorePrincipalConfigured"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastorePrincipal", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMFSDatastoreCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VMFSDatastoreCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NASDatastoreCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "NASDatastoreCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LocalDatastoreCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "LocalDatastoreCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMFSDatastoreExtendedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VMFSDatastoreExtendedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMFSDatastoreExpandedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VMFSDatastoreExpandedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreRemovedOnHostEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreRemovedOnHostEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreRenamedOnHostEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreRenamedOnHostEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DuplicateIpDetectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DuplicateIpDetectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["duplicateIP", "SOAP::SOAPString"],
      ["macAddress", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreDiscoveredEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreDiscoveredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsResourceConfigureFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsResourceConfigureFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsResourceConfigureSyncedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsResourceConfigureSyncedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostGetShortNameFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostGetShortNameFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostShortNameToIpFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostShortNameToIpFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["shortName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIpToShortNameFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostIpToShortNameFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPrimaryAgentNotShortNameEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostPrimaryAgentNotShortNameEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["primaryAgent", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNotInClusterEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostNotInClusterEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIsolationIpPingFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostIsolationIpPingFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["isolationIp", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIpInconsistentEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostIpInconsistentEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"],
      ["ipAddress2", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostUserWorldSwapNotEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostUserWorldSwapNotEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNonCompliantEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostNonCompliantEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCompliantEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCompliantEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostComplianceCheckedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostComplianceCheckedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterComplianceCheckedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ClusterComplianceCheckedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileEvent,
    :schema_type => XSD::QName.new(NsVim25, "ProfileEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ProfileCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ProfileRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileAssociatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ProfileAssociatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileDissociatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ProfileDissociatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConfigAppliedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigAppliedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileReferenceHostChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ProfileReferenceHostChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"],
      ["referenceHost", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ProfileChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostProfileAppliedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostProfileAppliedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostShortNameInconsistentEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostShortNameInconsistentEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["shortName", "SOAP::SOAPString"],
      ["shortName2", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNoRedundantManagementNetworkEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostNoRedundantManagementNetworkEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNoAvailableNetworksEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostNoAvailableNetworksEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ips", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostExtraNetworksEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostExtraNetworksEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ips", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNoHAEnabledPortGroupsEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostNoHAEnabledPortGroupsEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostMissingNetworksEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostMissingNetworksEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ips", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VnicPortArgument,
    :schema_type => XSD::QName.new(NsVim25, "VnicPortArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vnic", "SOAP::SOAPString"],
      ["port", "VSphereCloud::DistributedVirtualSwitchPortConnection"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVnicPortArgument,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVnicPortArgument"),
    :schema_element => [
      ["vnicPortArgument", ["VSphereCloud::VnicPortArgument[]", XSD::QName.new(NsVim25, "VnicPortArgument")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVnicConnectedToCustomizedDVPortEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostVnicConnectedToCustomizedDVPortEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["vnic", "VSphereCloud::VnicPortArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GhostDvsProxySwitchDetectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "GhostDvsProxySwitchDetectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["switchUuid", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GhostDvsProxySwitchRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "GhostDvsProxySwitchRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["switchUuid", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmPoweredOffEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmPoweredOffEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmPoweredOnEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmPoweredOnEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmSuspendedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmSuspendedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmStartingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmStartingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmStoppingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmStoppingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmSuspendingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmSuspendingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmResumingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmResumingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDisconnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDisconnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmRemoteConsoleConnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRemoteConsoleConnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmRemoteConsoleDisconnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRemoteConsoleDisconnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDiscoveredEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDiscoveredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmOrphanedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmOrphanedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmBeingCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmBeingCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configSpec", "VSphereCloud::VirtualMachineConfigSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmStartRecordingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmStartRecordingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmEndRecordingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmEndRecordingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmStartReplayingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmStartReplayingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmEndReplayingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmEndReplayingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmRegisteredEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRegisteredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmAutoRenameEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmAutoRenameEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmBeingHotMigratedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmBeingHotMigratedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmResettingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmResettingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmStaticMacConflictEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmStaticMacConflictEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VSphereCloud::VmEventArgument"],
      ["mac", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmMacConflictEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmMacConflictEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VSphereCloud::VmEventArgument"],
      ["mac", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmBeingDeployedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmBeingDeployedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["srcTemplate", "VSphereCloud::VmEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDeployFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDeployFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destDatastore", "VSphereCloud::EntityEventArgument"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDeployedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDeployedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["srcTemplate", "VSphereCloud::VmEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmMacChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmMacChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["adapter", "SOAP::SOAPString"],
      ["oldMac", "SOAP::SOAPString"],
      ["newMac", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmMacAssignedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmMacAssignedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["adapter", "SOAP::SOAPString"],
      ["mac", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmUuidConflictEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmUuidConflictEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VSphereCloud::VmEventArgument"],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmInstanceUuidConflictEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmInstanceUuidConflictEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VSphereCloud::VmEventArgument"],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmBeingMigratedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmBeingMigratedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFailedMigrateEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedMigrateEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VSphereCloud::HostEventArgument"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmMigratedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmMigratedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmUnsupportedStartingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmUnsupportedStartingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmStartingEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["guestId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsVmMigratedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsVmMigratedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmMigratedEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsVmPoweredOnEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsVmPoweredOnEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmPoweredOnEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsRuleViolationEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsRuleViolationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsRuleComplianceEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsRuleComplianceEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmRelocateSpecEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRelocateSpecEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmBeingRelocatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmBeingRelocatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmRelocateSpecEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmRelocatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRelocatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmRelocateSpecEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmRelocateFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRelocateFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmRelocateSpecEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VSphereCloud::HostEventArgument"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmEmigratingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmEmigratingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmCloneEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmCloneEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmBeingClonedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmBeingClonedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmCloneEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destFolder", "VSphereCloud::FolderEventArgument"],
      ["destName", "SOAP::SOAPString"],
      ["destHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmBeingClonedNoFolderEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmBeingClonedNoFolderEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmCloneEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destName", "SOAP::SOAPString"],
      ["destHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmCloneFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmCloneFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmCloneEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destFolder", "VSphereCloud::FolderEventArgument"],
      ["destName", "SOAP::SOAPString"],
      ["destHost", "VSphereCloud::HostEventArgument"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmClonedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmClonedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmCloneEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceVm", "VSphereCloud::VmEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmResourceReallocatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmResourceReallocatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmRenamedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRenamedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDateRolledBackEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDateRolledBackEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmNoNetworkAccessEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmNoNetworkAccessEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDiskFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDiskFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["disk", "SOAP::SOAPString"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFailedToPowerOnEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedToPowerOnEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFailedToPowerOffEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedToPowerOffEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFailedToSuspendEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedToSuspendEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFailedToResetEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedToResetEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFailedToShutdownGuestEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedToShutdownGuestEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFailedToRebootGuestEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedToRebootGuestEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFailedToStandbyGuestEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedToStandbyGuestEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmGuestShutdownEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmGuestShutdownEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmGuestRebootEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmGuestRebootEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmGuestStandbyEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmGuestStandbyEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmUpgradingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmUpgradingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["version", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmUpgradeCompleteEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmUpgradeCompleteEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["version", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmUpgradeFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmUpgradeFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmRestartedOnAlternateHostEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRestartedOnAlternateHostEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmPoweredOnEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configSpec", "VSphereCloud::VirtualMachineConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmMessageEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmMessageEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["message", "SOAP::SOAPString"],
      ["messageInfo", "VSphereCloud::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmMessageWarningEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmMessageWarningEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["message", "SOAP::SOAPString"],
      ["messageInfo", "VSphereCloud::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmMessageErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmMessageErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["message", "SOAP::SOAPString"],
      ["messageInfo", "VSphereCloud::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmConfigMissingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigMissingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmPowerOffOnIsolationEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmPowerOffOnIsolationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmPoweredOffEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["isolatedHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmShutdownOnIsolationEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmShutdownOnIsolationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmPoweredOffEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["isolatedHost", "VSphereCloud::HostEventArgument"],
      ["shutdownResult", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFailoverFailed,
    :schema_type => XSD::QName.new(NsVim25, "VmFailoverFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDasBeingResetEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDasBeingResetEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDasResetFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDasResetFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmMaxRestartCountReached,
    :schema_type => XSD::QName.new(NsVim25, "VmMaxRestartCountReached"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmMaxFTRestartCountReached,
    :schema_type => XSD::QName.new(NsVim25, "VmMaxFTRestartCountReached"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDasBeingResetWithScreenshotEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDasBeingResetWithScreenshotEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmDasBeingResetEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["screenshotFilePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NotEnoughResourcesToStartVmEvent,
    :schema_type => XSD::QName.new(NsVim25, "NotEnoughResourcesToStartVmEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmUuidAssignedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmUuidAssignedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmInstanceUuidAssignedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmInstanceUuidAssignedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmUuidChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmUuidChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldUuid", "SOAP::SOAPString"],
      ["newUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmInstanceUuidChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmInstanceUuidChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldInstanceUuid", "SOAP::SOAPString"],
      ["newInstanceUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmWwnConflictEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmWwnConflictEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVms", "VSphereCloud::VmEventArgument[]", [0, nil]],
      ["conflictedHosts", "VSphereCloud::HostEventArgument[]", [0, nil]],
      ["wwn", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmAcquiredMksTicketEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmAcquiredMksTicketEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmAcquiredTicketEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmAcquiredTicketEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["ticketType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostWwnConflictEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostWwnConflictEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["conflictedVms", "VSphereCloud::VmEventArgument[]", [0, nil]],
      ["conflictedHosts", "VSphereCloud::HostEventArgument[]", [0, nil]],
      ["wwn", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmWwnAssignedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmWwnAssignedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["nodeWwns", "SOAP::SOAPLong[]", [1, nil]],
      ["portWwns", "SOAP::SOAPLong[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmWwnChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmWwnChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["oldPortWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newPortWwns", "SOAP::SOAPLong[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmSecondaryAddedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmSecondaryAddedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFaultToleranceTurnedOffEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceTurnedOffEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFaultToleranceStateChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceStateChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldState", "VSphereCloud::VirtualMachineFaultToleranceState"],
      ["newState", "VSphereCloud::VirtualMachineFaultToleranceState"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmSecondaryDisabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmSecondaryDisabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmSecondaryDisabledBySystemEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmSecondaryDisabledBySystemEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmSecondaryEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmSecondaryEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmStartingSecondaryEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmStartingSecondaryEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmSecondaryStartedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmSecondaryStartedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFailedUpdatingSecondaryConfig,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedUpdatingSecondaryConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFailedStartingSecondaryEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedStartingSecondaryEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmTimedoutStartingSecondaryEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmTimedoutStartingSecondaryEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["timeout", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmNoCompatibleHostForSecondaryEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmNoCompatibleHostForSecondaryEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmPrimaryFailoverEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmPrimaryFailoverEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFaultToleranceVmTerminatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceVmTerminatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostWwnChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostWwnChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["oldPortWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newPortWwns", "SOAP::SOAPLong[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostAdminDisableEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostAdminDisableEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostAdminEnableEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostAdminEnableEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostEnableAdminFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostEnableAdminFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["permissions", "VSphereCloud::Permission[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFailedRelayoutOnVmfs2DatastoreEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedRelayoutOnVmfs2DatastoreEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFailedRelayoutEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedRelayoutEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmRelayoutSuccessfulEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRelayoutSuccessfulEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmRelayoutUpToDateEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRelayoutUpToDateEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmConnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmConnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmPoweringOnWithCustomizedDVPortEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmPoweringOnWithCustomizedDVPortEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["vnic", "VSphereCloud::VnicPortArgument[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDasUpdateErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDasUpdateErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoMaintenanceModeDrsRecommendationForVM,
    :schema_type => XSD::QName.new(NsVim25, "NoMaintenanceModeDrsRecommendationForVM"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDasUpdateOkEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDasUpdateOkEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScheduledTaskEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScheduledTaskCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScheduledTaskStartedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskStartedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScheduledTaskRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScheduledTaskReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScheduledTaskCompletedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskCompletedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScheduledTaskFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScheduledTaskEmailCompletedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskEmailCompletedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScheduledTaskEmailFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskEmailFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmStatusChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmStatusChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["source", "VSphereCloud::ManagedEntityEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["from", "SOAP::SOAPString"],
      ["to", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmActionTriggeredEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmActionTriggeredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["source", "VSphereCloud::ManagedEntityEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmEmailCompletedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmEmailCompletedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmEmailFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmEmailFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmSnmpCompletedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmSnmpCompletedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmSnmpFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmSnmpFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmScriptCompleteEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmScriptCompleteEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["script", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmScriptFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmScriptFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["script", "SOAP::SOAPString"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomFieldEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomFieldDefEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldDefEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomFieldEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomFieldDefAddedEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldDefAddedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomFieldDefEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomFieldDefRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldDefRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomFieldDefEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomFieldDefRenamedEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldDefRenamedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomFieldDefEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomFieldValueChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldValueChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomFieldEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AuthorizationEvent,
    :schema_type => XSD::QName.new(NsVim25, "AuthorizationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PermissionEvent,
    :schema_type => XSD::QName.new(NsVim25, "PermissionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AuthorizationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PermissionAddedEvent,
    :schema_type => XSD::QName.new(NsVim25, "PermissionAddedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "PermissionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"],
      ["role", "VSphereCloud::RoleEventArgument"],
      ["propagate", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PermissionUpdatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "PermissionUpdatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "PermissionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"],
      ["role", "VSphereCloud::RoleEventArgument"],
      ["propagate", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PermissionRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "PermissionRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "PermissionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RoleEvent,
    :schema_type => XSD::QName.new(NsVim25, "RoleEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AuthorizationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VSphereCloud::RoleEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RoleAddedEvent,
    :schema_type => XSD::QName.new(NsVim25, "RoleAddedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "RoleEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VSphereCloud::RoleEventArgument"],
      ["privilegeList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RoleUpdatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "RoleUpdatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "RoleEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VSphereCloud::RoleEventArgument"],
      ["privilegeList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RoleRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "RoleRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "RoleEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VSphereCloud::RoleEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreDestroyedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreDestroyedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreRenamedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreRenamedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreCapacityIncreasedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreCapacityIncreasedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["oldCapacity", "SOAP::SOAPLong"],
      ["newCapacity", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreDuplicatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreDuplicatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreFileEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreFileEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreFileCopiedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreFileCopiedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreFileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"],
      ["sourceDatastore", "VSphereCloud::DatastoreEventArgument"],
      ["sourceFile", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreFileMovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreFileMovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreFileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"],
      ["sourceDatastore", "VSphereCloud::DatastoreEventArgument"],
      ["sourceFile", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreFileDeletedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreFileDeletedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreFileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NonVIWorkloadDetectedOnDatastoreEvent,
    :schema_type => XSD::QName.new(NsVim25, "NonVIWorkloadDetectedOnDatastoreEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreIORMReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreIORMReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskEvent,
    :schema_type => XSD::QName.new(NsVim25, "TaskEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["info", "VSphereCloud::TaskInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskTimeoutEvent,
    :schema_type => XSD::QName.new(NsVim25, "TaskTimeoutEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["info", "VSphereCloud::TaskInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseEvent,
    :schema_type => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ServerLicenseExpiredEvent,
    :schema_type => XSD::QName.new(NsVim25, "ServerLicenseExpiredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["product", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostLicenseExpiredEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostLicenseExpiredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMotionLicenseExpiredEvent,
    :schema_type => XSD::QName.new(NsVim25, "VMotionLicenseExpiredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoLicenseEvent,
    :schema_type => XSD::QName.new(NsVim25, "NoLicenseEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["feature", "VSphereCloud::LicenseFeatureInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseServerUnavailableEvent,
    :schema_type => XSD::QName.new(NsVim25, "LicenseServerUnavailableEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseServerAvailableEvent,
    :schema_type => XSD::QName.new(NsVim25, "LicenseServerAvailableEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseExpiredEvent,
    :schema_type => XSD::QName.new(NsVim25, "LicenseExpiredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["feature", "VSphereCloud::LicenseFeatureInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidEditionEvent,
    :schema_type => XSD::QName.new(NsVim25, "InvalidEditionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["feature", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInventoryFullEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostInventoryFullEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["capacity", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseRestrictedEvent,
    :schema_type => XSD::QName.new(NsVim25, "LicenseRestrictedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IncorrectHostInformationEvent,
    :schema_type => XSD::QName.new(NsVim25, "IncorrectHostInformationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnlicensedVirtualMachinesEvent,
    :schema_type => XSD::QName.new(NsVim25, "UnlicensedVirtualMachinesEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["unlicensed", "SOAP::SOAPInt"],
      ["available", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnlicensedVirtualMachinesFoundEvent,
    :schema_type => XSD::QName.new(NsVim25, "UnlicensedVirtualMachinesFoundEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["available", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AllVirtualMachinesLicensedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AllVirtualMachinesLicensedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseNonComplianceEvent,
    :schema_type => XSD::QName.new(NsVim25, "LicenseNonComplianceEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["url", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MigrationEvent,
    :schema_type => XSD::QName.new(NsVim25, "MigrationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MigrationWarningEvent,
    :schema_type => XSD::QName.new(NsVim25, "MigrationWarningEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MigrationErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "MigrationErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MigrationHostWarningEvent,
    :schema_type => XSD::QName.new(NsVim25, "MigrationHostWarningEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"],
      ["dstHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MigrationHostErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "MigrationHostErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"],
      ["dstHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MigrationResourceWarningEvent,
    :schema_type => XSD::QName.new(NsVim25, "MigrationResourceWarningEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"],
      ["dstPool", "VSphereCloud::ResourcePoolEventArgument"],
      ["dstHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MigrationResourceErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "MigrationResourceErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"],
      ["dstPool", "VSphereCloud::ResourcePoolEventArgument"],
      ["dstHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterEvent,
    :schema_type => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DasEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DasDisabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasDisabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DasAdmissionControlDisabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasAdmissionControlDisabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DasAdmissionControlEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasAdmissionControlEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DasHostFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasHostFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["failedHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DasHostIsolatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasHostIsolatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["isolatedHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DasClusterIsolatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasClusterIsolatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DasAgentUnavailableEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasAgentUnavailableEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DasAgentFoundEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasAgentFoundEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InsufficientFailoverResourcesEvent,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientFailoverResourcesEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FailoverLevelRestored,
    :schema_type => XSD::QName.new(NsVim25, "FailoverLevelRestored"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterOvercommittedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ClusterOvercommittedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostOvercommittedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostOvercommittedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterOvercommittedEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterStatusChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ClusterStatusChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldStatus", "SOAP::SOAPString"],
      ["newStatus", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostStatusChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostStatusChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterStatusChangedEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldStatus", "SOAP::SOAPString"],
      ["newStatus", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ClusterCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::FolderEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDestroyedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDestroyedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["behavior", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsDisabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsDisabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "ClusterReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostMonitoringStateChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostMonitoringStateChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["state", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmHealthMonitoringStateChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmHealthMonitoringStateChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["state", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourcePoolEvent,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VSphereCloud::ResourcePoolEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourcePoolCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ResourcePoolEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VSphereCloud::ResourcePoolEventArgument"],
      ["parent", "VSphereCloud::ResourcePoolEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourcePoolDestroyedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolDestroyedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ResourcePoolEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VSphereCloud::ResourcePoolEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourcePoolMovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolMovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ResourcePoolEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VSphereCloud::ResourcePoolEventArgument"],
      ["oldParent", "VSphereCloud::ResourcePoolEventArgument"],
      ["newParent", "VSphereCloud::ResourcePoolEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourcePoolReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ResourcePoolEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VSphereCloud::ResourcePoolEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourceViolatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ResourceViolatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ResourcePoolEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VSphereCloud::ResourcePoolEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmResourcePoolMovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmResourcePoolMovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldParent", "VSphereCloud::ResourcePoolEventArgument"],
      ["newParent", "VSphereCloud::ResourcePoolEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TemplateUpgradeEvent,
    :schema_type => XSD::QName.new(NsVim25, "TemplateUpgradeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TemplateBeingUpgradedEvent,
    :schema_type => XSD::QName.new(NsVim25, "TemplateBeingUpgradedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "TemplateUpgradeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TemplateUpgradeFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "TemplateUpgradeFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "TemplateUpgradeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TemplateUpgradedEvent,
    :schema_type => XSD::QName.new(NsVim25, "TemplateUpgradedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "TemplateUpgradeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationStartedEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationStartedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationSucceeded,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSucceeded"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationFailed,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationUnknownFailure,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationUnknownFailure"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationSysprepFailed,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSysprepFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]],
      ["sysprepVersion", "SOAP::SOAPString"],
      ["systemVersion", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationLinuxIdentityFailed,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationLinuxIdentityFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationNetworkSetupFailed,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationNetworkSetupFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LockerMisconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "LockerMisconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LockerReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "LockerReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldDatastore", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["newDatastore", "VSphereCloud::DatastoreEventArgument", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoDatastoresConfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "NoDatastoresConfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AdminPasswordNotChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AdminPasswordNotChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LocalTSMEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "LocalTSMEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoteTSMEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "RemoteTSMEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VimAccountPasswordChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VimAccountPasswordChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IScsiBootFailureEvent,
    :schema_type => XSD::QName.new(NsVim25, "IScsiBootFailureEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::FolderEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsRenamedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsRenamedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["configSpec", "VSphereCloud::DVSConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsUpgradeAvailableEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsUpgradeAvailableEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsUpgradeInProgressEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsUpgradeInProgressEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsUpgradeRejectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsUpgradeRejectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsUpgradedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsUpgradedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsHostJoinedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsHostJoinedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostJoined", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsHostLeftEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsHostLeftEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostLeft", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsOutOfSyncHostArgument,
    :schema_type => XSD::QName.new(NsVim25, "DvsOutOfSyncHostArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["outOfSyncHost", "VSphereCloud::HostEventArgument"],
      ["configParamters", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDvsOutOfSyncHostArgument,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDvsOutOfSyncHostArgument"),
    :schema_element => [
      ["dvsOutOfSyncHostArgument", ["VSphereCloud::DvsOutOfSyncHostArgument[]", XSD::QName.new(NsVim25, "DvsOutOfSyncHostArgument")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OutOfSyncDvsHost,
    :schema_type => XSD::QName.new(NsVim25, "OutOfSyncDvsHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostOutOfSync", "VSphereCloud::DvsOutOfSyncHostArgument[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsHostWentOutOfSyncEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsHostWentOutOfSyncEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostOutOfSync", "VSphereCloud::DvsOutOfSyncHostArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsHostBackInSyncEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsHostBackInSyncEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostBackInSync", "VSphereCloud::HostEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsHostStatusUpdated,
    :schema_type => XSD::QName.new(NsVim25, "DvsHostStatusUpdated"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostMember", "VSphereCloud::HostEventArgument"],
      ["oldStatus", "SOAP::SOAPString", [0, 1]],
      ["newStatus", "SOAP::SOAPString", [0, 1]],
      ["oldStatusDetail", "SOAP::SOAPString", [0, 1]],
      ["newStatusDetail", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsPortCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsPortReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsPortDeletedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortDeletedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsPortConnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortConnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["connectee", "VSphereCloud::DistributedVirtualSwitchPortConnectee", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsPortDisconnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortDisconnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["connectee", "VSphereCloud::DistributedVirtualSwitchPortConnectee", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsPortLinkUpEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortLinkUpEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsPortLinkDownEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortLinkDownEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsPortJoinPortgroupEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortJoinPortgroupEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString"],
      ["portgroupName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsPortLeavePortgroupEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortLeavePortgroupEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString"],
      ["portgroupName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsPortBlockedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortBlockedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["statusDetail", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsPortUnblockedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortUnblockedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsPortEnteredPassthruEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortEnteredPassthruEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsPortExitedPassthruEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortExitedPassthruEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsDestroyedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsDestroyedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsMergedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsMergedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["sourceDvs", "VSphereCloud::DvsEventArgument"],
      ["destinationDvs", "VSphereCloud::DvsEventArgument"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortgroupEvent,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortgroupCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVPortgroupEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortgroupRenamedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupRenamedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVPortgroupEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortgroupReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVPortgroupEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["configSpec", "VSphereCloud::DVPortgroupConfigSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortgroupDestroyedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupDestroyedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVPortgroupEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsInvocationFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsInvocationFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsRecoveredFromFailureEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsRecoveredFromFailureEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmReloadFromPathEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmReloadFromPathEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmReloadFromPathFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmReloadFromPathFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EventArgument,
    :schema_type => XSD::QName.new(NsVim25, "EventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RoleEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "RoleEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["roleId", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EntityEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ManagedEntityEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "ManagedEntityEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FolderEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "FolderEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["folder", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatacenterEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "DatacenterEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ComputeResourceEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "ComputeResourceEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["computeResource", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourcePoolEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["resourcePool", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "HostEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostEventArgument"),
    :schema_element => [
      ["hostEventArgument", ["VSphereCloud::HostEventArgument[]", XSD::QName.new(NsVim25, "HostEventArgument")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "VmEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["vm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVmEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVmEventArgument"),
    :schema_element => [
      ["vmEventArgument", ["VSphereCloud::VmEventArgument[]", XSD::QName.new(NsVim25, "VmEventArgument")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetworkEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "NetworkEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["network", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlarmEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "AlarmEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["alarm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScheduledTaskEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["scheduledTask", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "ProfileEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["profile", "VSphereCloud::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "DvsEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["dvs", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EventArgDesc,
    :schema_type => XSD::QName.new(NsVim25, "EventArgDesc"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["description", "VSphereCloud::ElementDescription", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfEventArgDesc,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfEventArgDesc"),
    :schema_element => [
      ["eventArgDesc", ["VSphereCloud::EventArgDesc[]", XSD::QName.new(NsVim25, "EventArgDesc")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EventDescriptionEventDetail,
    :schema_type => XSD::QName.new(NsVim25, "EventDescriptionEventDetail"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["category", "SOAP::SOAPString"],
      ["formatOnDatacenter", "SOAP::SOAPString"],
      ["formatOnComputeResource", "SOAP::SOAPString"],
      ["formatOnHost", "SOAP::SOAPString"],
      ["formatOnVm", "SOAP::SOAPString"],
      ["fullFormat", "SOAP::SOAPString"],
      ["longDescription", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfEventDescriptionEventDetail,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfEventDescriptionEventDetail"),
    :schema_element => [
      ["eventDescriptionEventDetail", ["VSphereCloud::EventDescriptionEventDetail[]", XSD::QName.new(NsVim25, "EventDescriptionEventDetail")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EventDescription,
    :schema_type => XSD::QName.new(NsVim25, "EventDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["category", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["eventInfo", "VSphereCloud::EventDescriptionEventDetail[]", [1, nil]],
      ["enumeratedTypes", "VSphereCloud::EnumDescription[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EventFilterSpecByEntity,
    :schema_type => XSD::QName.new(NsVim25, "EventFilterSpecByEntity"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["recursion", "VSphereCloud::EventFilterSpecRecursionOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EventFilterSpecByTime,
    :schema_type => XSD::QName.new(NsVim25, "EventFilterSpecByTime"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["beginTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EventFilterSpecByUsername,
    :schema_type => XSD::QName.new(NsVim25, "EventFilterSpecByUsername"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["systemUser", "SOAP::SOAPBoolean"],
      ["userList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EventFilterSpec,
    :schema_type => XSD::QName.new(NsVim25, "EventFilterSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::EventFilterSpecByEntity", [0, 1]],
      ["time", "VSphereCloud::EventFilterSpecByTime", [0, 1]],
      ["userName", "VSphereCloud::EventFilterSpecByUsername", [0, 1]],
      ["eventChainId", "SOAP::SOAPInt", [0, 1]],
      ["alarm", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["scheduledTask", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["disableFullMessage", "SOAP::SOAPBoolean", [0, 1]],
      ["category", "SOAP::SOAPString[]", [0, nil]],
      ["type", "SOAP::SOAPString[]", [0, nil]],
      ["tag", "SOAP::SOAPString[]", [0, nil]],
      ["eventTypeId", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ActiveDirectoryFault,
    :schema_type => XSD::QName.new(NsVim25, "ActiveDirectoryFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AdminDisabled,
    :schema_type => XSD::QName.new(NsVim25, "AdminDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AdminNotDisabled,
    :schema_type => XSD::QName.new(NsVim25, "AdminNotDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AffinityConfigured,
    :schema_type => XSD::QName.new(NsVim25, "AffinityConfigured"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["configuredAffinity", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AgentInstallFailed,
    :schema_type => XSD::QName.new(NsVim25, "AgentInstallFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["statusCode", "SOAP::SOAPInt", [0, 1]],
      ["installerOutput", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlreadyBeingManaged,
    :schema_type => XSD::QName.new(NsVim25, "AlreadyBeingManaged"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlreadyConnected,
    :schema_type => XSD::QName.new(NsVim25, "AlreadyConnected"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlreadyExists,
    :schema_type => XSD::QName.new(NsVim25, "AlreadyExists"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AlreadyUpgraded,
    :schema_type => XSD::QName.new(NsVim25, "AlreadyUpgraded"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ApplicationQuiesceFault,
    :schema_type => XSD::QName.new(NsVim25, "ApplicationQuiesceFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AuthMinimumAdminPermission,
    :schema_type => XSD::QName.new(NsVim25, "AuthMinimumAdminPermission"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::BlockedByFirewall,
    :schema_type => XSD::QName.new(NsVim25, "BlockedByFirewall"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotAccessFile,
    :schema_type => XSD::QName.new(NsVim25, "CannotAccessFile"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotAccessLocalSource,
    :schema_type => XSD::QName.new(NsVim25, "CannotAccessLocalSource"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotAccessNetwork,
    :schema_type => XSD::QName.new(NsVim25, "CannotAccessNetwork"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessVmDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotAccessVmComponent,
    :schema_type => XSD::QName.new(NsVim25, "CannotAccessVmComponent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotAccessVmConfig,
    :schema_type => XSD::QName.new(NsVim25, "CannotAccessVmConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessVmComponent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotAccessVmDevice,
    :schema_type => XSD::QName.new(NsVim25, "CannotAccessVmDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessVmComponent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotAccessVmDisk,
    :schema_type => XSD::QName.new(NsVim25, "CannotAccessVmDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessVmDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotAddHostWithFTVmAsStandalone,
    :schema_type => XSD::QName.new(NsVim25, "CannotAddHostWithFTVmAsStandalone"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotAddHostWithFTVmToDifferentCluster,
    :schema_type => XSD::QName.new(NsVim25, "CannotAddHostWithFTVmToDifferentCluster"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotAddHostWithFTVmToNonHACluster,
    :schema_type => XSD::QName.new(NsVim25, "CannotAddHostWithFTVmToNonHACluster"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotChangeDrsBehaviorForFtSecondary,
    :schema_type => XSD::QName.new(NsVim25, "CannotChangeDrsBehaviorForFtSecondary"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotChangeHaSettingsForFtSecondary,
    :schema_type => XSD::QName.new(NsVim25, "CannotChangeHaSettingsForFtSecondary"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotCreateFile,
    :schema_type => XSD::QName.new(NsVim25, "CannotCreateFile"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotDecryptPasswords,
    :schema_type => XSD::QName.new(NsVim25, "CannotDecryptPasswords"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotDeleteFile,
    :schema_type => XSD::QName.new(NsVim25, "CannotDeleteFile"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotDisableDrsOnClustersWithVApps,
    :schema_type => XSD::QName.new(NsVim25, "CannotDisableDrsOnClustersWithVApps"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotDisableSnapshot,
    :schema_type => XSD::QName.new(NsVim25, "CannotDisableSnapshot"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotDisconnectHostWithFaultToleranceVm,
    :schema_type => XSD::QName.new(NsVim25, "CannotDisconnectHostWithFaultToleranceVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotModifyConfigCpuRequirements,
    :schema_type => XSD::QName.new(NsVim25, "CannotModifyConfigCpuRequirements"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotMoveFaultToleranceVm,
    :schema_type => XSD::QName.new(NsVim25, "CannotMoveFaultToleranceVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["moveType", "SOAP::SOAPString"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotMoveHostWithFaultToleranceVm,
    :schema_type => XSD::QName.new(NsVim25, "CannotMoveHostWithFaultToleranceVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClockSkew,
    :schema_type => XSD::QName.new(NsVim25, "ClockSkew"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CloneFromSnapshotNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "CloneFromSnapshotNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ConcurrentAccess,
    :schema_type => XSD::QName.new(NsVim25, "ConcurrentAccess"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ConnectedIso,
    :schema_type => XSD::QName.new(NsVim25, "ConnectedIso"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["cdrom", "VSphereCloud::VirtualCdrom"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CpuCompatibilityUnknown,
    :schema_type => XSD::QName.new(NsVim25, "CpuCompatibilityUnknown"),
    :schema_basetype => XSD::QName.new(NsVim25, "CpuIncompatible"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CpuHotPlugNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "CpuHotPlugNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CpuIncompatible,
    :schema_type => XSD::QName.new(NsVim25, "CpuIncompatible"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CpuIncompatible1ECX,
    :schema_type => XSD::QName.new(NsVim25, "CpuIncompatible1ECX"),
    :schema_basetype => XSD::QName.new(NsVim25, "CpuIncompatible"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["sse3", "SOAP::SOAPBoolean"],
      ["ssse3", "SOAP::SOAPBoolean"],
      ["sse41", "SOAP::SOAPBoolean"],
      ["sse42", "SOAP::SOAPBoolean"],
      ["other", "SOAP::SOAPBoolean"],
      ["otherOnly", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CpuIncompatible81EDX,
    :schema_type => XSD::QName.new(NsVim25, "CpuIncompatible81EDX"),
    :schema_basetype => XSD::QName.new(NsVim25, "CpuIncompatible"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["nx", "SOAP::SOAPBoolean"],
      ["ffxsr", "SOAP::SOAPBoolean"],
      ["rdtscp", "SOAP::SOAPBoolean"],
      ["lm", "SOAP::SOAPBoolean"],
      ["other", "SOAP::SOAPBoolean"],
      ["otherOnly", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationFault,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationPending,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationPending"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DVPortNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceBackingNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DasConfigFault,
    :schema_type => XSD::QName.new(NsVim25, "DasConfigFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["output", "SOAP::SOAPString", [0, 1]],
      ["event", "VSphereCloud::Event[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatabaseError,
    :schema_type => XSD::QName.new(NsVim25, "DatabaseError"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatacenterMismatchArgument,
    :schema_type => XSD::QName.new(NsVim25, "DatacenterMismatchArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["inputDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDatacenterMismatchArgument,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDatacenterMismatchArgument"),
    :schema_element => [
      ["datacenterMismatchArgument", ["VSphereCloud::DatacenterMismatchArgument[]", XSD::QName.new(NsVim25, "DatacenterMismatchArgument")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatacenterMismatch,
    :schema_type => XSD::QName.new(NsVim25, "DatacenterMismatch"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidArgument", "VSphereCloud::DatacenterMismatchArgument[]", [1, nil]],
      ["expectedDatacenter", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreNotWritableOnHost,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreNotWritableOnHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDatastore"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DestinationSwitchFull,
    :schema_type => XSD::QName.new(NsVim25, "DestinationSwitchFull"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessNetwork"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DeviceBackingNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DeviceBackingNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DeviceControllerNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DeviceControllerNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["controller", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DeviceHotPlugNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DeviceHotPlugNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DeviceNotFound,
    :schema_type => XSD::QName.new(NsVim25, "DeviceNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DeviceNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DeviceUnsupportedForVmPlatform,
    :schema_type => XSD::QName.new(NsVim25, "DeviceUnsupportedForVmPlatform"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DeviceUnsupportedForVmVersion,
    :schema_type => XSD::QName.new(NsVim25, "DeviceUnsupportedForVmVersion"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["currentVersion", "SOAP::SOAPString"],
      ["expectedVersion", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DisableAdminNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DisableAdminNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DisallowedDiskModeChange,
    :schema_type => XSD::QName.new(NsVim25, "DisallowedDiskModeChange"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DisallowedMigrationDeviceAttached,
    :schema_type => XSD::QName.new(NsVim25, "DisallowedMigrationDeviceAttached"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DisallowedOperationOnFailoverHost,
    :schema_type => XSD::QName.new(NsVim25, "DisallowedOperationOnFailoverHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["hostname", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DiskMoveTypeNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DiskMoveTypeNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DiskNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DiskNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["disk", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DomainNotFound,
    :schema_type => XSD::QName.new(NsVim25, "DomainNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "ActiveDirectoryFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]],
      ["domainName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsDisabledOnVm,
    :schema_type => XSD::QName.new(NsVim25, "DrsDisabledOnVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsVmotionIncompatibleFault,
    :schema_type => XSD::QName.new(NsVim25, "DrsVmotionIncompatibleFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DuplicateName,
    :schema_type => XSD::QName.new(NsVim25, "DuplicateName"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["object", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsFault,
    :schema_type => XSD::QName.new(NsVim25, "DvsFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsNotAuthorized,
    :schema_type => XSD::QName.new(NsVim25, "DvsNotAuthorized"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["sessionExtensionKey", "SOAP::SOAPString", [0, 1]],
      ["dvsExtensionKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsOperationBulkFaultFaultOnHost,
    :schema_type => XSD::QName.new(NsVim25, "DvsOperationBulkFaultFaultOnHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDvsOperationBulkFaultFaultOnHost,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDvsOperationBulkFaultFaultOnHost"),
    :schema_element => [
      ["dvsOperationBulkFaultFaultOnHost", ["VSphereCloud::DvsOperationBulkFaultFaultOnHost[]", XSD::QName.new(NsVim25, "DvsOperationBulkFaultFaultOnHost")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsOperationBulkFault,
    :schema_type => XSD::QName.new(NsVim25, "DvsOperationBulkFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostFault", "VSphereCloud::DvsOperationBulkFaultFaultOnHost[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsScopeViolated,
    :schema_type => XSD::QName.new(NsVim25, "DvsScopeViolated"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["scope", "VSphereCloud::ManagedObjectReference[]", [1, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailed,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotSupportedHostInCluster"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedCPUFeaturesForMode,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedCPUFeaturesForMode"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedCPUModel,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedCPUModel"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedCPUModelForMode,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedCPUModelForMode"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedCPUVendor,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedCPUVendor"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["clusterCPUVendor", "SOAP::SOAPString"],
      ["hostCPUVendor", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedCPUVendorUnknown,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedCPUVendorUnknown"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedHostDisconnected,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedHostDisconnected"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedHostSoftware,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedHostSoftware"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedHostSoftwareForMode,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedHostSoftwareForMode"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedVmActive,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedVmActive"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EightHostLimitViolated,
    :schema_type => XSD::QName.new(NsVim25, "EightHostLimitViolated"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExpiredAddonLicense,
    :schema_type => XSD::QName.new(NsVim25, "ExpiredAddonLicense"),
    :schema_basetype => XSD::QName.new(NsVim25, "ExpiredFeatureLicense"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExpiredEditionLicense,
    :schema_type => XSD::QName.new(NsVim25, "ExpiredEditionLicense"),
    :schema_basetype => XSD::QName.new(NsVim25, "ExpiredFeatureLicense"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExpiredFeatureLicense,
    :schema_type => XSD::QName.new(NsVim25, "ExpiredFeatureLicense"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ExtendedFault,
    :schema_type => XSD::QName.new(NsVim25, "ExtendedFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["faultTypeId", "SOAP::SOAPString"],
      ["data", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FailToLockFaultToleranceVMs,
    :schema_type => XSD::QName.new(NsVim25, "FailToLockFaultToleranceVMs"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["alreadyLockedVm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FaultToleranceAntiAffinityViolated,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceAntiAffinityViolated"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FaultToleranceCannotEditMem,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceCannotEditMem"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["vm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FaultToleranceCpuIncompatible,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceCpuIncompatible"),
    :schema_basetype => XSD::QName.new(NsVim25, "CpuIncompatible"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["model", "SOAP::SOAPBoolean"],
      ["family", "SOAP::SOAPBoolean"],
      ["stepping", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FaultToleranceNeedsThickDisk,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceNeedsThickDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FaultToleranceNotLicensed,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceNotLicensed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FaultToleranceNotSameBuild,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceNotSameBuild"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["build", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FaultTolerancePrimaryPowerOnNotAttempted,
    :schema_type => XSD::QName.new(NsVim25, "FaultTolerancePrimaryPowerOnNotAttempted"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["secondaryVm", "VSphereCloud::ManagedObjectReference"],
      ["primaryVm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FileAlreadyExists,
    :schema_type => XSD::QName.new(NsVim25, "FileAlreadyExists"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FileBackedPortNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "FileBackedPortNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FileFault,
    :schema_type => XSD::QName.new(NsVim25, "FileFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FileLocked,
    :schema_type => XSD::QName.new(NsVim25, "FileLocked"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FileNotFound,
    :schema_type => XSD::QName.new(NsVim25, "FileNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FileNotWritable,
    :schema_type => XSD::QName.new(NsVim25, "FileNotWritable"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FileTooLarge,
    :schema_type => XSD::QName.new(NsVim25, "FileTooLarge"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"],
      ["datastore", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FilesystemQuiesceFault,
    :schema_type => XSD::QName.new(NsVim25, "FilesystemQuiesceFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FtIssuesOnHost,
    :schema_type => XSD::QName.new(NsVim25, "FtIssuesOnHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["hostName", "SOAP::SOAPString"],
      ["errors", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FullStorageVMotionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "FullStorageVMotionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFeatureNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GenericDrsFault,
    :schema_type => XSD::QName.new(NsVim25, "GenericDrsFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostFaults", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GenericVmConfigFault,
    :schema_type => XSD::QName.new(NsVim25, "GenericVmConfigFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HAErrorsAtDest,
    :schema_type => XSD::QName.new(NsVim25, "HAErrorsAtDest"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConfigFailed,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["failure", "VSphereCloud::LocalizedMethodFault[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConfigFault,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConnectFault,
    :schema_type => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInDomain,
    :schema_type => XSD::QName.new(NsVim25, "HostInDomain"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIncompatibleForFaultTolerance,
    :schema_type => XSD::QName.new(NsVim25, "HostIncompatibleForFaultTolerance"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIncompatibleForRecordReplay,
    :schema_type => XSD::QName.new(NsVim25, "HostIncompatibleForRecordReplay"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInventoryFull,
    :schema_type => XSD::QName.new(NsVim25, "HostInventoryFull"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["capacity", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPowerOpFailed,
    :schema_type => XSD::QName.new(NsVim25, "HostPowerOpFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HotSnapshotMoveNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "HotSnapshotMoveNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotCopyNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IDEDiskNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "IDEDiskNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DiskNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["disk", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IORMNotSupportedHostOnDatastore,
    :schema_type => XSD::QName.new(NsVim25, "IORMNotSupportedHostOnDatastore"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["datastoreName", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InUseFeatureManipulationDisallowed,
    :schema_type => XSD::QName.new(NsVim25, "InUseFeatureManipulationDisallowed"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InaccessibleDatastore,
    :schema_type => XSD::QName.new(NsVim25, "InaccessibleDatastore"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDatastore"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IncompatibleDefaultDevice,
    :schema_type => XSD::QName.new(NsVim25, "IncompatibleDefaultDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IncompatibleHostForFtSecondary,
    :schema_type => XSD::QName.new(NsVim25, "IncompatibleHostForFtSecondary"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IncompatibleSetting,
    :schema_type => XSD::QName.new(NsVim25, "IncompatibleSetting"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["conflictingProperty", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IncorrectFileType,
    :schema_type => XSD::QName.new(NsVim25, "IncorrectFileType"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IncorrectHostInformation,
    :schema_type => XSD::QName.new(NsVim25, "IncorrectHostInformation"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IndependentDiskVMotionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "IndependentDiskVMotionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFeatureNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InsufficientCpuResourcesFault,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientCpuResourcesFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InsufficientFailoverResourcesFault,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientFailoverResourcesFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InsufficientHostCapacityFault,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientHostCapacityFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InsufficientHostCpuCapacityFault,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientHostCpuCapacityFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientHostCapacityFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InsufficientHostMemoryCapacityFault,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientHostMemoryCapacityFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientHostCapacityFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InsufficientMemoryResourcesFault,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientMemoryResourcesFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InsufficientPerCpuCapacity,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientPerCpuCapacity"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientHostCapacityFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InsufficientResourcesFault,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InsufficientStandbyCpuResource,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientStandbyCpuResource"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientStandbyResource"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["available", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InsufficientStandbyMemoryResource,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientStandbyMemoryResource"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientStandbyResource"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["available", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InsufficientStandbyResource,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientStandbyResource"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidAffinitySettingFault,
    :schema_type => XSD::QName.new(NsVim25, "InvalidAffinitySettingFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidBmcRole,
    :schema_type => XSD::QName.new(NsVim25, "InvalidBmcRole"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidBundle,
    :schema_type => XSD::QName.new(NsVim25, "InvalidBundle"),
    :schema_basetype => XSD::QName.new(NsVim25, "PlatformConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidClientCertificate,
    :schema_type => XSD::QName.new(NsVim25, "InvalidClientCertificate"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidLogin"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidController,
    :schema_type => XSD::QName.new(NsVim25, "InvalidController"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["controllerKey", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidDasRestartPriorityForFtVm,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDasRestartPriorityForFtVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidDatastore,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDatastore"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidDatastorePath,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDatastorePath"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDatastore"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["datastorePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidDeviceBacking,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDeviceBacking"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidDeviceOperation,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDeviceOperation"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["badOp", "VSphereCloud::VirtualDeviceConfigSpecOperation", [0, 1]],
      ["badFileOp", "VSphereCloud::VirtualDeviceConfigSpecFileOperation", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidDeviceSpec,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidVmConfig"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidDiskFormat,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDiskFormat"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidFormat"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidDrsBehaviorForFtVm,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDrsBehaviorForFtVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidEditionLicense,
    :schema_type => XSD::QName.new(NsVim25, "InvalidEditionLicense"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidEvent,
    :schema_type => XSD::QName.new(NsVim25, "InvalidEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidFolder,
    :schema_type => XSD::QName.new(NsVim25, "InvalidFolder"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["target", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidFormat,
    :schema_type => XSD::QName.new(NsVim25, "InvalidFormat"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidHostName,
    :schema_type => XSD::QName.new(NsVim25, "InvalidHostName"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidHostState,
    :schema_type => XSD::QName.new(NsVim25, "InvalidHostState"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidState"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidIndexArgument,
    :schema_type => XSD::QName.new(NsVim25, "InvalidIndexArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidIpmiLoginInfo,
    :schema_type => XSD::QName.new(NsVim25, "InvalidIpmiLoginInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidIpmiMacAddress,
    :schema_type => XSD::QName.new(NsVim25, "InvalidIpmiMacAddress"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["userProvidedMacAddress", "SOAP::SOAPString"],
      ["observedMacAddress", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidLicense,
    :schema_type => XSD::QName.new(NsVim25, "InvalidLicense"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["licenseContent", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidLocale,
    :schema_type => XSD::QName.new(NsVim25, "InvalidLocale"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidLogin,
    :schema_type => XSD::QName.new(NsVim25, "InvalidLogin"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidName,
    :schema_type => XSD::QName.new(NsVim25, "InvalidName"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidNasCredentials,
    :schema_type => XSD::QName.new(NsVim25, "InvalidNasCredentials"),
    :schema_basetype => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidNetworkInType,
    :schema_type => XSD::QName.new(NsVim25, "InvalidNetworkInType"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidNetworkResource,
    :schema_type => XSD::QName.new(NsVim25, "InvalidNetworkResource"),
    :schema_basetype => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidOperationOnSecondaryVm,
    :schema_type => XSD::QName.new(NsVim25, "InvalidOperationOnSecondaryVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidPowerState,
    :schema_type => XSD::QName.new(NsVim25, "InvalidPowerState"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidState"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["requestedState", "VSphereCloud::VirtualMachinePowerState", [0, 1]],
      ["existingState", "VSphereCloud::VirtualMachinePowerState"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidPrivilege,
    :schema_type => XSD::QName.new(NsVim25, "InvalidPrivilege"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["privilege", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidPropertyType,
    :schema_type => XSD::QName.new(NsVim25, "InvalidPropertyType"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidPropertyValue,
    :schema_type => XSD::QName.new(NsVim25, "InvalidPropertyValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidResourcePoolStructureFault,
    :schema_type => XSD::QName.new(NsVim25, "InvalidResourcePoolStructureFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidSnapshotFormat,
    :schema_type => XSD::QName.new(NsVim25, "InvalidSnapshotFormat"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidFormat"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidState,
    :schema_type => XSD::QName.new(NsVim25, "InvalidState"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InvalidVmConfig,
    :schema_type => XSD::QName.new(NsVim25, "InvalidVmConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InventoryHasStandardAloneHosts,
    :schema_type => XSD::QName.new(NsVim25, "InventoryHasStandardAloneHosts"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hosts", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IpHostnameGeneratorError,
    :schema_type => XSD::QName.new(NsVim25, "IpHostnameGeneratorError"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LegacyNetworkInterfaceInUse,
    :schema_type => XSD::QName.new(NsVim25, "LegacyNetworkInterfaceInUse"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessNetwork"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseAssignmentFailed,
    :schema_type => XSD::QName.new(NsVim25, "LicenseAssignmentFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseDowngradeDisallowed,
    :schema_type => XSD::QName.new(NsVim25, "LicenseDowngradeDisallowed"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["edition", "SOAP::SOAPString"],
      ["entityId", "SOAP::SOAPString"],
      ["features", "VSphereCloud::KeyAnyValue[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseEntityNotFound,
    :schema_type => XSD::QName.new(NsVim25, "LicenseEntityNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["entityId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseExpired,
    :schema_type => XSD::QName.new(NsVim25, "LicenseExpired"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseKeyEntityMismatch,
    :schema_type => XSD::QName.new(NsVim25, "LicenseKeyEntityMismatch"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseRestricted,
    :schema_type => XSD::QName.new(NsVim25, "LicenseRestricted"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseServerUnavailable,
    :schema_type => XSD::QName.new(NsVim25, "LicenseServerUnavailable"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseSourceUnavailable,
    :schema_type => XSD::QName.new(NsVim25, "LicenseSourceUnavailable"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["licenseSource", "VSphereCloud::LicenseSource"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LimitExceeded,
    :schema_type => XSD::QName.new(NsVim25, "LimitExceeded"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["limit", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LinuxVolumeNotClean,
    :schema_type => XSD::QName.new(NsVim25, "LinuxVolumeNotClean"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LogBundlingFailed,
    :schema_type => XSD::QName.new(NsVim25, "LogBundlingFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MaintenanceModeFileMove,
    :schema_type => XSD::QName.new(NsVim25, "MaintenanceModeFileMove"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MemoryHotPlugNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "MemoryHotPlugNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MemorySizeNotRecommended,
    :schema_type => XSD::QName.new(NsVim25, "MemorySizeNotRecommended"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["memorySizeMB", "SOAP::SOAPInt"],
      ["minMemorySizeMB", "SOAP::SOAPInt"],
      ["maxMemorySizeMB", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MemorySizeNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "MemorySizeNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["memorySizeMB", "SOAP::SOAPInt"],
      ["minMemorySizeMB", "SOAP::SOAPInt"],
      ["maxMemorySizeMB", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MemorySnapshotOnIndependentDisk,
    :schema_type => XSD::QName.new(NsVim25, "MemorySnapshotOnIndependentDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MethodAlreadyDisabledFault,
    :schema_type => XSD::QName.new(NsVim25, "MethodAlreadyDisabledFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["sourceId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MethodDisabled,
    :schema_type => XSD::QName.new(NsVim25, "MethodDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["source", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MigrationDisabled,
    :schema_type => XSD::QName.new(NsVim25, "MigrationDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MigrationFault,
    :schema_type => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MigrationFeatureNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "MigrationFeatureNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MigrationNotReady,
    :schema_type => XSD::QName.new(NsVim25, "MigrationNotReady"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MismatchedBundle,
    :schema_type => XSD::QName.new(NsVim25, "MismatchedBundle"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["bundleUuid", "SOAP::SOAPString"],
      ["hostUuid", "SOAP::SOAPString"],
      ["bundleBuildNumber", "SOAP::SOAPInt"],
      ["hostBuildNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MismatchedNetworkPolicies,
    :schema_type => XSD::QName.new(NsVim25, "MismatchedNetworkPolicies"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MismatchedVMotionNetworkNames,
    :schema_type => XSD::QName.new(NsVim25, "MismatchedVMotionNetworkNames"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["sourceNetwork", "SOAP::SOAPString"],
      ["destNetwork", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MissingBmcSupport,
    :schema_type => XSD::QName.new(NsVim25, "MissingBmcSupport"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MissingController,
    :schema_type => XSD::QName.new(NsVim25, "MissingController"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MissingLinuxCustResources,
    :schema_type => XSD::QName.new(NsVim25, "MissingLinuxCustResources"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MissingNetworkIpConfig,
    :schema_type => XSD::QName.new(NsVim25, "MissingNetworkIpConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MissingPowerOffConfiguration,
    :schema_type => XSD::QName.new(NsVim25, "MissingPowerOffConfiguration"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MissingPowerOnConfiguration,
    :schema_type => XSD::QName.new(NsVim25, "MissingPowerOnConfiguration"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MissingWindowsCustResources,
    :schema_type => XSD::QName.new(NsVim25, "MissingWindowsCustResources"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MountError,
    :schema_type => XSD::QName.new(NsVim25, "MountError"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["diskIndex", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MultipleCertificatesVerifyFaultThumbprintData,
    :schema_type => XSD::QName.new(NsVim25, "MultipleCertificatesVerifyFaultThumbprintData"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["port", "SOAP::SOAPInt"],
      ["thumbprint", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfMultipleCertificatesVerifyFaultThumbprintData,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfMultipleCertificatesVerifyFaultThumbprintData"),
    :schema_element => [
      ["multipleCertificatesVerifyFaultThumbprintData", ["VSphereCloud::MultipleCertificatesVerifyFaultThumbprintData[]", XSD::QName.new(NsVim25, "MultipleCertificatesVerifyFaultThumbprintData")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MultipleCertificatesVerifyFault,
    :schema_type => XSD::QName.new(NsVim25, "MultipleCertificatesVerifyFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["thumbprintData", "VSphereCloud::MultipleCertificatesVerifyFaultThumbprintData[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MultipleSnapshotsNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "MultipleSnapshotsNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NasConfigFault,
    :schema_type => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NasConnectionLimitReached,
    :schema_type => XSD::QName.new(NsVim25, "NasConnectionLimitReached"),
    :schema_basetype => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NasSessionCredentialConflict,
    :schema_type => XSD::QName.new(NsVim25, "NasSessionCredentialConflict"),
    :schema_basetype => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NasVolumeNotMounted,
    :schema_type => XSD::QName.new(NsVim25, "NasVolumeNotMounted"),
    :schema_basetype => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetworkCopyFault,
    :schema_type => XSD::QName.new(NsVim25, "NetworkCopyFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetworkInaccessible,
    :schema_type => XSD::QName.new(NsVim25, "NetworkInaccessible"),
    :schema_basetype => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetworksMayNotBeTheSame,
    :schema_type => XSD::QName.new(NsVim25, "NetworksMayNotBeTheSame"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NicSettingMismatch,
    :schema_type => XSD::QName.new(NsVim25, "NicSettingMismatch"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["numberOfNicsInSpec", "SOAP::SOAPInt"],
      ["numberOfNicsInVM", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoActiveHostInCluster,
    :schema_type => XSD::QName.new(NsVim25, "NoActiveHostInCluster"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidState"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["computeResource", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoAvailableIp,
    :schema_type => XSD::QName.new(NsVim25, "NoAvailableIp"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["network", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoClientCertificate,
    :schema_type => XSD::QName.new(NsVim25, "NoClientCertificate"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoCompatibleHardAffinityHost,
    :schema_type => XSD::QName.new(NsVim25, "NoCompatibleHardAffinityHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoCompatibleHost,
    :schema_type => XSD::QName.new(NsVim25, "NoCompatibleHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoCompatibleHostWithAccessToDevice,
    :schema_type => XSD::QName.new(NsVim25, "NoCompatibleHostWithAccessToDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "NoCompatibleHost"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoCompatibleSoftAffinityHost,
    :schema_type => XSD::QName.new(NsVim25, "NoCompatibleSoftAffinityHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoDiskFound,
    :schema_type => XSD::QName.new(NsVim25, "NoDiskFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoDiskSpace,
    :schema_type => XSD::QName.new(NsVim25, "NoDiskSpace"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"],
      ["datastore", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoDisksToCustomize,
    :schema_type => XSD::QName.new(NsVim25, "NoDisksToCustomize"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoGateway,
    :schema_type => XSD::QName.new(NsVim25, "NoGateway"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoGuestHeartbeat,
    :schema_type => XSD::QName.new(NsVim25, "NoGuestHeartbeat"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoHost,
    :schema_type => XSD::QName.new(NsVim25, "NoHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoHostSuitableForFtSecondary,
    :schema_type => XSD::QName.new(NsVim25, "NoHostSuitableForFtSecondary"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoLicenseServerConfigured,
    :schema_type => XSD::QName.new(NsVim25, "NoLicenseServerConfigured"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoPeerHostFound,
    :schema_type => XSD::QName.new(NsVim25, "NoPeerHostFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostPowerOpFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoPermission,
    :schema_type => XSD::QName.new(NsVim25, "NoPermission"),
    :schema_basetype => XSD::QName.new(NsVim25, "SecurityError"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["object", "VSphereCloud::ManagedObjectReference"],
      ["privilegeId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoPermissionOnAD,
    :schema_type => XSD::QName.new(NsVim25, "NoPermissionOnAD"),
    :schema_basetype => XSD::QName.new(NsVim25, "ActiveDirectoryFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoPermissionOnHost,
    :schema_type => XSD::QName.new(NsVim25, "NoPermissionOnHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoPermissionOnNasVolume,
    :schema_type => XSD::QName.new(NsVim25, "NoPermissionOnNasVolume"),
    :schema_basetype => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoSubjectName,
    :schema_type => XSD::QName.new(NsVim25, "NoSubjectName"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoVcManagedIpConfigured,
    :schema_type => XSD::QName.new(NsVim25, "NoVcManagedIpConfigured"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoVirtualNic,
    :schema_type => XSD::QName.new(NsVim25, "NoVirtualNic"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NoVmInVApp,
    :schema_type => XSD::QName.new(NsVim25, "NoVmInVApp"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NonADUserRequired,
    :schema_type => XSD::QName.new(NsVim25, "NonADUserRequired"),
    :schema_basetype => XSD::QName.new(NsVim25, "ActiveDirectoryFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NonHomeRDMVMotionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "NonHomeRDMVMotionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFeatureNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NonPersistentDisksNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "NonPersistentDisksNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NotAuthenticated,
    :schema_type => XSD::QName.new(NsVim25, "NotAuthenticated"),
    :schema_basetype => XSD::QName.new(NsVim25, "NoPermission"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["object", "VSphereCloud::ManagedObjectReference"],
      ["privilegeId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NotEnoughCpus,
    :schema_type => XSD::QName.new(NsVim25, "NotEnoughCpus"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["numCpuDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NotEnoughLogicalCpus,
    :schema_type => XSD::QName.new(NsVim25, "NotEnoughLogicalCpus"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughCpus"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["numCpuDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NotFound,
    :schema_type => XSD::QName.new(NsVim25, "NotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NotSupportedDeviceForFT,
    :schema_type => XSD::QName.new(NsVim25, "NotSupportedDeviceForFT"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString", [0, 1]],
      ["deviceType", "SOAP::SOAPString"],
      ["deviceLabel", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NotSupportedHost,
    :schema_type => XSD::QName.new(NsVim25, "NotSupportedHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NotSupportedHostInCluster,
    :schema_type => XSD::QName.new(NsVim25, "NotSupportedHostInCluster"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotSupportedHost"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NotSupportedHostInDvs,
    :schema_type => XSD::QName.new(NsVim25, "NotSupportedHostInDvs"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotSupportedHost"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["switchProductSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NotUserConfigurableProperty,
    :schema_type => XSD::QName.new(NsVim25, "NotUserConfigurableProperty"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NumVirtualCpusExceedsLimit,
    :schema_type => XSD::QName.new(NsVim25, "NumVirtualCpusExceedsLimit"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["maxSupportedVcpus", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NumVirtualCpusIncompatible,
    :schema_type => XSD::QName.new(NsVim25, "NumVirtualCpusIncompatible"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"],
      ["numCpu", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NumVirtualCpusNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "NumVirtualCpusNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["maxSupportedVcpusDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OutOfBounds,
    :schema_type => XSD::QName.new(NsVim25, "OutOfBounds"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["argumentName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfAttribute,
    :schema_type => XSD::QName.new(NsVim25, "OvfAttribute"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfConnectedDevice,
    :schema_type => XSD::QName.new(NsVim25, "OvfConnectedDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfHardwareExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfConnectedDeviceFloppy,
    :schema_type => XSD::QName.new(NsVim25, "OvfConnectedDeviceFloppy"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfConnectedDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfConnectedDeviceIso,
    :schema_type => XSD::QName.new(NsVim25, "OvfConnectedDeviceIso"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfConnectedDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfConstraint,
    :schema_type => XSD::QName.new(NsVim25, "OvfConstraint"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfDiskMappingNotFound,
    :schema_type => XSD::QName.new(NsVim25, "OvfDiskMappingNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["diskName", "SOAP::SOAPString"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfDiskOrderConstraint,
    :schema_type => XSD::QName.new(NsVim25, "OvfDiskOrderConstraint"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfConstraint"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfDuplicateElement,
    :schema_type => XSD::QName.new(NsVim25, "OvfDuplicateElement"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfDuplicatedElementBoundary,
    :schema_type => XSD::QName.new(NsVim25, "OvfDuplicatedElementBoundary"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["boundary", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfElement,
    :schema_type => XSD::QName.new(NsVim25, "OvfElement"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfElementInvalidValue,
    :schema_type => XSD::QName.new(NsVim25, "OvfElementInvalidValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfExport,
    :schema_type => XSD::QName.new(NsVim25, "OvfExport"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfExportFailed,
    :schema_type => XSD::QName.new(NsVim25, "OvfExportFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfFault,
    :schema_type => XSD::QName.new(NsVim25, "OvfFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfHardwareCheck,
    :schema_type => XSD::QName.new(NsVim25, "OvfHardwareCheck"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfImport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfHardwareExport,
    :schema_type => XSD::QName.new(NsVim25, "OvfHardwareExport"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfHostResourceConstraint,
    :schema_type => XSD::QName.new(NsVim25, "OvfHostResourceConstraint"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfConstraint"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfHostValueNotParsed,
    :schema_type => XSD::QName.new(NsVim25, "OvfHostValueNotParsed"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfImport,
    :schema_type => XSD::QName.new(NsVim25, "OvfImport"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfImportFailed,
    :schema_type => XSD::QName.new(NsVim25, "OvfImportFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfImport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfInternalError,
    :schema_type => XSD::QName.new(NsVim25, "OvfInternalError"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfInvalidPackage,
    :schema_type => XSD::QName.new(NsVim25, "OvfInvalidPackage"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfInvalidValue,
    :schema_type => XSD::QName.new(NsVim25, "OvfInvalidValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfAttribute"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfInvalidValueConfiguration,
    :schema_type => XSD::QName.new(NsVim25, "OvfInvalidValueConfiguration"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidValue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfInvalidValueEmpty,
    :schema_type => XSD::QName.new(NsVim25, "OvfInvalidValueEmpty"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidValue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfInvalidValueFormatMalformed,
    :schema_type => XSD::QName.new(NsVim25, "OvfInvalidValueFormatMalformed"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidValue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfInvalidValueReference,
    :schema_type => XSD::QName.new(NsVim25, "OvfInvalidValueReference"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidValue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfInvalidVmName,
    :schema_type => XSD::QName.new(NsVim25, "OvfInvalidVmName"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfMappedOsId,
    :schema_type => XSD::QName.new(NsVim25, "OvfMappedOsId"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfImport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["ovfId", "SOAP::SOAPInt"],
      ["ovfDescription", "SOAP::SOAPString"],
      ["targetDescription", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfMissingAttribute,
    :schema_type => XSD::QName.new(NsVim25, "OvfMissingAttribute"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfAttribute"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfMissingElement,
    :schema_type => XSD::QName.new(NsVim25, "OvfMissingElement"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfMissingElementNormalBoundary,
    :schema_type => XSD::QName.new(NsVim25, "OvfMissingElementNormalBoundary"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfMissingElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["boundary", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfMissingHardware,
    :schema_type => XSD::QName.new(NsVim25, "OvfMissingHardware"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfImport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["resourceType", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfNoHostNic,
    :schema_type => XSD::QName.new(NsVim25, "OvfNoHostNic"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfNoSupportedHardwareFamily,
    :schema_type => XSD::QName.new(NsVim25, "OvfNoSupportedHardwareFamily"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["version", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfProperty,
    :schema_type => XSD::QName.new(NsVim25, "OvfProperty"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfPropertyExport,
    :schema_type => XSD::QName.new(NsVim25, "OvfPropertyExport"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfPropertyNetwork,
    :schema_type => XSD::QName.new(NsVim25, "OvfPropertyNetwork"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfProperty"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfPropertyQualifier,
    :schema_type => XSD::QName.new(NsVim25, "OvfPropertyQualifier"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfProperty"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfPropertyQualifierDuplicate,
    :schema_type => XSD::QName.new(NsVim25, "OvfPropertyQualifierDuplicate"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfProperty"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfPropertyQualifierIgnored,
    :schema_type => XSD::QName.new(NsVim25, "OvfPropertyQualifierIgnored"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfProperty"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfPropertyType,
    :schema_type => XSD::QName.new(NsVim25, "OvfPropertyType"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfProperty"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfPropertyValue,
    :schema_type => XSD::QName.new(NsVim25, "OvfPropertyValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfProperty"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfSystemFault,
    :schema_type => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfToXmlUnsupportedElement,
    :schema_type => XSD::QName.new(NsVim25, "OvfToXmlUnsupportedElement"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnableToExportDisk,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnableToExportDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfHardwareExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["diskName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnexpectedElement,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnexpectedElement"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnknownDevice,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnknownDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnknownDeviceBacking,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnknownDeviceBacking"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfHardwareExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnknownEntity,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnknownEntity"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnsupportedAttribute,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedAttribute"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnsupportedAttributeValue,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedAttributeValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedAttribute"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnsupportedDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["elementName", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"],
      ["backingName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnsupportedDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["elementName", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"],
      ["backingName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnsupportedDeviceExport,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedDeviceExport"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfHardwareExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnsupportedDiskProvisioning,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedDiskProvisioning"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfImport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["diskProvisioning", "SOAP::SOAPString"],
      ["supportedDiskProvisioning", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnsupportedElement,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedElement"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnsupportedElementValue,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedElementValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnsupportedPackage,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnsupportedSection,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedSection"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["info", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnsupportedSubType,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedSubType"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["instanceId", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPInt"],
      ["deviceSubType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfUnsupportedType,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedType"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["instanceId", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfWrongElement,
    :schema_type => XSD::QName.new(NsVim25, "OvfWrongElement"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfWrongNamespace,
    :schema_type => XSD::QName.new(NsVim25, "OvfWrongNamespace"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["namespaceName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfXmlFormat,
    :schema_type => XSD::QName.new(NsVim25, "OvfXmlFormat"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PatchAlreadyInstalled,
    :schema_type => XSD::QName.new(NsVim25, "PatchAlreadyInstalled"),
    :schema_basetype => XSD::QName.new(NsVim25, "PatchNotApplicable"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PatchBinariesNotFound,
    :schema_type => XSD::QName.new(NsVim25, "PatchBinariesNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["binary", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PatchInstallFailed,
    :schema_type => XSD::QName.new(NsVim25, "PatchInstallFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "PlatformConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"],
      ["rolledBack", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PatchIntegrityError,
    :schema_type => XSD::QName.new(NsVim25, "PatchIntegrityError"),
    :schema_basetype => XSD::QName.new(NsVim25, "PlatformConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PatchMetadataCorrupted,
    :schema_type => XSD::QName.new(NsVim25, "PatchMetadataCorrupted"),
    :schema_basetype => XSD::QName.new(NsVim25, "PatchMetadataInvalid"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PatchMetadataInvalid,
    :schema_type => XSD::QName.new(NsVim25, "PatchMetadataInvalid"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PatchMetadataNotFound,
    :schema_type => XSD::QName.new(NsVim25, "PatchMetadataNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "PatchMetadataInvalid"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PatchMissingDependencies,
    :schema_type => XSD::QName.new(NsVim25, "PatchMissingDependencies"),
    :schema_basetype => XSD::QName.new(NsVim25, "PatchNotApplicable"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["prerequisitePatch", "SOAP::SOAPString[]", [0, nil]],
      ["prerequisiteLib", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PatchNotApplicable,
    :schema_type => XSD::QName.new(NsVim25, "PatchNotApplicable"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PatchSuperseded,
    :schema_type => XSD::QName.new(NsVim25, "PatchSuperseded"),
    :schema_basetype => XSD::QName.new(NsVim25, "PatchNotApplicable"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["supersede", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PhysCompatRDMNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "PhysCompatRDMNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "RDMNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PlatformConfigFault,
    :schema_type => XSD::QName.new(NsVim25, "PlatformConfigFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PowerOnFtSecondaryFailed,
    :schema_type => XSD::QName.new(NsVim25, "PowerOnFtSecondaryFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"],
      ["hostSelectionBy", "VSphereCloud::FtIssuesOnHostHostSelectionType"],
      ["hostErrors", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["rootCause", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PowerOnFtSecondaryTimedout,
    :schema_type => XSD::QName.new(NsVim25, "PowerOnFtSecondaryTimedout"),
    :schema_basetype => XSD::QName.new(NsVim25, "Timedout"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"],
      ["timeout", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileUpdateFailedUpdateFailure,
    :schema_type => XSD::QName.new(NsVim25, "ProfileUpdateFailedUpdateFailure"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["profilePath", "VSphereCloud::ProfilePropertyPath"],
      ["errMsg", "VSphereCloud::LocalizableMessage"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfProfileUpdateFailedUpdateFailure,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileUpdateFailedUpdateFailure"),
    :schema_element => [
      ["profileUpdateFailedUpdateFailure", ["VSphereCloud::ProfileUpdateFailedUpdateFailure[]", XSD::QName.new(NsVim25, "ProfileUpdateFailedUpdateFailure")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileUpdateFailed,
    :schema_type => XSD::QName.new(NsVim25, "ProfileUpdateFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["failure", "VSphereCloud::ProfileUpdateFailedUpdateFailure[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::QuestionPending,
    :schema_type => XSD::QName.new(NsVim25, "QuestionPending"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidState"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RDMConversionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "RDMConversionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RDMNotPreserved,
    :schema_type => XSD::QName.new(NsVim25, "RDMNotPreserved"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RDMNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "RDMNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RDMNotSupportedOnDatastore,
    :schema_type => XSD::QName.new(NsVim25, "RDMNotSupportedOnDatastore"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["datastoreName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RDMPointsToInaccessibleDisk,
    :schema_type => XSD::QName.new(NsVim25, "RDMPointsToInaccessibleDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessVmDisk"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RawDiskNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "RawDiskNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ReadOnlyDisksWithLegacyDestination,
    :schema_type => XSD::QName.new(NsVim25, "ReadOnlyDisksWithLegacyDestination"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["roDiskCount", "SOAP::SOAPInt"],
      ["timeoutDanger", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RebootRequired,
    :schema_type => XSD::QName.new(NsVim25, "RebootRequired"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patch", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RecordReplayDisabled,
    :schema_type => XSD::QName.new(NsVim25, "RecordReplayDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoteDeviceNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "RemoteDeviceNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RemoveFailed,
    :schema_type => XSD::QName.new(NsVim25, "RemoveFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourceInUse,
    :schema_type => XSD::QName.new(NsVim25, "ResourceInUse"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ResourceNotAvailable,
    :schema_type => XSD::QName.new(NsVim25, "ResourceNotAvailable"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["containerType", "SOAP::SOAPString", [0, 1]],
      ["containerName", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RestrictedVersion,
    :schema_type => XSD::QName.new(NsVim25, "RestrictedVersion"),
    :schema_basetype => XSD::QName.new(NsVim25, "SecurityError"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RuleViolation,
    :schema_type => XSD::QName.new(NsVim25, "RuleViolation"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["rule", "VSphereCloud::ClusterRuleInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SSLDisabledFault,
    :schema_type => XSD::QName.new(NsVim25, "SSLDisabledFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SSLVerifyFault,
    :schema_type => XSD::QName.new(NsVim25, "SSLVerifyFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["selfSigned", "SOAP::SOAPBoolean"],
      ["thumbprint", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SSPIChallenge,
    :schema_type => XSD::QName.new(NsVim25, "SSPIChallenge"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["base64Token", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SecondaryVmAlreadyDisabled,
    :schema_type => XSD::QName.new(NsVim25, "SecondaryVmAlreadyDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SecondaryVmAlreadyEnabled,
    :schema_type => XSD::QName.new(NsVim25, "SecondaryVmAlreadyEnabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SecondaryVmAlreadyRegistered,
    :schema_type => XSD::QName.new(NsVim25, "SecondaryVmAlreadyRegistered"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SecondaryVmNotRegistered,
    :schema_type => XSD::QName.new(NsVim25, "SecondaryVmNotRegistered"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SharedBusControllerNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SharedBusControllerNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SnapshotCloneNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotCloneNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotCopyNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SnapshotCopyNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotCopyNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SnapshotDisabled,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SnapshotFault,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SnapshotIncompatibleDeviceInVm,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotIncompatibleDeviceInVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SnapshotLocked,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotLocked"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SnapshotMoveFromNonHomeNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotMoveFromNonHomeNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotCopyNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SnapshotMoveNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotMoveNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotCopyNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SnapshotMoveToNonHomeNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotMoveToNonHomeNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotCopyNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SnapshotNoChange,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotNoChange"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SnapshotRevertIssue,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotRevertIssue"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["snapshotName", "SOAP::SOAPString", [0, 1]],
      ["event", "VSphereCloud::Event[]", [0, nil]],
      ["errors", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SoftRuleVioCorrectionDisallowed,
    :schema_type => XSD::QName.new(NsVim25, "SoftRuleVioCorrectionDisallowed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SoftRuleVioCorrectionImpact,
    :schema_type => XSD::QName.new(NsVim25, "SoftRuleVioCorrectionImpact"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StorageVMotionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "StorageVMotionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFeatureNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SuspendedRelocateNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SuspendedRelocateNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SwapDatastoreNotWritableOnHost,
    :schema_type => XSD::QName.new(NsVim25, "SwapDatastoreNotWritableOnHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreNotWritableOnHost"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SwapDatastoreUnset,
    :schema_type => XSD::QName.new(NsVim25, "SwapDatastoreUnset"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SwapPlacementOverrideNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SwapPlacementOverrideNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidVmConfig"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SwitchNotInUpgradeMode,
    :schema_type => XSD::QName.new(NsVim25, "SwitchNotInUpgradeMode"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskInProgress,
    :schema_type => XSD::QName.new(NsVim25, "TaskInProgress"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["task", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::Timedout,
    :schema_type => XSD::QName.new(NsVim25, "Timedout"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TooManyConsecutiveOverrides,
    :schema_type => XSD::QName.new(NsVim25, "TooManyConsecutiveOverrides"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TooManyDevices,
    :schema_type => XSD::QName.new(NsVim25, "TooManyDevices"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidVmConfig"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TooManyDisksOnLegacyHost,
    :schema_type => XSD::QName.new(NsVim25, "TooManyDisksOnLegacyHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["diskCount", "SOAP::SOAPInt"],
      ["timeoutDanger", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TooManyHosts,
    :schema_type => XSD::QName.new(NsVim25, "TooManyHosts"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TooManySnapshotLevels,
    :schema_type => XSD::QName.new(NsVim25, "TooManySnapshotLevels"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ToolsAlreadyUpgraded,
    :schema_type => XSD::QName.new(NsVim25, "ToolsAlreadyUpgraded"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmToolsUpgradeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ToolsAutoUpgradeNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "ToolsAutoUpgradeNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmToolsUpgradeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ToolsImageNotAvailable,
    :schema_type => XSD::QName.new(NsVim25, "ToolsImageNotAvailable"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmToolsUpgradeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ToolsImageSignatureCheckFailed,
    :schema_type => XSD::QName.new(NsVim25, "ToolsImageSignatureCheckFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmToolsUpgradeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ToolsInstallationInProgress,
    :schema_type => XSD::QName.new(NsVim25, "ToolsInstallationInProgress"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ToolsUnavailable,
    :schema_type => XSD::QName.new(NsVim25, "ToolsUnavailable"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ToolsUpgradeCancelled,
    :schema_type => XSD::QName.new(NsVim25, "ToolsUpgradeCancelled"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmToolsUpgradeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UncommittedUndoableDisk,
    :schema_type => XSD::QName.new(NsVim25, "UncommittedUndoableDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnconfiguredPropertyValue,
    :schema_type => XSD::QName.new(NsVim25, "UnconfiguredPropertyValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidPropertyValue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UncustomizableGuest,
    :schema_type => XSD::QName.new(NsVim25, "UncustomizableGuest"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["uncustomizableGuestOS", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnexpectedCustomizationFault,
    :schema_type => XSD::QName.new(NsVim25, "UnexpectedCustomizationFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnrecognizedHost,
    :schema_type => XSD::QName.new(NsVim25, "UnrecognizedHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnsharedSwapVMotionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "UnsharedSwapVMotionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFeatureNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnsupportedDatastore,
    :schema_type => XSD::QName.new(NsVim25, "UnsupportedDatastore"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnsupportedGuest,
    :schema_type => XSD::QName.new(NsVim25, "UnsupportedGuest"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidVmConfig"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["unsupportedGuestOS", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnsupportedVimApiVersion,
    :schema_type => XSD::QName.new(NsVim25, "UnsupportedVimApiVersion"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnsupportedVmxLocation,
    :schema_type => XSD::QName.new(NsVim25, "UnsupportedVmxLocation"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UnusedVirtualDiskBlocksNotScrubbed,
    :schema_type => XSD::QName.new(NsVim25, "UnusedVirtualDiskBlocksNotScrubbed"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceBackingNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UserNotFound,
    :schema_type => XSD::QName.new(NsVim25, "UserNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["unresolved", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppConfigFault,
    :schema_type => XSD::QName.new(NsVim25, "VAppConfigFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppNotRunning,
    :schema_type => XSD::QName.new(NsVim25, "VAppNotRunning"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppPropertyFault,
    :schema_type => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppTaskInProgress,
    :schema_type => XSD::QName.new(NsVim25, "VAppTaskInProgress"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskInProgress"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["task", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMINotSupported,
    :schema_type => XSD::QName.new(NsVim25, "VMINotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMOnConflictDVPort,
    :schema_type => XSD::QName.new(NsVim25, "VMOnConflictDVPort"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessNetwork"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMOnVirtualIntranet,
    :schema_type => XSD::QName.new(NsVim25, "VMOnVirtualIntranet"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessNetwork"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMotionInterfaceIssue,
    :schema_type => XSD::QName.new(NsVim25, "VMotionInterfaceIssue"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMotionLinkCapacityLow,
    :schema_type => XSD::QName.new(NsVim25, "VMotionLinkCapacityLow"),
    :schema_basetype => XSD::QName.new(NsVim25, "VMotionInterfaceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMotionLinkDown,
    :schema_type => XSD::QName.new(NsVim25, "VMotionLinkDown"),
    :schema_basetype => XSD::QName.new(NsVim25, "VMotionInterfaceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMotionNotConfigured,
    :schema_type => XSD::QName.new(NsVim25, "VMotionNotConfigured"),
    :schema_basetype => XSD::QName.new(NsVim25, "VMotionInterfaceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMotionNotLicensed,
    :schema_type => XSD::QName.new(NsVim25, "VMotionNotLicensed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VMotionInterfaceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMotionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "VMotionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VMotionInterfaceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMotionProtocolIncompatible,
    :schema_type => XSD::QName.new(NsVim25, "VMotionProtocolIncompatible"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VimFault,
    :schema_type => XSD::QName.new(NsVim25, "VimFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "MethodFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskBlocksNotFullyProvisioned,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskBlocksNotFullyProvisioned"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceBackingNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskModeNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskModeNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["mode", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualHardwareCompatibilityIssue,
    :schema_type => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualHardwareVersionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "VirtualHardwareVersionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmAlreadyExistsInDatacenter,
    :schema_type => XSD::QName.new(NsVim25, "VmAlreadyExistsInDatacenter"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidFolder"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["target", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["hostname", "SOAP::SOAPString"],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmConfigFault,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmConfigIncompatibleForFaultTolerance,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigIncompatibleForFaultTolerance"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmConfigIncompatibleForRecordReplay,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigIncompatibleForRecordReplay"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFaultToleranceConfigIssue,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceConfigIssue"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFaultToleranceConfigIssueWrapper,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceConfigIssueWrapper"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["error", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFaultToleranceInvalidFileBacking,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceInvalidFileBacking"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["backingType", "SOAP::SOAPString", [0, 1]],
      ["backingFilename", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFaultToleranceIssue,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFaultToleranceOpIssuesList,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceOpIssuesList"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["errors", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["warnings", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFaultToleranceTooManyVMsOnHost,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceTooManyVMsOnHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["maxNumFtVms", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmHostAffinityRuleViolation,
    :schema_type => XSD::QName.new(NsVim25, "VmHostAffinityRuleViolation"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmLimitLicense,
    :schema_type => XSD::QName.new(NsVim25, "VmLimitLicense"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["limit", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmMonitorIncompatibleForFaultTolerance,
    :schema_type => XSD::QName.new(NsVim25, "VmMonitorIncompatibleForFaultTolerance"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmPowerOnDisabled,
    :schema_type => XSD::QName.new(NsVim25, "VmPowerOnDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidState"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmToolsUpgradeFault,
    :schema_type => XSD::QName.new(NsVim25, "VmToolsUpgradeFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmValidateMaxDevice,
    :schema_type => XSD::QName.new(NsVim25, "VmValidateMaxDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["max", "SOAP::SOAPInt"],
      ["count", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmWwnConflict,
    :schema_type => XSD::QName.new(NsVim25, "VmWwnConflict"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidVmConfig"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["wwn", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmfsAlreadyMounted,
    :schema_type => XSD::QName.new(NsVim25, "VmfsAlreadyMounted"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsMountFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmfsAmbiguousMount,
    :schema_type => XSD::QName.new(NsVim25, "VmfsAmbiguousMount"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsMountFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmfsMountFault,
    :schema_type => XSD::QName.new(NsVim25, "VmfsMountFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmotionInterfaceNotEnabled,
    :schema_type => XSD::QName.new(NsVim25, "VmotionInterfaceNotEnabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostPowerOpFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VolumeEditorError,
    :schema_type => XSD::QName.new(NsVim25, "VolumeEditorError"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::WakeOnLanNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "WakeOnLanNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::WakeOnLanNotSupportedByVmotionNIC,
    :schema_type => XSD::QName.new(NsVim25, "WakeOnLanNotSupportedByVmotionNIC"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostPowerOpFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::WillModifyConfigCpuRequirements,
    :schema_type => XSD::QName.new(NsVim25, "WillModifyConfigCpuRequirements"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostActiveDirectoryInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostActiveDirectoryInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDirectoryStoreInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["joinedDomain", "SOAP::SOAPString", [0, 1]],
      ["trustedDomain", "SOAP::SOAPString[]", [0, nil]],
      ["domainMembershipStatus", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostActiveDirectorySpec,
    :schema_type => XSD::QName.new(NsVim25, "HostActiveDirectorySpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["domainName", "SOAP::SOAPString", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostActiveDirectory,
    :schema_type => XSD::QName.new(NsVim25, "HostActiveDirectory"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostActiveDirectorySpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostActiveDirectory,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostActiveDirectory"),
    :schema_element => [
      ["hostActiveDirectory", ["VSphereCloud::HostActiveDirectory[]", XSD::QName.new(NsVim25, "HostActiveDirectory")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostAuthenticationManagerInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostAuthenticationManagerInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["authConfig", "VSphereCloud::HostAuthenticationStoreInfo[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostAuthenticationStoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostAuthenticationStoreInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostAuthenticationStoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostAuthenticationStoreInfo"),
    :schema_element => [
      ["hostAuthenticationStoreInfo", ["VSphereCloud::HostAuthenticationStoreInfo[]", XSD::QName.new(NsVim25, "HostAuthenticationStoreInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AutoStartDefaults,
    :schema_type => XSD::QName.new(NsVim25, "AutoStartDefaults"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["startDelay", "SOAP::SOAPInt", [0, 1]],
      ["stopDelay", "SOAP::SOAPInt", [0, 1]],
      ["waitForHeartbeat", "SOAP::SOAPBoolean", [0, 1]],
      ["stopAction", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AutoStartPowerInfo,
    :schema_type => XSD::QName.new(NsVim25, "AutoStartPowerInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["startOrder", "SOAP::SOAPInt"],
      ["startDelay", "SOAP::SOAPInt"],
      ["waitForHeartbeat", "VSphereCloud::AutoStartWaitHeartbeatSetting"],
      ["startAction", "SOAP::SOAPString"],
      ["stopDelay", "SOAP::SOAPInt"],
      ["stopAction", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfAutoStartPowerInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAutoStartPowerInfo"),
    :schema_element => [
      ["autoStartPowerInfo", ["VSphereCloud::AutoStartPowerInfo[]", XSD::QName.new(NsVim25, "AutoStartPowerInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostAutoStartManagerConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostAutoStartManagerConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["defaults", "VSphereCloud::AutoStartDefaults", [0, 1]],
      ["powerInfo", "VSphereCloud::AutoStartPowerInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostBootDeviceInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostBootDeviceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["bootDevices", "VSphereCloud::HostBootDevice[]", [0, nil]],
      ["currentBootDeviceKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostBootDevice,
    :schema_type => XSD::QName.new(NsVim25, "HostBootDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostBootDevice,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostBootDevice"),
    :schema_element => [
      ["hostBootDevice", ["VSphereCloud::HostBootDevice[]", XSD::QName.new(NsVim25, "HostBootDevice")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCapability,
    :schema_type => XSD::QName.new(NsVim25, "HostCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["recursiveResourcePoolsSupported", "SOAP::SOAPBoolean"],
      ["cpuMemoryResourceConfigurationSupported", "SOAP::SOAPBoolean"],
      ["rebootSupported", "SOAP::SOAPBoolean"],
      ["shutdownSupported", "SOAP::SOAPBoolean"],
      ["vmotionSupported", "SOAP::SOAPBoolean"],
      ["standbySupported", "SOAP::SOAPBoolean"],
      ["ipmiSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["maxSupportedVMs", "SOAP::SOAPInt", [0, 1]],
      ["maxRunningVMs", "SOAP::SOAPInt", [0, 1]],
      ["maxSupportedVcpus", "SOAP::SOAPInt", [0, 1]],
      ["datastorePrincipalSupported", "SOAP::SOAPBoolean"],
      ["sanSupported", "SOAP::SOAPBoolean"],
      ["nfsSupported", "SOAP::SOAPBoolean"],
      ["iscsiSupported", "SOAP::SOAPBoolean"],
      ["vlanTaggingSupported", "SOAP::SOAPBoolean"],
      ["nicTeamingSupported", "SOAP::SOAPBoolean"],
      ["highGuestMemSupported", "SOAP::SOAPBoolean"],
      ["maintenanceModeSupported", "SOAP::SOAPBoolean"],
      ["suspendedRelocateSupported", "SOAP::SOAPBoolean"],
      ["restrictedSnapshotRelocateSupported", "SOAP::SOAPBoolean"],
      ["perVmSwapFiles", "SOAP::SOAPBoolean"],
      ["localSwapDatastoreSupported", "SOAP::SOAPBoolean"],
      ["unsharedSwapVMotionSupported", "SOAP::SOAPBoolean"],
      ["backgroundSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["preAssignedPCIUnitNumbersSupported", "SOAP::SOAPBoolean"],
      ["screenshotSupported", "SOAP::SOAPBoolean"],
      ["scaledScreenshotSupported", "SOAP::SOAPBoolean"],
      ["storageVMotionSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmotionWithStorageVMotionSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["recordReplaySupported", "SOAP::SOAPBoolean", [0, 1]],
      ["ftSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["replayUnsupportedReason", "SOAP::SOAPString", [0, 1]],
      ["replayCompatibilityIssues", "SOAP::SOAPString[]", [0, nil]],
      ["ftCompatibilityIssues", "SOAP::SOAPString[]", [0, nil]],
      ["loginBySSLThumbprintSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["cloneFromSnapshotSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["deltaDiskBackingsSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["perVMNetworkTrafficShapingSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["tpmSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedCpuFeature", "VSphereCloud::HostCpuIdInfo[]", [0, nil]],
      ["virtualExecUsageSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["storageIORMSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2UnsupportedReason", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2UnsupportedReasonExtended", "SOAP::SOAPString", [0, 1]],
      ["vStorageCapable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConfigChange,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigChange"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["product", "VSphereCloud::AboutInfo"],
      ["hyperThread", "VSphereCloud::HostHyperThreadScheduleInfo", [0, 1]],
      ["consoleReservation", "VSphereCloud::ServiceConsoleReservationInfo", [0, 1]],
      ["virtualMachineReservation", "VSphereCloud::VirtualMachineMemoryReservationInfo", [0, 1]],
      ["storageDevice", "VSphereCloud::HostStorageDeviceInfo", [0, 1]],
      ["multipathState", "VSphereCloud::HostMultipathStateInfo", [0, 1]],
      ["fileSystemVolume", "VSphereCloud::HostFileSystemVolumeInfo", [0, 1]],
      ["systemFile", "SOAP::SOAPString[]", [0, nil]],
      ["network", "VSphereCloud::HostNetworkInfo", [0, 1]],
      ["vmotion", "VSphereCloud::HostVMotionInfo", [0, 1]],
      ["virtualNicManagerInfo", "VSphereCloud::HostVirtualNicManagerInfo", [0, 1]],
      ["capabilities", "VSphereCloud::HostNetCapabilities", [0, 1]],
      ["datastoreCapabilities", "VSphereCloud::HostDatastoreSystemCapabilities", [0, 1]],
      ["offloadCapabilities", "VSphereCloud::HostNetOffloadCapabilities", [0, 1]],
      ["service", "VSphereCloud::HostServiceInfo", [0, 1]],
      ["firewall", "VSphereCloud::HostFirewallInfo", [0, 1]],
      ["autoStart", "VSphereCloud::HostAutoStartManagerConfig", [0, 1]],
      ["activeDiagnosticPartition", "VSphereCloud::HostDiagnosticPartition", [0, 1]],
      ["option", "VSphereCloud::OptionValue[]", [0, nil]],
      ["optionDef", "VSphereCloud::OptionDef[]", [0, nil]],
      ["datastorePrincipal", "SOAP::SOAPString", [0, 1]],
      ["localSwapDatastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["systemResources", "VSphereCloud::HostSystemResourceInfo", [0, 1]],
      ["dateTimeInfo", "VSphereCloud::HostDateTimeInfo", [0, 1]],
      ["flags", "VSphereCloud::HostFlagInfo", [0, 1]],
      ["adminDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["ipmi", "VSphereCloud::HostIpmiInfo", [0, 1]],
      ["sslThumbprintInfo", "VSphereCloud::HostSslThumbprintInfo", [0, 1]],
      ["pciPassthruInfo", "VSphereCloud::HostPciPassthruInfo[]", [0, nil]],
      ["authenticationManagerInfo", "VSphereCloud::HostAuthenticationManagerInfo", [0, 1]],
      ["featureVersion", "VSphereCloud::HostFeatureVersionInfo[]", [0, nil]],
      ["powerSystemCapability", "VSphereCloud::PowerSystemCapability", [0, 1]],
      ["powerSystemInfo", "VSphereCloud::PowerSystemInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConfigManager,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigManager"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["cpuScheduler", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["datastoreSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["memoryManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["storageSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["networkSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["vmotionSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["virtualNicManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["serviceSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["firewallSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["advancedOption", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["diagnosticSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["autoStartManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["snmpSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["dateTimeSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["patchManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["bootDeviceSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["firmwareSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["healthStatusSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["pciPassthruSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["licenseManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["kernelModuleSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["authenticationManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["powerSystem", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["nasDatastore", "VSphereCloud::HostNasVolumeConfig[]", [0, nil]],
      ["network", "VSphereCloud::HostNetworkConfig", [0, 1]],
      ["nicTypeSelection", "VSphereCloud::HostVirtualNicManagerNicTypeSelection[]", [0, nil]],
      ["service", "VSphereCloud::HostServiceConfig[]", [0, nil]],
      ["firewall", "VSphereCloud::HostFirewallConfig", [0, 1]],
      ["option", "VSphereCloud::OptionValue[]", [0, nil]],
      ["datastorePrincipal", "SOAP::SOAPString", [0, 1]],
      ["datastorePrincipalPasswd", "SOAP::SOAPString", [0, 1]],
      ["datetime", "VSphereCloud::HostDateTimeConfig", [0, 1]],
      ["storageDevice", "VSphereCloud::HostStorageDeviceInfo", [0, 1]],
      ["license", "VSphereCloud::HostLicenseSpec", [0, 1]],
      ["security", "VSphereCloud::HostSecuritySpec", [0, 1]],
      ["userAccount", "VSphereCloud::HostAccountSpec[]", [0, nil]],
      ["usergroupAccount", "VSphereCloud::HostAccountSpec[]", [0, nil]],
      ["memory", "VSphereCloud::HostMemorySpec", [0, 1]],
      ["activeDirectory", "VSphereCloud::HostActiveDirectory[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConnectInfoNetworkInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostConnectInfoNetworkInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["summary", "VSphereCloud::NetworkSummary"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostConnectInfoNetworkInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostConnectInfoNetworkInfo"),
    :schema_element => [
      ["hostConnectInfoNetworkInfo", ["VSphereCloud::HostConnectInfoNetworkInfo[]", XSD::QName.new(NsVim25, "HostConnectInfoNetworkInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNewNetworkConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostNewNetworkConnectInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectInfoNetworkInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["summary", "VSphereCloud::NetworkSummary"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDatastoreConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDatastoreConnectInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["summary", "VSphereCloud::DatastoreSummary"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostDatastoreConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDatastoreConnectInfo"),
    :schema_element => [
      ["hostDatastoreConnectInfo", ["VSphereCloud::HostDatastoreConnectInfo[]", XSD::QName.new(NsVim25, "HostDatastoreConnectInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDatastoreExistsConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDatastoreExistsConnectInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDatastoreConnectInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["summary", "VSphereCloud::DatastoreSummary"],
      ["newDatastoreName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDatastoreNameConflictConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDatastoreNameConflictConnectInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDatastoreConnectInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["summary", "VSphereCloud::DatastoreSummary"],
      ["newDatastoreName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostLicenseConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostLicenseConnectInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["license", "VSphereCloud::LicenseManagerLicenseInfo"],
      ["evaluation", "VSphereCloud::LicenseManagerEvaluationInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostConnectInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["serverIp", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::HostListSummary"],
      ["vm", "VSphereCloud::VirtualMachineSummary[]", [0, nil]],
      ["vimAccountNameRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["clusterSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["network", "VSphereCloud::HostConnectInfoNetworkInfo[]", [0, nil]],
      ["datastore", "VSphereCloud::HostDatastoreConnectInfo[]", [0, nil]],
      ["license", "VSphereCloud::HostLicenseConnectInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConnectSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostConnectSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["vmFolder", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean"],
      ["vimAccountName", "SOAP::SOAPString", [0, 1]],
      ["vimAccountPassword", "SOAP::SOAPString", [0, 1]],
      ["managementIp", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCpuIdInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostCpuIdInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["eax", "SOAP::SOAPString", [0, 1]],
      ["ebx", "SOAP::SOAPString", [0, 1]],
      ["ecx", "SOAP::SOAPString", [0, 1]],
      ["edx", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostCpuIdInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostCpuIdInfo"),
    :schema_element => [
      ["hostCpuIdInfo", ["VSphereCloud::HostCpuIdInfo[]", XSD::QName.new(NsVim25, "HostCpuIdInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostHyperThreadScheduleInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostHyperThreadScheduleInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["available", "SOAP::SOAPBoolean"],
      ["active", "SOAP::SOAPBoolean"],
      ["config", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FileQueryFlags,
    :schema_type => XSD::QName.new(NsVim25, "FileQueryFlags"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileType", "SOAP::SOAPBoolean"],
      ["fileSize", "SOAP::SOAPBoolean"],
      ["modification", "SOAP::SOAPBoolean"],
      ["fileOwner", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FileInfo,
    :schema_type => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfFileInfo"),
    :schema_element => [
      ["fileInfo", ["VSphereCloud::FileInfo[]", XSD::QName.new(NsVim25, "FileInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FileQuery,
    :schema_type => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfFileQuery"),
    :schema_element => [
      ["fileQuery", ["VSphereCloud::FileQuery[]", XSD::QName.new(NsVim25, "FileQuery")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmConfigFileQueryFilter,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigFileQueryFilter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["matchConfigVersion", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmConfigFileQueryFlags,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigFileQueryFlags"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmConfigFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["filter", "VSphereCloud::VmConfigFileQueryFilter", [0, 1]],
      ["details", "VSphereCloud::VmConfigFileQueryFlags", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TemplateConfigFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "TemplateConfigFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["filter", "VSphereCloud::VmConfigFileQueryFilter", [0, 1]],
      ["details", "VSphereCloud::VmConfigFileQueryFlags", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDiskFileQueryFilter,
    :schema_type => XSD::QName.new(NsVim25, "VmDiskFileQueryFilter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString[]", [0, nil]],
      ["matchHardwareVersion", "SOAP::SOAPInt[]", [0, nil]],
      ["controllerType", "SOAP::SOAPString[]", [0, nil]],
      ["thin", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDiskFileQueryFlags,
    :schema_type => XSD::QName.new(NsVim25, "VmDiskFileQueryFlags"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPBoolean"],
      ["capacityKb", "SOAP::SOAPBoolean"],
      ["hardwareVersion", "SOAP::SOAPBoolean"],
      ["controllerType", "SOAP::SOAPBoolean", [0, 1]],
      ["diskExtents", "SOAP::SOAPBoolean", [0, 1]],
      ["thin", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDiskFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "VmDiskFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["filter", "VSphereCloud::VmDiskFileQueryFilter", [0, 1]],
      ["details", "VSphereCloud::VmDiskFileQueryFlags", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FolderFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "FolderFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmSnapshotFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "VmSnapshotFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IsoImageFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "IsoImageFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FloppyImageFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "FloppyImageFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmNvramFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "VmNvramFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmLogFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "VmLogFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmConfigFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TemplateConfigFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "TemplateConfigFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDiskFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "VmDiskFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]],
      ["diskType", "SOAP::SOAPString", [0, 1]],
      ["capacityKb", "SOAP::SOAPLong", [0, 1]],
      ["hardwareVersion", "SOAP::SOAPInt", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["diskExtents", "SOAP::SOAPString[]", [0, nil]],
      ["thin", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FolderFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "FolderFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmSnapshotFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "VmSnapshotFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IsoImageFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "IsoImageFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FloppyImageFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "FloppyImageFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmNvramFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "VmNvramFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmLogFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "VmLogFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDatastoreBrowserSearchSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostDatastoreBrowserSearchSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["query", "VSphereCloud::FileQuery[]", [0, nil]],
      ["details", "VSphereCloud::FileQueryFlags", [0, 1]],
      ["searchCaseInsensitive", "SOAP::SOAPBoolean", [0, 1]],
      ["matchPattern", "SOAP::SOAPString[]", [0, nil]],
      ["sortFoldersFirst", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDatastoreBrowserSearchResults,
    :schema_type => XSD::QName.new(NsVim25, "HostDatastoreBrowserSearchResults"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["folderPath", "SOAP::SOAPString", [0, 1]],
      ["file", "VSphereCloud::FileInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostDatastoreBrowserSearchResults,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDatastoreBrowserSearchResults"),
    :schema_element => [
      ["hostDatastoreBrowserSearchResults", ["VSphereCloud::HostDatastoreBrowserSearchResults[]", XSD::QName.new(NsVim25, "HostDatastoreBrowserSearchResults")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDatastoreSystemCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "HostDatastoreSystemCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["nfsMountCreationRequired", "SOAP::SOAPBoolean"],
      ["nfsMountCreationSupported", "SOAP::SOAPBoolean"],
      ["localDatastoreSupported", "SOAP::SOAPBoolean"],
      ["vmfsExtentExpansionSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmfsDatastoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]],
      ["vmfs", "VSphereCloud::HostVmfsVolume", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NasDatastoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "NasDatastoreInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]],
      ["nas", "VSphereCloud::HostNasVolume", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LocalDatastoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "LocalDatastoreInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]],
      ["path", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmfsDatastoreSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmfsDatastoreCreateSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreCreateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsDatastoreSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"],
      ["partition", "VSphereCloud::HostDiskPartitionSpec"],
      ["vmfs", "VSphereCloud::HostVmfsSpec"],
      ["extent", "VSphereCloud::HostScsiDiskPartition[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmfsDatastoreExtendSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreExtendSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsDatastoreSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"],
      ["partition", "VSphereCloud::HostDiskPartitionSpec"],
      ["extent", "VSphereCloud::HostScsiDiskPartition[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmfsDatastoreExpandSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreExpandSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsDatastoreSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"],
      ["partition", "VSphereCloud::HostDiskPartitionSpec"],
      ["extent", "VSphereCloud::HostScsiDiskPartition"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmfsDatastoreBaseOption,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreBaseOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["layout", "VSphereCloud::HostDiskPartitionLayout"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmfsDatastoreSingleExtentOption,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreSingleExtentOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsDatastoreBaseOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["layout", "VSphereCloud::HostDiskPartitionLayout"],
      ["vmfsExtent", "VSphereCloud::HostDiskPartitionBlockRange"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmfsDatastoreAllExtentOption,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreAllExtentOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsDatastoreSingleExtentOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["layout", "VSphereCloud::HostDiskPartitionLayout"],
      ["vmfsExtent", "VSphereCloud::HostDiskPartitionBlockRange"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmfsDatastoreMultipleExtentOption,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreMultipleExtentOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsDatastoreBaseOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["layout", "VSphereCloud::HostDiskPartitionLayout"],
      ["vmfsExtent", "VSphereCloud::HostDiskPartitionBlockRange[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmfsDatastoreOption,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["info", "VSphereCloud::VmfsDatastoreBaseOption"],
      ["spec", "VSphereCloud::VmfsDatastoreSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVmfsDatastoreOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVmfsDatastoreOption"),
    :schema_element => [
      ["vmfsDatastoreOption", ["VSphereCloud::VmfsDatastoreOption[]", XSD::QName.new(NsVim25, "VmfsDatastoreOption")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDateTimeConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostDateTimeConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["timeZone", "SOAP::SOAPString", [0, 1]],
      ["ntpConfig", "VSphereCloud::HostNtpConfig", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDateTimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDateTimeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["timeZone", "VSphereCloud::HostDateTimeSystemTimeZone"],
      ["ntpConfig", "VSphereCloud::HostNtpConfig", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDateTimeSystemTimeZone,
    :schema_type => XSD::QName.new(NsVim25, "HostDateTimeSystemTimeZone"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["gmtOffset", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostDateTimeSystemTimeZone,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDateTimeSystemTimeZone"),
    :schema_element => [
      ["hostDateTimeSystemTimeZone", ["VSphereCloud::HostDateTimeSystemTimeZone[]", XSD::QName.new(NsVim25, "HostDateTimeSystemTimeZone")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDevice,
    :schema_type => XSD::QName.new(NsVim25, "HostDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDhcpServiceSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostDhcpServiceSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["virtualSwitch", "SOAP::SOAPString"],
      ["defaultLeaseDuration", "SOAP::SOAPInt"],
      ["leaseBeginIp", "SOAP::SOAPString"],
      ["leaseEndIp", "SOAP::SOAPString"],
      ["maxLeaseDuration", "SOAP::SOAPInt"],
      ["unlimitedLease", "SOAP::SOAPBoolean"],
      ["ipSubnetAddr", "SOAP::SOAPString"],
      ["ipSubnetMask", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDhcpServiceConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostDhcpServiceConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostDhcpServiceSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostDhcpServiceConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDhcpServiceConfig"),
    :schema_element => [
      ["hostDhcpServiceConfig", ["VSphereCloud::HostDhcpServiceConfig[]", XSD::QName.new(NsVim25, "HostDhcpServiceConfig")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDhcpService,
    :schema_type => XSD::QName.new(NsVim25, "HostDhcpService"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostDhcpServiceSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostDhcpService,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDhcpService"),
    :schema_element => [
      ["hostDhcpService", ["VSphereCloud::HostDhcpService[]", XSD::QName.new(NsVim25, "HostDhcpService")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiagnosticPartitionCreateOption,
    :schema_type => XSD::QName.new(NsVim25, "HostDiagnosticPartitionCreateOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"],
      ["disk", "VSphereCloud::HostScsiDisk"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostDiagnosticPartitionCreateOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDiagnosticPartitionCreateOption"),
    :schema_element => [
      ["hostDiagnosticPartitionCreateOption", ["VSphereCloud::HostDiagnosticPartitionCreateOption[]", XSD::QName.new(NsVim25, "HostDiagnosticPartitionCreateOption")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiagnosticPartitionCreateSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostDiagnosticPartitionCreateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"],
      ["id", "VSphereCloud::HostScsiDiskPartition"],
      ["partition", "VSphereCloud::HostDiskPartitionSpec"],
      ["active", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiagnosticPartitionCreateDescription,
    :schema_type => XSD::QName.new(NsVim25, "HostDiagnosticPartitionCreateDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["layout", "VSphereCloud::HostDiskPartitionLayout"],
      ["diskUuid", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostDiagnosticPartitionCreateSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiagnosticPartition,
    :schema_type => XSD::QName.new(NsVim25, "HostDiagnosticPartition"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"],
      ["slots", "SOAP::SOAPInt"],
      ["id", "VSphereCloud::HostScsiDiskPartition"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostDiagnosticPartition,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDiagnosticPartition"),
    :schema_element => [
      ["hostDiagnosticPartition", ["VSphereCloud::HostDiagnosticPartition[]", XSD::QName.new(NsVim25, "HostDiagnosticPartition")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDirectoryStoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDirectoryStoreInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostAuthenticationStoreInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiskDimensionsChs,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskDimensionsChs"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["cylinder", "SOAP::SOAPLong"],
      ["head", "SOAP::SOAPInt"],
      ["sector", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiskDimensionsLba,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskDimensionsLba"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["blockSize", "SOAP::SOAPInt"],
      ["block", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiskDimensions,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskDimensions"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiskPartitionAttributes,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskPartitionAttributes"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["partition", "SOAP::SOAPInt"],
      ["startSector", "SOAP::SOAPLong"],
      ["endSector", "SOAP::SOAPLong"],
      ["type", "SOAP::SOAPString"],
      ["logical", "SOAP::SOAPBoolean"],
      ["attributes", "SOAP::SOAPByte"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostDiskPartitionAttributes,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDiskPartitionAttributes"),
    :schema_element => [
      ["hostDiskPartitionAttributes", ["VSphereCloud::HostDiskPartitionAttributes[]", XSD::QName.new(NsVim25, "HostDiskPartitionAttributes")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiskPartitionBlockRange,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskPartitionBlockRange"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["partition", "SOAP::SOAPInt", [0, 1]],
      ["type", "SOAP::SOAPString"],
      ["start", "VSphereCloud::HostDiskDimensionsLba"],
      ["v_end", ["VSphereCloud::HostDiskDimensionsLba", XSD::QName.new(NsVim25, "end")]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostDiskPartitionBlockRange,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDiskPartitionBlockRange"),
    :schema_element => [
      ["hostDiskPartitionBlockRange", ["VSphereCloud::HostDiskPartitionBlockRange[]", XSD::QName.new(NsVim25, "HostDiskPartitionBlockRange")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiskPartitionSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskPartitionSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["chs", "VSphereCloud::HostDiskDimensionsChs", [0, 1]],
      ["totalSectors", "SOAP::SOAPLong", [0, 1]],
      ["partition", "VSphereCloud::HostDiskPartitionAttributes[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiskPartitionLayout,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskPartitionLayout"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["total", "VSphereCloud::HostDiskDimensionsLba", [0, 1]],
      ["partition", "VSphereCloud::HostDiskPartitionBlockRange[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiskPartitionInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskPartitionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostDiskPartitionSpec"],
      ["layout", "VSphereCloud::HostDiskPartitionLayout"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostDiskPartitionInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDiskPartitionInfo"),
    :schema_element => [
      ["hostDiskPartitionInfo", ["VSphereCloud::HostDiskPartitionInfo[]", XSD::QName.new(NsVim25, "HostDiskPartitionInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDnsConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostDnsConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["virtualNicDevice", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString"],
      ["domainName", "SOAP::SOAPString"],
      ["address", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDnsConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostDnsConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDnsConfig"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["virtualNicDevice", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString"],
      ["domainName", "SOAP::SOAPString"],
      ["address", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]],
      ["virtualNicConnection", "VSphereCloud::HostVirtualNicConnection", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFeatureVersionInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostFeatureVersionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostFeatureVersionInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostFeatureVersionInfo"),
    :schema_element => [
      ["hostFeatureVersionInfo", ["VSphereCloud::HostFeatureVersionInfo[]", XSD::QName.new(NsVim25, "HostFeatureVersionInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ModeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ModeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["browse", "SOAP::SOAPString", [0, 1]],
      ["read", "SOAP::SOAPString"],
      ["modify", "SOAP::SOAPString"],
      ["use", "SOAP::SOAPString"],
      ["admin", "SOAP::SOAPString", [0, 1]],
      ["full", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFileAccess,
    :schema_type => XSD::QName.new(NsVim25, "HostFileAccess"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["who", "SOAP::SOAPString"],
      ["what", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFileSystemVolumeInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostFileSystemVolumeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["volumeTypeList", "SOAP::SOAPString[]", [0, nil]],
      ["mountInfo", "VSphereCloud::HostFileSystemMountInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFileSystemMountInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostFileSystemMountInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["mountInfo", "VSphereCloud::HostMountInfo"],
      ["volume", "VSphereCloud::HostFileSystemVolume"],
      ["vStorageSupport", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostFileSystemMountInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostFileSystemMountInfo"),
    :schema_element => [
      ["hostFileSystemMountInfo", ["VSphereCloud::HostFileSystemMountInfo[]", XSD::QName.new(NsVim25, "HostFileSystemMountInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFileSystemVolume,
    :schema_type => XSD::QName.new(NsVim25, "HostFileSystemVolume"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNasVolumeSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostNasVolumeSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"],
      ["localPath", "SOAP::SOAPString"],
      ["accessMode", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNasVolumeConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostNasVolumeConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["spec", "VSphereCloud::HostNasVolumeSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostNasVolumeConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostNasVolumeConfig"),
    :schema_element => [
      ["hostNasVolumeConfig", ["VSphereCloud::HostNasVolumeConfig[]", XSD::QName.new(NsVim25, "HostNasVolumeConfig")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNasVolume,
    :schema_type => XSD::QName.new(NsVim25, "HostNasVolume"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostFileSystemVolume"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostLocalFileSystemVolumeSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostLocalFileSystemVolumeSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["localPath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostLocalFileSystemVolume,
    :schema_type => XSD::QName.new(NsVim25, "HostLocalFileSystemVolume"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostFileSystemVolume"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFirewallConfigRuleSetConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallConfigRuleSetConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["rulesetId", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostFirewallConfigRuleSetConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostFirewallConfigRuleSetConfig"),
    :schema_element => [
      ["hostFirewallConfigRuleSetConfig", ["VSphereCloud::HostFirewallConfigRuleSetConfig[]", XSD::QName.new(NsVim25, "HostFirewallConfigRuleSetConfig")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFirewallConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["rule", "VSphereCloud::HostFirewallConfigRuleSetConfig[]", [0, nil]],
      ["defaultBlockingPolicy", "VSphereCloud::HostFirewallDefaultPolicy"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFirewallDefaultPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallDefaultPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["incomingBlocked", "SOAP::SOAPBoolean", [0, 1]],
      ["outgoingBlocked", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFirewallInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["defaultPolicy", "VSphereCloud::HostFirewallDefaultPolicy"],
      ["ruleset", "VSphereCloud::HostFirewallRuleset[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFlagInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostFlagInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["backgroundSnapshotsEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostForceMountedInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostForceMountedInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["persist", "SOAP::SOAPBoolean"],
      ["mounted", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostHardwareInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostHardwareInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["systemInfo", "VSphereCloud::HostSystemInfo"],
      ["cpuPowerManagementInfo", "VSphereCloud::HostCpuPowerManagementInfo", [0, 1]],
      ["cpuInfo", "VSphereCloud::HostCpuInfo"],
      ["cpuPkg", "VSphereCloud::HostCpuPackage[]", [1, nil]],
      ["memorySize", "SOAP::SOAPLong"],
      ["numaInfo", "VSphereCloud::HostNumaInfo", [0, 1]],
      ["pciDevice", "VSphereCloud::HostPciDevice[]", [0, nil]],
      ["cpuFeature", "VSphereCloud::HostCpuIdInfo[]", [0, nil]],
      ["biosInfo", "VSphereCloud::HostBIOSInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostSystemInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostSystemInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vendor", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["otherIdentifyingInfo", "VSphereCloud::HostSystemIdentificationInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCpuPowerManagementInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostCpuPowerManagementInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["currentPolicy", "SOAP::SOAPString", [0, 1]],
      ["hardwareSupport", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCpuInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostCpuInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["numCpuPackages", "SOAP::SOAPShort"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["hz", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCpuPackage,
    :schema_type => XSD::QName.new(NsVim25, "HostCpuPackage"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["index", "SOAP::SOAPShort"],
      ["vendor", "SOAP::SOAPString"],
      ["hz", "SOAP::SOAPLong"],
      ["busHz", "SOAP::SOAPLong"],
      ["description", "SOAP::SOAPString"],
      ["threadId", "SOAP::SOAPShort[]", [1, nil]],
      ["cpuFeature", "VSphereCloud::HostCpuIdInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostCpuPackage,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostCpuPackage"),
    :schema_element => [
      ["hostCpuPackage", ["VSphereCloud::HostCpuPackage[]", XSD::QName.new(NsVim25, "HostCpuPackage")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNumaInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostNumaInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["numNodes", "SOAP::SOAPInt"],
      ["numaNode", "VSphereCloud::HostNumaNode[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNumaNode,
    :schema_type => XSD::QName.new(NsVim25, "HostNumaNode"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["typeId", "SOAP::SOAPByte"],
      ["cpuID", "SOAP::SOAPShort[]", [1, nil]],
      ["memoryRangeBegin", "SOAP::SOAPLong"],
      ["memoryRangeLength", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostNumaNode,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostNumaNode"),
    :schema_element => [
      ["hostNumaNode", ["VSphereCloud::HostNumaNode[]", XSD::QName.new(NsVim25, "HostNumaNode")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostBIOSInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostBIOSInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["biosVersion", "SOAP::SOAPString", [0, 1]],
      ["releaseDate", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostHardwareElementInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostHardwareElementInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["status", "VSphereCloud::ElementDescription"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostHardwareElementInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostHardwareElementInfo"),
    :schema_element => [
      ["hostHardwareElementInfo", ["VSphereCloud::HostHardwareElementInfo[]", XSD::QName.new(NsVim25, "HostHardwareElementInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostStorageOperationalInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostStorageOperationalInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["property", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostStorageOperationalInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostStorageOperationalInfo"),
    :schema_element => [
      ["hostStorageOperationalInfo", ["VSphereCloud::HostStorageOperationalInfo[]", XSD::QName.new(NsVim25, "HostStorageOperationalInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostStorageElementInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostStorageElementInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostHardwareElementInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["status", "VSphereCloud::ElementDescription"],
      ["operationalInfo", "VSphereCloud::HostStorageOperationalInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostStorageElementInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostStorageElementInfo"),
    :schema_element => [
      ["hostStorageElementInfo", ["VSphereCloud::HostStorageElementInfo[]", XSD::QName.new(NsVim25, "HostStorageElementInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostHardwareStatusInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostHardwareStatusInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["memoryStatusInfo", "VSphereCloud::HostHardwareElementInfo[]", [0, nil]],
      ["cpuStatusInfo", "VSphereCloud::HostHardwareElementInfo[]", [0, nil]],
      ["storageStatusInfo", "VSphereCloud::HostStorageElementInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HealthSystemRuntime,
    :schema_type => XSD::QName.new(NsVim25, "HealthSystemRuntime"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["systemHealthInfo", "VSphereCloud::HostSystemHealthInfo", [0, 1]],
      ["hardwareStatusInfo", "VSphereCloud::HostHardwareStatusInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostHostBusAdapter,
    :schema_type => XSD::QName.new(NsVim25, "HostHostBusAdapter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostHostBusAdapter,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostHostBusAdapter"),
    :schema_element => [
      ["hostHostBusAdapter", ["VSphereCloud::HostHostBusAdapter[]", XSD::QName.new(NsVim25, "HostHostBusAdapter")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostParallelScsiHba,
    :schema_type => XSD::QName.new(NsVim25, "HostParallelScsiHba"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostHostBusAdapter"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostBlockHba,
    :schema_type => XSD::QName.new(NsVim25, "HostBlockHba"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostHostBusAdapter"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFibreChannelHba,
    :schema_type => XSD::QName.new(NsVim25, "HostFibreChannelHba"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostHostBusAdapter"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]],
      ["portWorldWideName", "SOAP::SOAPLong"],
      ["nodeWorldWideName", "SOAP::SOAPLong"],
      ["portType", "VSphereCloud::FibreChannelPortType"],
      ["speed", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaParamValue,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaParamValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "OptionValue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", nil, [0, 1]],
      ["isInherited", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostInternetScsiHbaParamValue,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostInternetScsiHbaParamValue"),
    :schema_element => [
      ["hostInternetScsiHbaParamValue", ["VSphereCloud::HostInternetScsiHbaParamValue[]", XSD::QName.new(NsVim25, "HostInternetScsiHbaParamValue")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaDiscoveryCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaDiscoveryCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["iSnsDiscoverySettable", "SOAP::SOAPBoolean"],
      ["slpDiscoverySettable", "SOAP::SOAPBoolean"],
      ["staticTargetDiscoverySettable", "SOAP::SOAPBoolean"],
      ["sendTargetsDiscoverySettable", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaDiscoveryProperties,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaDiscoveryProperties"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["iSnsDiscoveryEnabled", "SOAP::SOAPBoolean"],
      ["iSnsDiscoveryMethod", "SOAP::SOAPString", [0, 1]],
      ["iSnsHost", "SOAP::SOAPString", [0, 1]],
      ["slpDiscoveryEnabled", "SOAP::SOAPBoolean"],
      ["slpDiscoveryMethod", "SOAP::SOAPString", [0, 1]],
      ["slpHost", "SOAP::SOAPString", [0, 1]],
      ["staticTargetDiscoveryEnabled", "SOAP::SOAPBoolean"],
      ["sendTargetsDiscoveryEnabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaAuthenticationCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaAuthenticationCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["chapAuthSettable", "SOAP::SOAPBoolean"],
      ["krb5AuthSettable", "SOAP::SOAPBoolean"],
      ["srpAuthSettable", "SOAP::SOAPBoolean"],
      ["spkmAuthSettable", "SOAP::SOAPBoolean"],
      ["mutualChapSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetChapSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetMutualChapSettable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaAuthenticationProperties,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaAuthenticationProperties"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["chapAuthEnabled", "SOAP::SOAPBoolean"],
      ["chapName", "SOAP::SOAPString", [0, 1]],
      ["chapSecret", "SOAP::SOAPString", [0, 1]],
      ["chapAuthenticationType", "SOAP::SOAPString", [0, 1]],
      ["chapInherited", "SOAP::SOAPBoolean", [0, 1]],
      ["mutualChapName", "SOAP::SOAPString", [0, 1]],
      ["mutualChapSecret", "SOAP::SOAPString", [0, 1]],
      ["mutualChapAuthenticationType", "SOAP::SOAPString", [0, 1]],
      ["mutualChapInherited", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaDigestCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaDigestCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["headerDigestSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["dataDigestSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetHeaderDigestSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetDataDigestSettable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaDigestProperties,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaDigestProperties"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["headerDigestType", "SOAP::SOAPString", [0, 1]],
      ["headerDigestInherited", "SOAP::SOAPBoolean", [0, 1]],
      ["dataDigestType", "SOAP::SOAPString", [0, 1]],
      ["dataDigestInherited", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaIPCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaIPCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["addressSettable", "SOAP::SOAPBoolean"],
      ["ipConfigurationMethodSettable", "SOAP::SOAPBoolean"],
      ["subnetMaskSettable", "SOAP::SOAPBoolean"],
      ["defaultGatewaySettable", "SOAP::SOAPBoolean"],
      ["primaryDnsServerAddressSettable", "SOAP::SOAPBoolean"],
      ["alternateDnsServerAddressSettable", "SOAP::SOAPBoolean"],
      ["ipv6Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["arpRedirectSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["mtuSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["hostNameAsTargetAddress", "SOAP::SOAPBoolean", [0, 1]],
      ["nameAliasSettable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaIPProperties,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaIPProperties"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["mac", "SOAP::SOAPString", [0, 1]],
      ["address", "SOAP::SOAPString", [0, 1]],
      ["dhcpConfigurationEnabled", "SOAP::SOAPBoolean"],
      ["subnetMask", "SOAP::SOAPString", [0, 1]],
      ["defaultGateway", "SOAP::SOAPString", [0, 1]],
      ["primaryDnsServerAddress", "SOAP::SOAPString", [0, 1]],
      ["alternateDnsServerAddress", "SOAP::SOAPString", [0, 1]],
      ["ipv6Address", "SOAP::SOAPString", [0, 1]],
      ["ipv6SubnetMask", "SOAP::SOAPString", [0, 1]],
      ["ipv6DefaultGateway", "SOAP::SOAPString", [0, 1]],
      ["arpRedirectEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["jumboFramesEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaSendTarget,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaSendTarget"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["address", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["authenticationProperties", "VSphereCloud::HostInternetScsiHbaAuthenticationProperties", [0, 1]],
      ["digestProperties", "VSphereCloud::HostInternetScsiHbaDigestProperties", [0, 1]],
      ["supportedAdvancedOptions", "VSphereCloud::OptionDef[]", [0, nil]],
      ["advancedOptions", "VSphereCloud::HostInternetScsiHbaParamValue[]", [0, nil]],
      ["parent", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostInternetScsiHbaSendTarget,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostInternetScsiHbaSendTarget"),
    :schema_element => [
      ["hostInternetScsiHbaSendTarget", ["VSphereCloud::HostInternetScsiHbaSendTarget[]", XSD::QName.new(NsVim25, "HostInternetScsiHbaSendTarget")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaStaticTarget,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaStaticTarget"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["address", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["iScsiName", "SOAP::SOAPString"],
      ["authenticationProperties", "VSphereCloud::HostInternetScsiHbaAuthenticationProperties", [0, 1]],
      ["digestProperties", "VSphereCloud::HostInternetScsiHbaDigestProperties", [0, 1]],
      ["supportedAdvancedOptions", "VSphereCloud::OptionDef[]", [0, nil]],
      ["advancedOptions", "VSphereCloud::HostInternetScsiHbaParamValue[]", [0, nil]],
      ["parent", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostInternetScsiHbaStaticTarget,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostInternetScsiHbaStaticTarget"),
    :schema_element => [
      ["hostInternetScsiHbaStaticTarget", ["VSphereCloud::HostInternetScsiHbaStaticTarget[]", XSD::QName.new(NsVim25, "HostInternetScsiHbaStaticTarget")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaTargetSet,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaTargetSet"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["staticTargets", "VSphereCloud::HostInternetScsiHbaStaticTarget[]", [0, nil]],
      ["sendTargets", "VSphereCloud::HostInternetScsiHbaSendTarget[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiHba,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHba"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostHostBusAdapter"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]],
      ["isSoftwareBased", "SOAP::SOAPBoolean"],
      ["discoveryCapabilities", "VSphereCloud::HostInternetScsiHbaDiscoveryCapabilities"],
      ["discoveryProperties", "VSphereCloud::HostInternetScsiHbaDiscoveryProperties"],
      ["authenticationCapabilities", "VSphereCloud::HostInternetScsiHbaAuthenticationCapabilities"],
      ["authenticationProperties", "VSphereCloud::HostInternetScsiHbaAuthenticationProperties"],
      ["digestCapabilities", "VSphereCloud::HostInternetScsiHbaDigestCapabilities", [0, 1]],
      ["digestProperties", "VSphereCloud::HostInternetScsiHbaDigestProperties", [0, 1]],
      ["ipCapabilities", "VSphereCloud::HostInternetScsiHbaIPCapabilities"],
      ["ipProperties", "VSphereCloud::HostInternetScsiHbaIPProperties"],
      ["supportedAdvancedOptions", "VSphereCloud::OptionDef[]", [0, nil]],
      ["advancedOptions", "VSphereCloud::HostInternetScsiHbaParamValue[]", [0, nil]],
      ["iScsiName", "SOAP::SOAPString"],
      ["iScsiAlias", "SOAP::SOAPString", [0, 1]],
      ["configuredSendTarget", "VSphereCloud::HostInternetScsiHbaSendTarget[]", [0, nil]],
      ["configuredStaticTarget", "VSphereCloud::HostInternetScsiHbaStaticTarget[]", [0, nil]],
      ["maxSpeedMb", "SOAP::SOAPInt", [0, 1]],
      ["currentSpeedMb", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostProxySwitchSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostProxySwitchSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["backing", "VSphereCloud::DistributedVirtualSwitchHostMemberBacking", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostProxySwitchConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostProxySwitchConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostProxySwitchSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostProxySwitchConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostProxySwitchConfig"),
    :schema_element => [
      ["hostProxySwitchConfig", ["VSphereCloud::HostProxySwitchConfig[]", XSD::QName.new(NsVim25, "HostProxySwitchConfig")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostProxySwitch,
    :schema_type => XSD::QName.new(NsVim25, "HostProxySwitch"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dvsUuid", "SOAP::SOAPString"],
      ["dvsName", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["numPortsAvailable", "SOAP::SOAPInt"],
      ["uplinkPort", "VSphereCloud::KeyValue[]", [0, nil]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["pnic", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostProxySwitchSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostProxySwitch,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostProxySwitch"),
    :schema_element => [
      ["hostProxySwitch", ["VSphereCloud::HostProxySwitch[]", XSD::QName.new(NsVim25, "HostProxySwitch")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIpConfigIpV6Address,
    :schema_type => XSD::QName.new(NsVim25, "HostIpConfigIpV6Address"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["origin", "SOAP::SOAPString", [0, 1]],
      ["dadState", "SOAP::SOAPString", [0, 1]],
      ["lifetime", "SOAP::SOAPDateTime", [0, 1]],
      ["operation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostIpConfigIpV6Address,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostIpConfigIpV6Address"),
    :schema_element => [
      ["hostIpConfigIpV6Address", ["VSphereCloud::HostIpConfigIpV6Address[]", XSD::QName.new(NsVim25, "HostIpConfigIpV6Address")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIpConfigIpV6AddressConfiguration,
    :schema_type => XSD::QName.new(NsVim25, "HostIpConfigIpV6AddressConfiguration"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipV6Address", "VSphereCloud::HostIpConfigIpV6Address[]", [0, nil]],
      ["autoConfigurationEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["dhcpV6Enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIpConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostIpConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["subnetMask", "SOAP::SOAPString", [0, 1]],
      ["ipV6Config", "VSphereCloud::HostIpConfigIpV6AddressConfiguration", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIpRouteConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostIpRouteConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["defaultGateway", "SOAP::SOAPString", [0, 1]],
      ["gatewayDevice", "SOAP::SOAPString", [0, 1]],
      ["ipV6DefaultGateway", "SOAP::SOAPString", [0, 1]],
      ["ipV6GatewayDevice", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIpRouteConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostIpRouteConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostIpRouteConfig"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["defaultGateway", "SOAP::SOAPString", [0, 1]],
      ["gatewayDevice", "SOAP::SOAPString", [0, 1]],
      ["ipV6DefaultGateway", "SOAP::SOAPString", [0, 1]],
      ["ipV6GatewayDevice", "SOAP::SOAPString", [0, 1]],
      ["gatewayDeviceConnection", "VSphereCloud::HostVirtualNicConnection", [0, 1]],
      ["ipV6GatewayDeviceConnection", "VSphereCloud::HostVirtualNicConnection", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIpRouteEntry,
    :schema_type => XSD::QName.new(NsVim25, "HostIpRouteEntry"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["gateway", "SOAP::SOAPString"],
      ["deviceName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostIpRouteEntry,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostIpRouteEntry"),
    :schema_element => [
      ["hostIpRouteEntry", ["VSphereCloud::HostIpRouteEntry[]", XSD::QName.new(NsVim25, "HostIpRouteEntry")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIpRouteOp,
    :schema_type => XSD::QName.new(NsVim25, "HostIpRouteOp"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString"],
      ["route", "VSphereCloud::HostIpRouteEntry"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostIpRouteOp,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostIpRouteOp"),
    :schema_element => [
      ["hostIpRouteOp", ["VSphereCloud::HostIpRouteOp[]", XSD::QName.new(NsVim25, "HostIpRouteOp")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIpRouteTableConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostIpRouteTableConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VSphereCloud::HostIpRouteOp[]", [0, nil]],
      ["ipv6Route", "VSphereCloud::HostIpRouteOp[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIpRouteTableInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostIpRouteTableInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VSphereCloud::HostIpRouteEntry[]", [0, nil]],
      ["ipv6Route", "VSphereCloud::HostIpRouteEntry[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIpmiInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostIpmiInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["bmcIpAddress", "SOAP::SOAPString", [0, 1]],
      ["bmcMacAddress", "SOAP::SOAPString", [0, 1]],
      ["login", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::KernelModuleSectionInfo,
    :schema_type => XSD::QName.new(NsVim25, "KernelModuleSectionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["address", "SOAP::SOAPLong"],
      ["length", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::KernelModuleInfo,
    :schema_type => XSD::QName.new(NsVim25, "KernelModuleInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"],
      ["optionString", "SOAP::SOAPString"],
      ["loaded", "SOAP::SOAPBoolean"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["useCount", "SOAP::SOAPInt"],
      ["readOnlySection", "VSphereCloud::KernelModuleSectionInfo"],
      ["writableSection", "VSphereCloud::KernelModuleSectionInfo"],
      ["textSection", "VSphereCloud::KernelModuleSectionInfo"],
      ["dataSection", "VSphereCloud::KernelModuleSectionInfo"],
      ["bssSection", "VSphereCloud::KernelModuleSectionInfo"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfKernelModuleInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfKernelModuleInfo"),
    :schema_element => [
      ["kernelModuleInfo", ["VSphereCloud::KernelModuleInfo[]", XSD::QName.new(NsVim25, "KernelModuleInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostLicenseSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostLicenseSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["source", "VSphereCloud::LicenseSource", [0, 1]],
      ["editionKey", "SOAP::SOAPString", [0, 1]],
      ["disabledFeatureKey", "SOAP::SOAPString[]", [0, nil]],
      ["enabledFeatureKey", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LinkDiscoveryProtocolConfig,
    :schema_type => XSD::QName.new(NsVim25, "LinkDiscoveryProtocolConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["protocol", "SOAP::SOAPString"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostAccountSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostAccountSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostAccountSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostAccountSpec"),
    :schema_element => [
      ["hostAccountSpec", ["VSphereCloud::HostAccountSpec[]", XSD::QName.new(NsVim25, "HostAccountSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPosixAccountSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostPosixAccountSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostAccountSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["posixId", "SOAP::SOAPInt", [0, 1]],
      ["shellAccess", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostLocalAuthenticationInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostLocalAuthenticationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostAuthenticationStoreInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ServiceConsoleReservationInfo,
    :schema_type => XSD::QName.new(NsVim25, "ServiceConsoleReservationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["serviceConsoleReservedCfg", "SOAP::SOAPLong"],
      ["serviceConsoleReserved", "SOAP::SOAPLong"],
      ["unreserved", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineMemoryReservationInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineMemoryReservationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["virtualMachineMin", "SOAP::SOAPLong"],
      ["virtualMachineMax", "SOAP::SOAPLong"],
      ["virtualMachineReserved", "SOAP::SOAPLong"],
      ["allocationPolicy", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineMemoryReservationSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineMemoryReservationSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["virtualMachineReserved", "SOAP::SOAPLong", [0, 1]],
      ["allocationPolicy", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostMemorySpec,
    :schema_type => XSD::QName.new(NsVim25, "HostMemorySpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["serviceConsoleReservation", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostMountInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostMountInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString", [0, 1]],
      ["accessMode", "SOAP::SOAPString"],
      ["accessible", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostMultipathInfoLogicalUnitPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathInfoLogicalUnitPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostMultipathInfoLogicalUnitStorageArrayTypePolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathInfoLogicalUnitStorageArrayTypePolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostMultipathInfoFixedLogicalUnitPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathInfoFixedLogicalUnitPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostMultipathInfoLogicalUnitPolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString"],
      ["prefer", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostMultipathInfoLogicalUnit,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathInfoLogicalUnit"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["id", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPString"],
      ["path", "VSphereCloud::HostMultipathInfoPath[]", [1, nil]],
      ["policy", "VSphereCloud::HostMultipathInfoLogicalUnitPolicy"],
      ["storageArrayTypePolicy", "VSphereCloud::HostMultipathInfoLogicalUnitStorageArrayTypePolicy", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostMultipathInfoLogicalUnit,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostMultipathInfoLogicalUnit"),
    :schema_element => [
      ["hostMultipathInfoLogicalUnit", ["VSphereCloud::HostMultipathInfoLogicalUnit[]", XSD::QName.new(NsVim25, "HostMultipathInfoLogicalUnit")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostMultipathInfoPath,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathInfoPath"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["pathState", "SOAP::SOAPString"],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["isWorkingPath", "SOAP::SOAPBoolean", [0, 1]],
      ["adapter", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPString"],
      ["transport", "VSphereCloud::HostTargetTransport", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostMultipathInfoPath,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostMultipathInfoPath"),
    :schema_element => [
      ["hostMultipathInfoPath", ["VSphereCloud::HostMultipathInfoPath[]", XSD::QName.new(NsVim25, "HostMultipathInfoPath")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostMultipathInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["lun", "VSphereCloud::HostMultipathInfoLogicalUnit[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostMultipathStateInfoPath,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathStateInfoPath"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["pathState", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostMultipathStateInfoPath,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostMultipathStateInfoPath"),
    :schema_element => [
      ["hostMultipathStateInfoPath", ["VSphereCloud::HostMultipathStateInfoPath[]", XSD::QName.new(NsVim25, "HostMultipathStateInfoPath")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostMultipathStateInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathStateInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "VSphereCloud::HostMultipathStateInfoPath[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNatServicePortForwardSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostNatServicePortForwardSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["hostPort", "SOAP::SOAPInt"],
      ["guestPort", "SOAP::SOAPInt"],
      ["guestIpAddress", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostNatServicePortForwardSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostNatServicePortForwardSpec"),
    :schema_element => [
      ["hostNatServicePortForwardSpec", ["VSphereCloud::HostNatServicePortForwardSpec[]", XSD::QName.new(NsVim25, "HostNatServicePortForwardSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNatServiceNameServiceSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostNatServiceNameServiceSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dnsAutoDetect", "SOAP::SOAPBoolean"],
      ["dnsPolicy", "SOAP::SOAPString"],
      ["dnsRetries", "SOAP::SOAPInt"],
      ["dnsTimeout", "SOAP::SOAPInt"],
      ["dnsNameServer", "SOAP::SOAPString[]", [0, nil]],
      ["nbdsTimeout", "SOAP::SOAPInt"],
      ["nbnsRetries", "SOAP::SOAPInt"],
      ["nbnsTimeout", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNatServiceSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostNatServiceSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["virtualSwitch", "SOAP::SOAPString"],
      ["activeFtp", "SOAP::SOAPBoolean"],
      ["allowAnyOui", "SOAP::SOAPBoolean"],
      ["configPort", "SOAP::SOAPBoolean"],
      ["ipGatewayAddress", "SOAP::SOAPString"],
      ["udpTimeout", "SOAP::SOAPInt"],
      ["portForward", "VSphereCloud::HostNatServicePortForwardSpec[]", [0, nil]],
      ["nameService", "VSphereCloud::HostNatServiceNameServiceSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNatServiceConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostNatServiceConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostNatServiceSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostNatServiceConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostNatServiceConfig"),
    :schema_element => [
      ["hostNatServiceConfig", ["VSphereCloud::HostNatServiceConfig[]", XSD::QName.new(NsVim25, "HostNatServiceConfig")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNatService,
    :schema_type => XSD::QName.new(NsVim25, "HostNatService"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostNatServiceSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostNatService,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostNatService"),
    :schema_element => [
      ["hostNatService", ["VSphereCloud::HostNatService[]", XSD::QName.new(NsVim25, "HostNatService")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNetCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "HostNetCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["canSetPhysicalNicLinkSpeed", "SOAP::SOAPBoolean"],
      ["supportsNicTeaming", "SOAP::SOAPBoolean"],
      ["nicTeamingPolicy", "SOAP::SOAPString[]", [0, nil]],
      ["supportsVlan", "SOAP::SOAPBoolean"],
      ["usesServiceConsoleNic", "SOAP::SOAPBoolean"],
      ["supportsNetworkHints", "SOAP::SOAPBoolean"],
      ["maxPortGroupsPerVswitch", "SOAP::SOAPInt", [0, 1]],
      ["vswitchConfigSupported", "SOAP::SOAPBoolean"],
      ["vnicConfigSupported", "SOAP::SOAPBoolean"],
      ["ipRouteConfigSupported", "SOAP::SOAPBoolean"],
      ["dnsConfigSupported", "SOAP::SOAPBoolean"],
      ["dhcpOnVnicSupported", "SOAP::SOAPBoolean"],
      ["ipV6Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNetOffloadCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "HostNetOffloadCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["csumOffload", "SOAP::SOAPBoolean", [0, 1]],
      ["tcpSegmentation", "SOAP::SOAPBoolean", [0, 1]],
      ["zeroCopyXmit", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNetworkConfigResult,
    :schema_type => XSD::QName.new(NsVim25, "HostNetworkConfigResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vnicDevice", "SOAP::SOAPString[]", [0, nil]],
      ["consoleVnicDevice", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNetworkConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostNetworkConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vswitch", "VSphereCloud::HostVirtualSwitchConfig[]", [0, nil]],
      ["proxySwitch", "VSphereCloud::HostProxySwitchConfig[]", [0, nil]],
      ["portgroup", "VSphereCloud::HostPortGroupConfig[]", [0, nil]],
      ["pnic", "VSphereCloud::PhysicalNicConfig[]", [0, nil]],
      ["vnic", "VSphereCloud::HostVirtualNicConfig[]", [0, nil]],
      ["consoleVnic", "VSphereCloud::HostVirtualNicConfig[]", [0, nil]],
      ["dnsConfig", "VSphereCloud::HostDnsConfig", [0, 1]],
      ["ipRouteConfig", "VSphereCloud::HostIpRouteConfig", [0, 1]],
      ["consoleIpRouteConfig", "VSphereCloud::HostIpRouteConfig", [0, 1]],
      ["routeTableConfig", "VSphereCloud::HostIpRouteTableConfig", [0, 1]],
      ["dhcp", "VSphereCloud::HostDhcpServiceConfig[]", [0, nil]],
      ["nat", "VSphereCloud::HostNatServiceConfig[]", [0, nil]],
      ["ipV6Enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNetworkInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostNetworkInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vswitch", "VSphereCloud::HostVirtualSwitch[]", [0, nil]],
      ["proxySwitch", "VSphereCloud::HostProxySwitch[]", [0, nil]],
      ["portgroup", "VSphereCloud::HostPortGroup[]", [0, nil]],
      ["pnic", "VSphereCloud::PhysicalNic[]", [0, nil]],
      ["vnic", "VSphereCloud::HostVirtualNic[]", [0, nil]],
      ["consoleVnic", "VSphereCloud::HostVirtualNic[]", [0, nil]],
      ["dnsConfig", "VSphereCloud::HostDnsConfig", [0, 1]],
      ["ipRouteConfig", "VSphereCloud::HostIpRouteConfig", [0, 1]],
      ["consoleIpRouteConfig", "VSphereCloud::HostIpRouteConfig", [0, 1]],
      ["routeTableInfo", "VSphereCloud::HostIpRouteTableInfo", [0, 1]],
      ["dhcp", "VSphereCloud::HostDhcpService[]", [0, nil]],
      ["nat", "VSphereCloud::HostNatService[]", [0, nil]],
      ["ipV6Enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["atBootIpV6Enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNetworkSecurityPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostNetworkSecurityPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["allowPromiscuous", "SOAP::SOAPBoolean", [0, 1]],
      ["macChanges", "SOAP::SOAPBoolean", [0, 1]],
      ["forgedTransmits", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNetworkTrafficShapingPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostNetworkTrafficShapingPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["averageBandwidth", "SOAP::SOAPLong", [0, 1]],
      ["peakBandwidth", "SOAP::SOAPLong", [0, 1]],
      ["burstSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNicFailureCriteria,
    :schema_type => XSD::QName.new(NsVim25, "HostNicFailureCriteria"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["checkSpeed", "SOAP::SOAPString", [0, 1]],
      ["speed", "SOAP::SOAPInt", [0, 1]],
      ["checkDuplex", "SOAP::SOAPBoolean", [0, 1]],
      ["fullDuplex", "SOAP::SOAPBoolean", [0, 1]],
      ["checkErrorPercent", "SOAP::SOAPBoolean", [0, 1]],
      ["percentage", "SOAP::SOAPInt", [0, 1]],
      ["checkBeacon", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNicOrderPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostNicOrderPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeNic", "SOAP::SOAPString[]", [0, nil]],
      ["standbyNic", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNicTeamingPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostNicTeamingPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString", [0, 1]],
      ["reversePolicy", "SOAP::SOAPBoolean", [0, 1]],
      ["notifySwitches", "SOAP::SOAPBoolean", [0, 1]],
      ["rollingOrder", "SOAP::SOAPBoolean", [0, 1]],
      ["failureCriteria", "VSphereCloud::HostNicFailureCriteria", [0, 1]],
      ["nicOrder", "VSphereCloud::HostNicOrderPolicy", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNetworkPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostNetworkPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["security", "VSphereCloud::HostNetworkSecurityPolicy", [0, 1]],
      ["nicTeaming", "VSphereCloud::HostNicTeamingPolicy", [0, 1]],
      ["offloadPolicy", "VSphereCloud::HostNetOffloadCapabilities", [0, 1]],
      ["shapingPolicy", "VSphereCloud::HostNetworkTrafficShapingPolicy", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNtpConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostNtpConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["server", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNumericSensorInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostNumericSensorInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["healthState", "VSphereCloud::ElementDescription", [0, 1]],
      ["currentReading", "SOAP::SOAPLong"],
      ["unitModifier", "SOAP::SOAPInt"],
      ["baseUnits", "SOAP::SOAPString"],
      ["rateUnits", "SOAP::SOAPString", [0, 1]],
      ["sensorType", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostNumericSensorInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostNumericSensorInfo"),
    :schema_element => [
      ["hostNumericSensorInfo", ["VSphereCloud::HostNumericSensorInfo[]", XSD::QName.new(NsVim25, "HostNumericSensorInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPatchManagerResult,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["status", "VSphereCloud::HostPatchManagerStatus[]", [0, nil]],
      ["xmlResult", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPatchManagerStatusPrerequisitePatch,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerStatusPrerequisitePatch"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["installState", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPatchManagerStatusPrerequisitePatch,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPatchManagerStatusPrerequisitePatch"),
    :schema_element => [
      ["hostPatchManagerStatusPrerequisitePatch", ["VSphereCloud::HostPatchManagerStatusPrerequisitePatch[]", XSD::QName.new(NsVim25, "HostPatchManagerStatusPrerequisitePatch")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPatchManagerStatus,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerStatus"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["applicable", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString[]", [0, nil]],
      ["integrity", "SOAP::SOAPString", [0, 1]],
      ["installed", "SOAP::SOAPBoolean"],
      ["installState", "SOAP::SOAPString[]", [0, nil]],
      ["prerequisitePatch", "VSphereCloud::HostPatchManagerStatusPrerequisitePatch[]", [0, nil]],
      ["restartRequired", "SOAP::SOAPBoolean"],
      ["reconnectRequired", "SOAP::SOAPBoolean"],
      ["vmOffRequired", "SOAP::SOAPBoolean"],
      ["supersededPatchIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPatchManagerStatus,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPatchManagerStatus"),
    :schema_element => [
      ["hostPatchManagerStatus", ["VSphereCloud::HostPatchManagerStatus[]", XSD::QName.new(NsVim25, "HostPatchManagerStatus")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPatchManagerLocator,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerLocator"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"],
      ["proxy", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPatchManagerPatchManagerOperationSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerPatchManagerOperationSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["proxy", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["cmdOption", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPathSelectionPolicyOption,
    :schema_type => XSD::QName.new(NsVim25, "HostPathSelectionPolicyOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["policy", "VSphereCloud::ElementDescription"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPathSelectionPolicyOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPathSelectionPolicyOption"),
    :schema_element => [
      ["hostPathSelectionPolicyOption", ["VSphereCloud::HostPathSelectionPolicyOption[]", XSD::QName.new(NsVim25, "HostPathSelectionPolicyOption")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPciDevice,
    :schema_type => XSD::QName.new(NsVim25, "HostPciDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["classId", "SOAP::SOAPShort"],
      ["bus", "SOAP::SOAPByte"],
      ["slot", "SOAP::SOAPByte"],
      ["function", "SOAP::SOAPByte"],
      ["vendorId", "SOAP::SOAPShort"],
      ["subVendorId", "SOAP::SOAPShort"],
      ["vendorName", "SOAP::SOAPString"],
      ["deviceId", "SOAP::SOAPShort"],
      ["subDeviceId", "SOAP::SOAPShort"],
      ["parentBridge", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPciDevice,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPciDevice"),
    :schema_element => [
      ["hostPciDevice", ["VSphereCloud::HostPciDevice[]", XSD::QName.new(NsVim25, "HostPciDevice")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPciPassthruConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostPciPassthruConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["passthruEnabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPciPassthruConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPciPassthruConfig"),
    :schema_element => [
      ["hostPciPassthruConfig", ["VSphereCloud::HostPciPassthruConfig[]", XSD::QName.new(NsVim25, "HostPciPassthruConfig")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPciPassthruInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostPciPassthruInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["dependentDevice", "SOAP::SOAPString"],
      ["passthruEnabled", "SOAP::SOAPBoolean"],
      ["passthruCapable", "SOAP::SOAPBoolean"],
      ["passthruActive", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPciPassthruInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPciPassthruInfo"),
    :schema_element => [
      ["hostPciPassthruInfo", ["VSphereCloud::HostPciPassthruInfo[]", XSD::QName.new(NsVim25, "HostPciPassthruInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PhysicalNicSpec,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ip", "VSphereCloud::HostIpConfig", [0, 1]],
      ["linkSpeed", "VSphereCloud::PhysicalNicLinkInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PhysicalNicConfig,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::PhysicalNicSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPhysicalNicConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPhysicalNicConfig"),
    :schema_element => [
      ["physicalNicConfig", ["VSphereCloud::PhysicalNicConfig[]", XSD::QName.new(NsVim25, "PhysicalNicConfig")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PhysicalNicLinkInfo,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicLinkInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["speedMb", "SOAP::SOAPInt"],
      ["duplex", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPhysicalNicLinkInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPhysicalNicLinkInfo"),
    :schema_element => [
      ["physicalNicLinkInfo", ["VSphereCloud::PhysicalNicLinkInfo[]", XSD::QName.new(NsVim25, "PhysicalNicLinkInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PhysicalNicHint,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicHint"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vlanId", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PhysicalNicIpHint,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicIpHint"),
    :schema_basetype => XSD::QName.new(NsVim25, "PhysicalNicHint"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vlanId", "SOAP::SOAPInt", [0, 1]],
      ["ipSubnet", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPhysicalNicIpHint,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPhysicalNicIpHint"),
    :schema_element => [
      ["physicalNicIpHint", ["VSphereCloud::PhysicalNicIpHint[]", XSD::QName.new(NsVim25, "PhysicalNicIpHint")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PhysicalNicNameHint,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicNameHint"),
    :schema_basetype => XSD::QName.new(NsVim25, "PhysicalNicHint"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vlanId", "SOAP::SOAPInt", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPhysicalNicNameHint,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPhysicalNicNameHint"),
    :schema_element => [
      ["physicalNicNameHint", ["VSphereCloud::PhysicalNicNameHint[]", XSD::QName.new(NsVim25, "PhysicalNicNameHint")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PhysicalNicHintInfo,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicHintInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["subnet", "VSphereCloud::PhysicalNicIpHint[]", [0, nil]],
      ["network", "VSphereCloud::PhysicalNicNameHint[]", [0, nil]],
      ["connectedSwitchPort", "VSphereCloud::PhysicalNicCdpInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPhysicalNicHintInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPhysicalNicHintInfo"),
    :schema_element => [
      ["physicalNicHintInfo", ["VSphereCloud::PhysicalNicHintInfo[]", XSD::QName.new(NsVim25, "PhysicalNicHintInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PhysicalNicCdpDeviceCapability,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicCdpDeviceCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["router", "SOAP::SOAPBoolean"],
      ["transparentBridge", "SOAP::SOAPBoolean"],
      ["sourceRouteBridge", "SOAP::SOAPBoolean"],
      ["networkSwitch", "SOAP::SOAPBoolean"],
      ["host", "SOAP::SOAPBoolean"],
      ["igmpEnabled", "SOAP::SOAPBoolean"],
      ["repeater", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PhysicalNicCdpInfo,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicCdpInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["cdpVersion", "SOAP::SOAPInt", [0, 1]],
      ["timeout", "SOAP::SOAPInt", [0, 1]],
      ["ttl", "SOAP::SOAPInt", [0, 1]],
      ["samples", "SOAP::SOAPInt", [0, 1]],
      ["devId", "SOAP::SOAPString", [0, 1]],
      ["address", "SOAP::SOAPString", [0, 1]],
      ["portId", "SOAP::SOAPString", [0, 1]],
      ["deviceCapability", "VSphereCloud::PhysicalNicCdpDeviceCapability", [0, 1]],
      ["softwareVersion", "SOAP::SOAPString", [0, 1]],
      ["hardwarePlatform", "SOAP::SOAPString", [0, 1]],
      ["ipPrefix", "SOAP::SOAPString", [0, 1]],
      ["ipPrefixLen", "SOAP::SOAPInt", [0, 1]],
      ["vlan", "SOAP::SOAPInt", [0, 1]],
      ["fullDuplex", "SOAP::SOAPBoolean", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["systemName", "SOAP::SOAPString", [0, 1]],
      ["systemOID", "SOAP::SOAPString", [0, 1]],
      ["mgmtAddr", "SOAP::SOAPString", [0, 1]],
      ["location", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PhysicalNic,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNic"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["pci", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["linkSpeed", "VSphereCloud::PhysicalNicLinkInfo", [0, 1]],
      ["validLinkSpecification", "VSphereCloud::PhysicalNicLinkInfo[]", [0, nil]],
      ["spec", "VSphereCloud::PhysicalNicSpec"],
      ["wakeOnLanSupported", "SOAP::SOAPBoolean"],
      ["mac", "SOAP::SOAPString"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2SupportedMode", "SOAP::SOAPString", [0, 1]],
      ["resourcePoolSchedulerAllowed", "SOAP::SOAPBoolean", [0, 1]],
      ["resourcePoolSchedulerDisallowedReason", "SOAP::SOAPString[]", [0, nil]],
      ["autoNegotiateSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPhysicalNic,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPhysicalNic"),
    :schema_element => [
      ["physicalNic", ["VSphereCloud::PhysicalNic[]", XSD::QName.new(NsVim25, "PhysicalNic")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPlugStoreTopologyAdapter,
    :schema_type => XSD::QName.new(NsVim25, "HostPlugStoreTopologyAdapter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["adapter", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPlugStoreTopologyAdapter,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPlugStoreTopologyAdapter"),
    :schema_element => [
      ["hostPlugStoreTopologyAdapter", ["VSphereCloud::HostPlugStoreTopologyAdapter[]", XSD::QName.new(NsVim25, "HostPlugStoreTopologyAdapter")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPlugStoreTopologyPath,
    :schema_type => XSD::QName.new(NsVim25, "HostPlugStoreTopologyPath"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["channelNumber", "SOAP::SOAPInt", [0, 1]],
      ["targetNumber", "SOAP::SOAPInt", [0, 1]],
      ["lunNumber", "SOAP::SOAPInt", [0, 1]],
      ["adapter", "SOAP::SOAPString", [0, 1]],
      ["target", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPlugStoreTopologyPath,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPlugStoreTopologyPath"),
    :schema_element => [
      ["hostPlugStoreTopologyPath", ["VSphereCloud::HostPlugStoreTopologyPath[]", XSD::QName.new(NsVim25, "HostPlugStoreTopologyPath")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPlugStoreTopologyDevice,
    :schema_type => XSD::QName.new(NsVim25, "HostPlugStoreTopologyDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPlugStoreTopologyDevice,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPlugStoreTopologyDevice"),
    :schema_element => [
      ["hostPlugStoreTopologyDevice", ["VSphereCloud::HostPlugStoreTopologyDevice[]", XSD::QName.new(NsVim25, "HostPlugStoreTopologyDevice")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPlugStoreTopologyPlugin,
    :schema_type => XSD::QName.new(NsVim25, "HostPlugStoreTopologyPlugin"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString[]", [0, nil]],
      ["claimedPath", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPlugStoreTopologyPlugin,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPlugStoreTopologyPlugin"),
    :schema_element => [
      ["hostPlugStoreTopologyPlugin", ["VSphereCloud::HostPlugStoreTopologyPlugin[]", XSD::QName.new(NsVim25, "HostPlugStoreTopologyPlugin")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPlugStoreTopologyTarget,
    :schema_type => XSD::QName.new(NsVim25, "HostPlugStoreTopologyTarget"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["transport", "VSphereCloud::HostTargetTransport", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPlugStoreTopologyTarget,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPlugStoreTopologyTarget"),
    :schema_element => [
      ["hostPlugStoreTopologyTarget", ["VSphereCloud::HostPlugStoreTopologyTarget[]", XSD::QName.new(NsVim25, "HostPlugStoreTopologyTarget")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPlugStoreTopology,
    :schema_type => XSD::QName.new(NsVim25, "HostPlugStoreTopology"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["adapter", "VSphereCloud::HostPlugStoreTopologyAdapter[]", [0, nil]],
      ["path", "VSphereCloud::HostPlugStoreTopologyPath[]", [0, nil]],
      ["target", "VSphereCloud::HostPlugStoreTopologyTarget[]", [0, nil]],
      ["device", "VSphereCloud::HostPlugStoreTopologyDevice[]", [0, nil]],
      ["plugin", "VSphereCloud::HostPlugStoreTopologyPlugin[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPortGroupSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostPortGroupSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["vlanId", "SOAP::SOAPInt"],
      ["vswitchName", "SOAP::SOAPString"],
      ["policy", "VSphereCloud::HostNetworkPolicy"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPortGroupConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostPortGroupConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["spec", "VSphereCloud::HostPortGroupSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPortGroupConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPortGroupConfig"),
    :schema_element => [
      ["hostPortGroupConfig", ["VSphereCloud::HostPortGroupConfig[]", XSD::QName.new(NsVim25, "HostPortGroupConfig")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPortGroupPort,
    :schema_type => XSD::QName.new(NsVim25, "HostPortGroupPort"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["mac", "SOAP::SOAPString[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPortGroupPort,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPortGroupPort"),
    :schema_element => [
      ["hostPortGroupPort", ["VSphereCloud::HostPortGroupPort[]", XSD::QName.new(NsVim25, "HostPortGroupPort")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPortGroup,
    :schema_type => XSD::QName.new(NsVim25, "HostPortGroup"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["port", "VSphereCloud::HostPortGroupPort[]", [0, nil]],
      ["vswitch", "SOAP::SOAPString", [0, 1]],
      ["computedPolicy", "VSphereCloud::HostNetworkPolicy"],
      ["spec", "VSphereCloud::HostPortGroupSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPortGroup,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPortGroup"),
    :schema_element => [
      ["hostPortGroup", ["VSphereCloud::HostPortGroup[]", XSD::QName.new(NsVim25, "HostPortGroup")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPowerPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostPowerPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["shortName", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPowerPolicy,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPowerPolicy"),
    :schema_element => [
      ["hostPowerPolicy", ["VSphereCloud::HostPowerPolicy[]", XSD::QName.new(NsVim25, "HostPowerPolicy")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PowerSystemCapability,
    :schema_type => XSD::QName.new(NsVim25, "PowerSystemCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["availablePolicy", "VSphereCloud::HostPowerPolicy[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PowerSystemInfo,
    :schema_type => XSD::QName.new(NsVim25, "PowerSystemInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["currentPolicy", "VSphereCloud::HostPowerPolicy"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostResignatureRescanResult,
    :schema_type => XSD::QName.new(NsVim25, "HostResignatureRescanResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["rescan", "VSphereCloud::HostVmfsRescanResult[]", [0, nil]],
      ["result", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFirewallRule,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallRule"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["port", "SOAP::SOAPInt"],
      ["endPort", "SOAP::SOAPInt", [0, 1]],
      ["direction", "VSphereCloud::HostFirewallRuleDirection"],
      ["protocol", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostFirewallRule,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostFirewallRule"),
    :schema_element => [
      ["hostFirewallRule", ["VSphereCloud::HostFirewallRule[]", XSD::QName.new(NsVim25, "HostFirewallRule")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFirewallRuleset,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallRuleset"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["required", "SOAP::SOAPBoolean"],
      ["rule", "VSphereCloud::HostFirewallRule[]", [1, nil]],
      ["service", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostFirewallRuleset,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostFirewallRuleset"),
    :schema_element => [
      ["hostFirewallRuleset", ["VSphereCloud::HostFirewallRuleset[]", XSD::QName.new(NsVim25, "HostFirewallRuleset")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostRuntimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostRuntimeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["connectionState", "VSphereCloud::HostSystemConnectionState"],
      ["powerState", "VSphereCloud::HostSystemPowerState"],
      ["standbyMode", "SOAP::SOAPString", [0, 1]],
      ["inMaintenanceMode", "SOAP::SOAPBoolean"],
      ["bootTime", "SOAP::SOAPDateTime", [0, 1]],
      ["healthSystemRuntime", "VSphereCloud::HealthSystemRuntime", [0, 1]],
      ["tpmPcrValues", "VSphereCloud::HostTpmDigestInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostScsiDiskPartition,
    :schema_type => XSD::QName.new(NsVim25, "HostScsiDiskPartition"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskName", "SOAP::SOAPString"],
      ["partition", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostScsiDiskPartition,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostScsiDiskPartition"),
    :schema_element => [
      ["hostScsiDiskPartition", ["VSphereCloud::HostScsiDiskPartition[]", XSD::QName.new(NsVim25, "HostScsiDiskPartition")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostScsiDisk,
    :schema_type => XSD::QName.new(NsVim25, "HostScsiDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScsiLun"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["descriptor", "VSphereCloud::ScsiLunDescriptor[]", [0, nil]],
      ["canonicalName", "SOAP::SOAPString", [0, 1]],
      ["displayName", "SOAP::SOAPString", [0, 1]],
      ["lunType", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["model", "SOAP::SOAPString", [0, 1]],
      ["revision", "SOAP::SOAPString", [0, 1]],
      ["scsiLevel", "SOAP::SOAPInt", [0, 1]],
      ["serialNumber", "SOAP::SOAPString", [0, 1]],
      ["durableName", "VSphereCloud::ScsiLunDurableName", [0, 1]],
      ["alternateName", "VSphereCloud::ScsiLunDurableName[]", [0, nil]],
      ["standardInquiry", "SOAP::SOAPByte[]", [0, nil]],
      ["queueDepth", "SOAP::SOAPInt", [0, 1]],
      ["operationalState", "SOAP::SOAPString[]", [1, nil]],
      ["capabilities", "VSphereCloud::ScsiLunCapabilities", [0, 1]],
      ["vStorageSupport", "SOAP::SOAPString", [0, 1]],
      ["capacity", "VSphereCloud::HostDiskDimensionsLba"],
      ["devicePath", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostScsiDisk,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostScsiDisk"),
    :schema_element => [
      ["hostScsiDisk", ["VSphereCloud::HostScsiDisk[]", XSD::QName.new(NsVim25, "HostScsiDisk")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScsiLunCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLunCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["updateDisplayNameSupported", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScsiLunDurableName,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLunDurableName"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["namespace", "SOAP::SOAPString"],
      ["namespaceId", "SOAP::SOAPByte"],
      ["data", "SOAP::SOAPByte[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfScsiLunDurableName,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfScsiLunDurableName"),
    :schema_element => [
      ["scsiLunDurableName", ["VSphereCloud::ScsiLunDurableName[]", XSD::QName.new(NsVim25, "ScsiLunDurableName")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScsiLunDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLunDescriptor"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["quality", "SOAP::SOAPString"],
      ["id", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfScsiLunDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfScsiLunDescriptor"),
    :schema_element => [
      ["scsiLunDescriptor", ["VSphereCloud::ScsiLunDescriptor[]", XSD::QName.new(NsVim25, "ScsiLunDescriptor")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScsiLun,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLun"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["descriptor", "VSphereCloud::ScsiLunDescriptor[]", [0, nil]],
      ["canonicalName", "SOAP::SOAPString", [0, 1]],
      ["displayName", "SOAP::SOAPString", [0, 1]],
      ["lunType", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["model", "SOAP::SOAPString", [0, 1]],
      ["revision", "SOAP::SOAPString", [0, 1]],
      ["scsiLevel", "SOAP::SOAPInt", [0, 1]],
      ["serialNumber", "SOAP::SOAPString", [0, 1]],
      ["durableName", "VSphereCloud::ScsiLunDurableName", [0, 1]],
      ["alternateName", "VSphereCloud::ScsiLunDurableName[]", [0, nil]],
      ["standardInquiry", "SOAP::SOAPByte[]", [0, nil]],
      ["queueDepth", "SOAP::SOAPInt", [0, 1]],
      ["operationalState", "SOAP::SOAPString[]", [1, nil]],
      ["capabilities", "VSphereCloud::ScsiLunCapabilities", [0, 1]],
      ["vStorageSupport", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfScsiLun,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfScsiLun"),
    :schema_element => [
      ["scsiLun", ["VSphereCloud::ScsiLun[]", XSD::QName.new(NsVim25, "ScsiLun")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostScsiTopologyInterface,
    :schema_type => XSD::QName.new(NsVim25, "HostScsiTopologyInterface"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["adapter", "SOAP::SOAPString"],
      ["target", "VSphereCloud::HostScsiTopologyTarget[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostScsiTopologyInterface,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostScsiTopologyInterface"),
    :schema_element => [
      ["hostScsiTopologyInterface", ["VSphereCloud::HostScsiTopologyInterface[]", XSD::QName.new(NsVim25, "HostScsiTopologyInterface")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostScsiTopologyTarget,
    :schema_type => XSD::QName.new(NsVim25, "HostScsiTopologyTarget"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["target", "SOAP::SOAPInt"],
      ["lun", "VSphereCloud::HostScsiTopologyLun[]", [0, nil]],
      ["transport", "VSphereCloud::HostTargetTransport", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostScsiTopologyTarget,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostScsiTopologyTarget"),
    :schema_element => [
      ["hostScsiTopologyTarget", ["VSphereCloud::HostScsiTopologyTarget[]", XSD::QName.new(NsVim25, "HostScsiTopologyTarget")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostScsiTopologyLun,
    :schema_type => XSD::QName.new(NsVim25, "HostScsiTopologyLun"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPInt"],
      ["scsiLun", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostScsiTopologyLun,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostScsiTopologyLun"),
    :schema_element => [
      ["hostScsiTopologyLun", ["VSphereCloud::HostScsiTopologyLun[]", XSD::QName.new(NsVim25, "HostScsiTopologyLun")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostScsiTopology,
    :schema_type => XSD::QName.new(NsVim25, "HostScsiTopology"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["adapter", "VSphereCloud::HostScsiTopologyInterface[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostSecuritySpec,
    :schema_type => XSD::QName.new(NsVim25, "HostSecuritySpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["adminPassword", "SOAP::SOAPString", [0, 1]],
      ["removePermission", "VSphereCloud::Permission[]", [0, nil]],
      ["addPermission", "VSphereCloud::Permission[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostService,
    :schema_type => XSD::QName.new(NsVim25, "HostService"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["required", "SOAP::SOAPBoolean"],
      ["uninstallable", "SOAP::SOAPBoolean"],
      ["running", "SOAP::SOAPBoolean"],
      ["ruleset", "SOAP::SOAPString[]", [0, nil]],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostService,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostService"),
    :schema_element => [
      ["hostService", ["VSphereCloud::HostService[]", XSD::QName.new(NsVim25, "HostService")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostServiceConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostServiceConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["serviceId", "SOAP::SOAPString"],
      ["startupPolicy", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostServiceConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostServiceConfig"),
    :schema_element => [
      ["hostServiceConfig", ["VSphereCloud::HostServiceConfig[]", XSD::QName.new(NsVim25, "HostServiceConfig")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostServiceInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostServiceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["service", "VSphereCloud::HostService[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostSnmpDestination,
    :schema_type => XSD::QName.new(NsVim25, "HostSnmpDestination"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt"],
      ["community", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostSnmpDestination,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostSnmpDestination"),
    :schema_element => [
      ["hostSnmpDestination", ["VSphereCloud::HostSnmpDestination[]", XSD::QName.new(NsVim25, "HostSnmpDestination")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostSnmpConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostSnmpConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["readOnlyCommunities", "SOAP::SOAPString[]", [0, nil]],
      ["trapTargets", "VSphereCloud::HostSnmpDestination[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostSnmpSystemAgentLimits,
    :schema_type => XSD::QName.new(NsVim25, "HostSnmpSystemAgentLimits"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["maxReadOnlyCommunities", "SOAP::SOAPInt"],
      ["maxTrapDestinations", "SOAP::SOAPInt"],
      ["maxCommunityLength", "SOAP::SOAPInt"],
      ["maxBufferSize", "SOAP::SOAPInt"],
      ["capability", "VSphereCloud::HostSnmpAgentCapability", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostSslThumbprintInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostSslThumbprintInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["sslThumbprints", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostStorageArrayTypePolicyOption,
    :schema_type => XSD::QName.new(NsVim25, "HostStorageArrayTypePolicyOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["policy", "VSphereCloud::ElementDescription"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostStorageArrayTypePolicyOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostStorageArrayTypePolicyOption"),
    :schema_element => [
      ["hostStorageArrayTypePolicyOption", ["VSphereCloud::HostStorageArrayTypePolicyOption[]", XSD::QName.new(NsVim25, "HostStorageArrayTypePolicyOption")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostStorageDeviceInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostStorageDeviceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["hostBusAdapter", "VSphereCloud::HostHostBusAdapter[]", [0, nil]],
      ["scsiLun", "VSphereCloud::ScsiLun[]", [0, nil]],
      ["scsiTopology", "VSphereCloud::HostScsiTopology", [0, 1]],
      ["multipathInfo", "VSphereCloud::HostMultipathInfo", [0, 1]],
      ["plugStoreTopology", "VSphereCloud::HostPlugStoreTopology", [0, 1]],
      ["softwareInternetScsiEnabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostHardwareSummary,
    :schema_type => XSD::QName.new(NsVim25, "HostHardwareSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vendor", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["otherIdentifyingInfo", "VSphereCloud::HostSystemIdentificationInfo[]", [0, nil]],
      ["memorySize", "SOAP::SOAPLong"],
      ["cpuModel", "SOAP::SOAPString"],
      ["cpuMhz", "SOAP::SOAPInt"],
      ["numCpuPkgs", "SOAP::SOAPShort"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["numNics", "SOAP::SOAPInt"],
      ["numHBAs", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostListSummaryQuickStats,
    :schema_type => XSD::QName.new(NsVim25, "HostListSummaryQuickStats"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["overallCpuUsage", "SOAP::SOAPInt", [0, 1]],
      ["overallMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["distributedCpuFairness", "SOAP::SOAPInt", [0, 1]],
      ["distributedMemoryFairness", "SOAP::SOAPInt", [0, 1]],
      ["uptime", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConfigSummary,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt"],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]],
      ["product", "VSphereCloud::AboutInfo", [0, 1]],
      ["vmotionEnabled", "SOAP::SOAPBoolean"],
      ["faultToleranceEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["featureVersion", "VSphereCloud::HostFeatureVersionInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostListSummary,
    :schema_type => XSD::QName.new(NsVim25, "HostListSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["hardware", "VSphereCloud::HostHardwareSummary", [0, 1]],
      ["runtime", "VSphereCloud::HostRuntimeInfo", [0, 1]],
      ["config", "VSphereCloud::HostConfigSummary"],
      ["quickStats", "VSphereCloud::HostListSummaryQuickStats"],
      ["overallStatus", "VSphereCloud::ManagedEntityStatus"],
      ["rebootRequired", "SOAP::SOAPBoolean"],
      ["customValue", "VSphereCloud::CustomFieldValue[]", [0, nil]],
      ["managementServerIp", "SOAP::SOAPString", [0, 1]],
      ["maxEVCModeKey", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostSystemHealthInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostSystemHealthInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["numericSensorInfo", "VSphereCloud::HostNumericSensorInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostSystemIdentificationInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostSystemIdentificationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["identifierValue", "SOAP::SOAPString"],
      ["identifierType", "VSphereCloud::ElementDescription"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostSystemIdentificationInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostSystemIdentificationInfo"),
    :schema_element => [
      ["hostSystemIdentificationInfo", ["VSphereCloud::HostSystemIdentificationInfo[]", XSD::QName.new(NsVim25, "HostSystemIdentificationInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostSystemResourceInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostSystemResourceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["config", "VSphereCloud::ResourceConfigSpec", [0, 1]],
      ["child", "VSphereCloud::HostSystemResourceInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostSystemResourceInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostSystemResourceInfo"),
    :schema_element => [
      ["hostSystemResourceInfo", ["VSphereCloud::HostSystemResourceInfo[]", XSD::QName.new(NsVim25, "HostSystemResourceInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostTargetTransport,
    :schema_type => XSD::QName.new(NsVim25, "HostTargetTransport"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostParallelScsiTargetTransport,
    :schema_type => XSD::QName.new(NsVim25, "HostParallelScsiTargetTransport"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostTargetTransport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostBlockAdapterTargetTransport,
    :schema_type => XSD::QName.new(NsVim25, "HostBlockAdapterTargetTransport"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostTargetTransport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFibreChannelTargetTransport,
    :schema_type => XSD::QName.new(NsVim25, "HostFibreChannelTargetTransport"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostTargetTransport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["portWorldWideName", "SOAP::SOAPLong"],
      ["nodeWorldWideName", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiTargetTransport,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiTargetTransport"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostTargetTransport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["iScsiName", "SOAP::SOAPString"],
      ["iScsiAlias", "SOAP::SOAPString"],
      ["address", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDigestInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDigestInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["digestMethod", "SOAP::SOAPString"],
      ["digestValue", "SOAP::SOAPByte[]", [1, nil]],
      ["objectName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostTpmDigestInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostTpmDigestInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDigestInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["digestMethod", "SOAP::SOAPString"],
      ["digestValue", "SOAP::SOAPByte[]", [1, nil]],
      ["objectName", "SOAP::SOAPString", [0, 1]],
      ["pcrNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostTpmDigestInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostTpmDigestInfo"),
    :schema_element => [
      ["hostTpmDigestInfo", ["VSphereCloud::HostTpmDigestInfo[]", XSD::QName.new(NsVim25, "HostTpmDigestInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsExtent,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsExtent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["device", "VSphereCloud::HostScsiDiskPartition"],
      ["devicePath", "SOAP::SOAPString"],
      ["vmfsUuid", "SOAP::SOAPString"],
      ["isHeadExtent", "SOAP::SOAPBoolean"],
      ["ordinal", "SOAP::SOAPInt"],
      ["startBlock", "SOAP::SOAPInt"],
      ["endBlock", "SOAP::SOAPInt"],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostUnresolvedVmfsExtent,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostUnresolvedVmfsExtent"),
    :schema_element => [
      ["hostUnresolvedVmfsExtent", ["VSphereCloud::HostUnresolvedVmfsExtent[]", XSD::QName.new(NsVim25, "HostUnresolvedVmfsExtent")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsResignatureSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsResignatureSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["extentDevicePath", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsResolutionResult,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsResolutionResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["spec", "VSphereCloud::HostUnresolvedVmfsResolutionSpec"],
      ["vmfs", "VSphereCloud::HostVmfsVolume", [0, 1]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostUnresolvedVmfsResolutionResult,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostUnresolvedVmfsResolutionResult"),
    :schema_element => [
      ["hostUnresolvedVmfsResolutionResult", ["VSphereCloud::HostUnresolvedVmfsResolutionResult[]", XSD::QName.new(NsVim25, "HostUnresolvedVmfsResolutionResult")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsResolutionSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsResolutionSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["extentDevicePath", "SOAP::SOAPString[]", [1, nil]],
      ["uuidResolution", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostUnresolvedVmfsResolutionSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostUnresolvedVmfsResolutionSpec"),
    :schema_element => [
      ["hostUnresolvedVmfsResolutionSpec", ["VSphereCloud::HostUnresolvedVmfsResolutionSpec[]", XSD::QName.new(NsVim25, "HostUnresolvedVmfsResolutionSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsVolumeResolveStatus,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsVolumeResolveStatus"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["resolvable", "SOAP::SOAPBoolean"],
      ["incompleteExtents", "SOAP::SOAPBoolean", [0, 1]],
      ["multipleCopies", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsVolume,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsVolume"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["extent", "VSphereCloud::HostUnresolvedVmfsExtent[]", [1, nil]],
      ["vmfsLabel", "SOAP::SOAPString"],
      ["vmfsUuid", "SOAP::SOAPString"],
      ["totalBlocks", "SOAP::SOAPInt"],
      ["resolveStatus", "VSphereCloud::HostUnresolvedVmfsVolumeResolveStatus"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostUnresolvedVmfsVolume,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostUnresolvedVmfsVolume"),
    :schema_element => [
      ["hostUnresolvedVmfsVolume", ["VSphereCloud::HostUnresolvedVmfsVolume[]", XSD::QName.new(NsVim25, "HostUnresolvedVmfsVolume")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVMotionConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostVMotionConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmotionNicKey", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVMotionInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostVMotionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["netConfig", "VSphereCloud::HostVMotionNetConfig", [0, 1]],
      ["ipConfig", "VSphereCloud::HostIpConfig", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVMotionNetConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostVMotionNetConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["candidateVnic", "VSphereCloud::HostVirtualNic[]", [0, nil]],
      ["selectedVnic", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVirtualNicSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualNicSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ip", "VSphereCloud::HostIpConfig", [0, 1]],
      ["mac", "SOAP::SOAPString", [0, 1]],
      ["distributedVirtualPort", "VSphereCloud::DistributedVirtualSwitchPortConnection", [0, 1]],
      ["portgroup", "SOAP::SOAPString", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["tsoEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVirtualNicConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualNicConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]],
      ["portgroup", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostVirtualNicSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostVirtualNicConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostVirtualNicConfig"),
    :schema_element => [
      ["hostVirtualNicConfig", ["VSphereCloud::HostVirtualNicConfig[]", XSD::QName.new(NsVim25, "HostVirtualNicConfig")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVirtualNic,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualNic"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["portgroup", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostVirtualNicSpec"],
      ["port", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostVirtualNic,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostVirtualNic"),
    :schema_element => [
      ["hostVirtualNic", ["VSphereCloud::HostVirtualNic[]", XSD::QName.new(NsVim25, "HostVirtualNic")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVirtualNicConnection,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualNicConnection"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["portgroup", "SOAP::SOAPString", [0, 1]],
      ["dvPort", "VSphereCloud::DistributedVirtualSwitchPortConnection", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVirtualNicManagerNicTypeSelection,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualNicManagerNicTypeSelection"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vnic", "VSphereCloud::HostVirtualNicConnection"],
      ["nicType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostVirtualNicManagerNicTypeSelection,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostVirtualNicManagerNicTypeSelection"),
    :schema_element => [
      ["hostVirtualNicManagerNicTypeSelection", ["VSphereCloud::HostVirtualNicManagerNicTypeSelection[]", XSD::QName.new(NsVim25, "HostVirtualNicManagerNicTypeSelection")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualNicManagerNetConfig,
    :schema_type => XSD::QName.new(NsVim25, "VirtualNicManagerNetConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["nicType", "SOAP::SOAPString"],
      ["multiSelectAllowed", "SOAP::SOAPBoolean"],
      ["candidateVnic", "VSphereCloud::HostVirtualNic[]", [0, nil]],
      ["selectedVnic", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualNicManagerNetConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualNicManagerNetConfig"),
    :schema_element => [
      ["virtualNicManagerNetConfig", ["VSphereCloud::VirtualNicManagerNetConfig[]", XSD::QName.new(NsVim25, "VirtualNicManagerNetConfig")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVirtualNicManagerInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualNicManagerInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["netConfig", "VSphereCloud::VirtualNicManagerNetConfig[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVirtualSwitchBridge,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitchBridge"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVirtualSwitchAutoBridge,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitchAutoBridge"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostVirtualSwitchBridge"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["excludedNicDevice", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVirtualSwitchSimpleBridge,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitchSimpleBridge"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostVirtualSwitchBridge"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["nicDevice", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVirtualSwitchBondBridge,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitchBondBridge"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostVirtualSwitchBridge"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["nicDevice", "SOAP::SOAPString[]", [1, nil]],
      ["beacon", "VSphereCloud::HostVirtualSwitchBeaconConfig", [0, 1]],
      ["linkDiscoveryProtocolConfig", "VSphereCloud::LinkDiscoveryProtocolConfig", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVirtualSwitchBeaconConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitchBeaconConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["interval", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVirtualSwitchSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitchSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["numPorts", "SOAP::SOAPInt"],
      ["bridge", "VSphereCloud::HostVirtualSwitchBridge", [0, 1]],
      ["policy", "VSphereCloud::HostNetworkPolicy", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVirtualSwitchConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitchConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostVirtualSwitchSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostVirtualSwitchConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostVirtualSwitchConfig"),
    :schema_element => [
      ["hostVirtualSwitchConfig", ["VSphereCloud::HostVirtualSwitchConfig[]", XSD::QName.new(NsVim25, "HostVirtualSwitchConfig")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVirtualSwitch,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitch"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["numPortsAvailable", "SOAP::SOAPInt"],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["portgroup", "SOAP::SOAPString[]", [0, nil]],
      ["pnic", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostVirtualSwitchSpec"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostVirtualSwitch,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostVirtualSwitch"),
    :schema_element => [
      ["hostVirtualSwitch", ["VSphereCloud::HostVirtualSwitch[]", XSD::QName.new(NsVim25, "HostVirtualSwitch")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVmfsRescanResult,
    :schema_type => XSD::QName.new(NsVim25, "HostVmfsRescanResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostVmfsRescanResult,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostVmfsRescanResult"),
    :schema_element => [
      ["hostVmfsRescanResult", ["VSphereCloud::HostVmfsRescanResult[]", XSD::QName.new(NsVim25, "HostVmfsRescanResult")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVmfsSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostVmfsSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["extent", "VSphereCloud::HostScsiDiskPartition"],
      ["blockSizeMb", "SOAP::SOAPInt", [0, 1]],
      ["majorVersion", "SOAP::SOAPInt"],
      ["volumeName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVmfsVolume,
    :schema_type => XSD::QName.new(NsVim25, "HostVmfsVolume"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostFileSystemVolume"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["blockSizeMb", "SOAP::SOAPInt"],
      ["maxBlocks", "SOAP::SOAPInt"],
      ["majorVersion", "SOAP::SOAPInt"],
      ["version", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["extent", "VSphereCloud::HostScsiDiskPartition[]", [1, nil]],
      ["vmfsUpgradable", "SOAP::SOAPBoolean"],
      ["forceMountedInfo", "VSphereCloud::HostForceMountedInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetDhcpConfigInfoDhcpOptions,
    :schema_type => XSD::QName.new(NsVim25, "NetDhcpConfigInfoDhcpOptions"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enable", "SOAP::SOAPBoolean"],
      ["config", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetDhcpConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "NetDhcpConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipv6", "VSphereCloud::NetDhcpConfigInfoDhcpOptions", [0, 1]],
      ["ipv4", "VSphereCloud::NetDhcpConfigInfoDhcpOptions", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetDhcpConfigSpecDhcpOptionsSpec,
    :schema_type => XSD::QName.new(NsVim25, "NetDhcpConfigSpecDhcpOptionsSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enable", "SOAP::SOAPBoolean", [0, 1]],
      ["config", "VSphereCloud::KeyValue[]", [1, nil]],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetDhcpConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "NetDhcpConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipv6", "VSphereCloud::NetDhcpConfigSpecDhcpOptionsSpec", [0, 1]],
      ["ipv4", "VSphereCloud::NetDhcpConfigSpecDhcpOptionsSpec", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetDnsConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "NetDnsConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["hostName", "SOAP::SOAPString"],
      ["domainName", "SOAP::SOAPString"],
      ["ipAddress", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetDnsConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "NetDnsConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean", [0, 1]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["domainName", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpConfigInfoIpAddress,
    :schema_type => XSD::QName.new(NsVim25, "NetIpConfigInfoIpAddress"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["origin", "SOAP::SOAPString", [0, 1]],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["lifetime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfNetIpConfigInfoIpAddress,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNetIpConfigInfoIpAddress"),
    :schema_element => [
      ["netIpConfigInfoIpAddress", ["VSphereCloud::NetIpConfigInfoIpAddress[]", XSD::QName.new(NsVim25, "NetIpConfigInfoIpAddress")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "NetIpConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "VSphereCloud::NetIpConfigInfoIpAddress[]", [0, nil]],
      ["dhcp", "VSphereCloud::NetDhcpConfigInfo", [0, 1]],
      ["autoConfigurationEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpConfigSpecIpAddressSpec,
    :schema_type => XSD::QName.new(NsVim25, "NetIpConfigSpecIpAddressSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfNetIpConfigSpecIpAddressSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNetIpConfigSpecIpAddressSpec"),
    :schema_element => [
      ["netIpConfigSpecIpAddressSpec", ["VSphereCloud::NetIpConfigSpecIpAddressSpec[]", XSD::QName.new(NsVim25, "NetIpConfigSpecIpAddressSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "NetIpConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "VSphereCloud::NetIpConfigSpecIpAddressSpec[]", [0, nil]],
      ["dhcp", "VSphereCloud::NetDhcpConfigSpec", [0, 1]],
      ["autoConfigurationEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpRouteConfigInfoGateway,
    :schema_type => XSD::QName.new(NsVim25, "NetIpRouteConfigInfoGateway"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpRouteConfigInfoIpRoute,
    :schema_type => XSD::QName.new(NsVim25, "NetIpRouteConfigInfoIpRoute"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["gateway", "VSphereCloud::NetIpRouteConfigInfoGateway"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfNetIpRouteConfigInfoIpRoute,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNetIpRouteConfigInfoIpRoute"),
    :schema_element => [
      ["netIpRouteConfigInfoIpRoute", ["VSphereCloud::NetIpRouteConfigInfoIpRoute[]", XSD::QName.new(NsVim25, "NetIpRouteConfigInfoIpRoute")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpRouteConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "NetIpRouteConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VSphereCloud::NetIpRouteConfigInfoIpRoute[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpRouteConfigSpecGatewaySpec,
    :schema_type => XSD::QName.new(NsVim25, "NetIpRouteConfigSpecGatewaySpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpRouteConfigSpecIpRouteSpec,
    :schema_type => XSD::QName.new(NsVim25, "NetIpRouteConfigSpecIpRouteSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["gateway", "VSphereCloud::NetIpRouteConfigSpecGatewaySpec"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfNetIpRouteConfigSpecIpRouteSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNetIpRouteConfigSpecIpRouteSpec"),
    :schema_element => [
      ["netIpRouteConfigSpecIpRouteSpec", ["VSphereCloud::NetIpRouteConfigSpecIpRouteSpec[]", XSD::QName.new(NsVim25, "NetIpRouteConfigSpecIpRouteSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpRouteConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "NetIpRouteConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VSphereCloud::NetIpRouteConfigSpecIpRouteSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpStackInfoNetToMedia,
    :schema_type => XSD::QName.new(NsVim25, "NetIpStackInfoNetToMedia"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["physicalAddress", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfNetIpStackInfoNetToMedia,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNetIpStackInfoNetToMedia"),
    :schema_element => [
      ["netIpStackInfoNetToMedia", ["VSphereCloud::NetIpStackInfoNetToMedia[]", XSD::QName.new(NsVim25, "NetIpStackInfoNetToMedia")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpStackInfoDefaultRouter,
    :schema_type => XSD::QName.new(NsVim25, "NetIpStackInfoDefaultRouter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"],
      ["lifetime", "SOAP::SOAPDateTime"],
      ["preference", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfNetIpStackInfoDefaultRouter,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNetIpStackInfoDefaultRouter"),
    :schema_element => [
      ["netIpStackInfoDefaultRouter", ["VSphereCloud::NetIpStackInfoDefaultRouter[]", XSD::QName.new(NsVim25, "NetIpStackInfoDefaultRouter")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpStackInfo,
    :schema_type => XSD::QName.new(NsVim25, "NetIpStackInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["neighbor", "VSphereCloud::NetIpStackInfoNetToMedia[]", [0, nil]],
      ["defaultRouter", "VSphereCloud::NetIpStackInfoDefaultRouter[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetBIOSConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "NetBIOSConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["mode", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::WinNetBIOSConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "WinNetBIOSConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "NetBIOSConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["mode", "SOAP::SOAPString"],
      ["primaryWINS", "SOAP::SOAPString"],
      ["secondaryWINS", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayUpdateSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::BoolOption,
    :schema_type => XSD::QName.new(NsVim25, "BoolOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "OptionType"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["supported", "SOAP::SOAPBoolean"],
      ["defaultValue", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ChoiceOption,
    :schema_type => XSD::QName.new(NsVim25, "ChoiceOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "OptionType"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["choiceInfo", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["defaultIndex", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FloatOption,
    :schema_type => XSD::QName.new(NsVim25, "FloatOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "OptionType"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["min", "SOAP::SOAPFloat"],
      ["max", "SOAP::SOAPFloat"],
      ["defaultValue", "SOAP::SOAPFloat"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IntOption,
    :schema_type => XSD::QName.new(NsVim25, "IntOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "OptionType"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["min", "SOAP::SOAPInt"],
      ["max", "SOAP::SOAPInt"],
      ["defaultValue", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LongOption,
    :schema_type => XSD::QName.new(NsVim25, "LongOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "OptionType"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["min", "SOAP::SOAPLong"],
      ["max", "SOAP::SOAPLong"],
      ["defaultValue", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OptionDef,
    :schema_type => XSD::QName.new(NsVim25, "OptionDef"),
    :schema_basetype => XSD::QName.new(NsVim25, "ElementDescription"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["optionType", "VSphereCloud::OptionType"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfOptionDef,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOptionDef"),
    :schema_element => [
      ["optionDef", ["VSphereCloud::OptionDef[]", XSD::QName.new(NsVim25, "OptionDef")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OptionType,
    :schema_type => XSD::QName.new(NsVim25, "OptionType"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OptionValue,
    :schema_type => XSD::QName.new(NsVim25, "OptionValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", nil, [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfOptionValue,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOptionValue"),
    :schema_element => [
      ["optionValue", ["VSphereCloud::OptionValue[]", XSD::QName.new(NsVim25, "OptionValue")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StringOption,
    :schema_type => XSD::QName.new(NsVim25, "StringOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "OptionType"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultValue", "SOAP::SOAPString"],
      ["validCharacters", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ApplyProfile,
    :schema_type => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ComplianceLocator,
    :schema_type => XSD::QName.new(NsVim25, "ComplianceLocator"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["expressionName", "SOAP::SOAPString"],
      ["applyPath", "VSphereCloud::ProfilePropertyPath"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfComplianceLocator,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfComplianceLocator"),
    :schema_element => [
      ["complianceLocator", ["VSphereCloud::ComplianceLocator[]", XSD::QName.new(NsVim25, "ComplianceLocator")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ComplianceProfile,
    :schema_type => XSD::QName.new(NsVim25, "ComplianceProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["expression", "VSphereCloud::ProfileExpression[]", [1, nil]],
      ["rootExpression", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ComplianceFailure,
    :schema_type => XSD::QName.new(NsVim25, "ComplianceFailure"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["failureType", "SOAP::SOAPString"],
      ["message", "VSphereCloud::LocalizableMessage"],
      ["expressionName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfComplianceFailure,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfComplianceFailure"),
    :schema_element => [
      ["complianceFailure", ["VSphereCloud::ComplianceFailure[]", XSD::QName.new(NsVim25, "ComplianceFailure")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ComplianceResult,
    :schema_type => XSD::QName.new(NsVim25, "ComplianceResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["profile", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["complianceStatus", "SOAP::SOAPString"],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["checkTime", "SOAP::SOAPDateTime", [0, 1]],
      ["failure", "VSphereCloud::ComplianceFailure[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfComplianceResult,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfComplianceResult"),
    :schema_element => [
      ["complianceResult", ["VSphereCloud::ComplianceResult[]", XSD::QName.new(NsVim25, "ComplianceResult")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileDeferredPolicyOptionParameter,
    :schema_type => XSD::QName.new(NsVim25, "ProfileDeferredPolicyOptionParameter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inputPath", "VSphereCloud::ProfilePropertyPath"],
      ["parameter", "VSphereCloud::KeyAnyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfProfileDeferredPolicyOptionParameter,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileDeferredPolicyOptionParameter"),
    :schema_element => [
      ["profileDeferredPolicyOptionParameter", ["VSphereCloud::ProfileDeferredPolicyOptionParameter[]", XSD::QName.new(NsVim25, "ProfileDeferredPolicyOptionParameter")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileExpression,
    :schema_type => XSD::QName.new(NsVim25, "ProfileExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"],
      ["negated", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfProfileExpression,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileExpression"),
    :schema_element => [
      ["profileExpression", ["VSphereCloud::ProfileExpression[]", XSD::QName.new(NsVim25, "ProfileExpression")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileSimpleExpression,
    :schema_type => XSD::QName.new(NsVim25, "ProfileSimpleExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileExpression"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"],
      ["negated", "SOAP::SOAPBoolean"],
      ["expressionType", "SOAP::SOAPString"],
      ["parameter", "VSphereCloud::KeyAnyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileCompositeExpression,
    :schema_type => XSD::QName.new(NsVim25, "ProfileCompositeExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileExpression"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"],
      ["negated", "SOAP::SOAPBoolean"],
      ["operator", "SOAP::SOAPString"],
      ["expressionName", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileExpressionMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ProfileExpressionMetadata"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["expressionId", "VSphereCloud::ExtendedElementDescription"],
      ["parameter", "VSphereCloud::ProfileParameterMetadata[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfProfileExpressionMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileExpressionMetadata"),
    :schema_element => [
      ["profileExpressionMetadata", ["VSphereCloud::ProfileExpressionMetadata[]", XSD::QName.new(NsVim25, "ProfileExpressionMetadata")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileParameterMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ProfileParameterMetadata"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::ExtendedElementDescription"],
      ["type", "SOAP::SOAPString"],
      ["optional", "SOAP::SOAPBoolean"],
      ["defaultValue", nil, [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfProfileParameterMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileParameterMetadata"),
    :schema_element => [
      ["profileParameterMetadata", ["VSphereCloud::ProfileParameterMetadata[]", XSD::QName.new(NsVim25, "ProfileParameterMetadata")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfilePolicy,
    :schema_type => XSD::QName.new(NsVim25, "ProfilePolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["policyOption", "VSphereCloud::PolicyOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfProfilePolicy,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfilePolicy"),
    :schema_element => [
      ["profilePolicy", ["VSphereCloud::ProfilePolicy[]", XSD::QName.new(NsVim25, "ProfilePolicy")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfilePolicyOptionMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ProfilePolicyOptionMetadata"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::ExtendedElementDescription"],
      ["parameter", "VSphereCloud::ProfileParameterMetadata[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfProfilePolicyOptionMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfilePolicyOptionMetadata"),
    :schema_element => [
      ["profilePolicyOptionMetadata", ["VSphereCloud::ProfilePolicyOptionMetadata[]", XSD::QName.new(NsVim25, "ProfilePolicyOptionMetadata")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileCompositePolicyOptionMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ProfileCompositePolicyOptionMetadata"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfilePolicyOptionMetadata"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::ExtendedElementDescription"],
      ["parameter", "VSphereCloud::ProfileParameterMetadata[]", [0, nil]],
      ["option", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UserInputRequiredParameterMetadata,
    :schema_type => XSD::QName.new(NsVim25, "UserInputRequiredParameterMetadata"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfilePolicyOptionMetadata"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::ExtendedElementDescription"],
      ["parameter", "VSphereCloud::ProfileParameterMetadata[]", [0, nil]],
      ["userInputParameter", "VSphereCloud::ProfileParameterMetadata[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfilePolicyMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ProfilePolicyMetadata"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::ExtendedElementDescription"],
      ["possibleOption", "VSphereCloud::ProfilePolicyOptionMetadata[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfProfilePolicyMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfilePolicyMetadata"),
    :schema_element => [
      ["profilePolicyMetadata", ["VSphereCloud::ProfilePolicyMetadata[]", XSD::QName.new(NsVim25, "ProfilePolicyMetadata")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PolicyOption,
    :schema_type => XSD::QName.new(NsVim25, "PolicyOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["parameter", "VSphereCloud::KeyAnyValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPolicyOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPolicyOption"),
    :schema_element => [
      ["policyOption", ["VSphereCloud::PolicyOption[]", XSD::QName.new(NsVim25, "PolicyOption")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CompositePolicyOption,
    :schema_type => XSD::QName.new(NsVim25, "CompositePolicyOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "PolicyOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["parameter", "VSphereCloud::KeyAnyValue[]", [0, nil]],
      ["option", "VSphereCloud::PolicyOption[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileCreateSpec,
    :schema_type => XSD::QName.new(NsVim25, "ProfileCreateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileSerializedCreateSpec,
    :schema_type => XSD::QName.new(NsVim25, "ProfileSerializedCreateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileCreateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["profileConfigString", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ProfileConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileDescriptionSection,
    :schema_type => XSD::QName.new(NsVim25, "ProfileDescriptionSection"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["description", "VSphereCloud::ExtendedElementDescription"],
      ["message", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfProfileDescriptionSection,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileDescriptionSection"),
    :schema_element => [
      ["profileDescriptionSection", ["VSphereCloud::ProfileDescriptionSection[]", XSD::QName.new(NsVim25, "ProfileDescriptionSection")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileDescription,
    :schema_type => XSD::QName.new(NsVim25, "ProfileDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["section", "VSphereCloud::ProfileDescriptionSection[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ProfileMetadata"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "VSphereCloud::ExtendedDescription", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfProfileMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileMetadata"),
    :schema_element => [
      ["profileMetadata", ["VSphereCloud::ProfileMetadata[]", XSD::QName.new(NsVim25, "ProfileMetadata")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfilePropertyPath,
    :schema_type => XSD::QName.new(NsVim25, "ProfilePropertyPath"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["profilePath", "SOAP::SOAPString"],
      ["policyId", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterProfileConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterProfileConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["complyProfile", "VSphereCloud::ComplianceProfile", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterProfileCreateSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterProfileCreateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileCreateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterProfileConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterProfileConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterProfileCreateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterProfileCompleteConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterProfileCompleteConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterProfileConfigSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["complyProfile", "VSphereCloud::ComplianceProfile", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterProfileConfigServiceCreateSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterProfileConfigServiceCreateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterProfileConfigSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["serviceType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileExecuteError,
    :schema_type => XSD::QName.new(NsVim25, "ProfileExecuteError"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "VSphereCloud::ProfilePropertyPath", [0, 1]],
      ["message", "VSphereCloud::LocalizableMessage"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfProfileExecuteError,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileExecuteError"),
    :schema_element => [
      ["profileExecuteError", ["VSphereCloud::ProfileExecuteError[]", XSD::QName.new(NsVim25, "ProfileExecuteError")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileExecuteResult,
    :schema_type => XSD::QName.new(NsVim25, "ProfileExecuteResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["status", "SOAP::SOAPString"],
      ["configSpec", "VSphereCloud::HostConfigSpec", [0, 1]],
      ["inapplicablePath", "SOAP::SOAPString[]", [0, nil]],
      ["requireInput", "VSphereCloud::ProfileDeferredPolicyOptionParameter[]", [0, nil]],
      ["error", "VSphereCloud::ProfileExecuteError[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostApplyProfile,
    :schema_type => XSD::QName.new(NsVim25, "HostApplyProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["memory", "VSphereCloud::HostMemoryProfile", [0, 1]],
      ["storage", "VSphereCloud::StorageProfile", [0, 1]],
      ["network", "VSphereCloud::NetworkProfile", [0, 1]],
      ["datetime", "VSphereCloud::DateTimeProfile", [0, 1]],
      ["firewall", "VSphereCloud::FirewallProfile", [0, 1]],
      ["security", "VSphereCloud::SecurityProfile", [0, 1]],
      ["service", "VSphereCloud::ServiceProfile[]", [0, nil]],
      ["option", "VSphereCloud::OptionProfile[]", [0, nil]],
      ["userAccount", "VSphereCloud::UserProfile[]", [0, nil]],
      ["usergroupAccount", "VSphereCloud::UserGroupProfile[]", [0, nil]],
      ["authentication", "VSphereCloud::AuthenticationProfile", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PhysicalNicProfile,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPhysicalNicProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPhysicalNicProfile"),
    :schema_element => [
      ["physicalNicProfile", ["VSphereCloud::PhysicalNicProfile[]", XSD::QName.new(NsVim25, "PhysicalNicProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostMemoryProfile,
    :schema_type => XSD::QName.new(NsVim25, "HostMemoryProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UserProfile,
    :schema_type => XSD::QName.new(NsVim25, "UserProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfUserProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfUserProfile"),
    :schema_element => [
      ["userProfile", ["VSphereCloud::UserProfile[]", XSD::QName.new(NsVim25, "UserProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UserGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "UserGroupProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfUserGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfUserGroupProfile"),
    :schema_element => [
      ["userGroupProfile", ["VSphereCloud::UserGroupProfile[]", XSD::QName.new(NsVim25, "UserGroupProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SecurityProfile,
    :schema_type => XSD::QName.new(NsVim25, "SecurityProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["permission", "VSphereCloud::PermissionProfile[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OptionProfile,
    :schema_type => XSD::QName.new(NsVim25, "OptionProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfOptionProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOptionProfile"),
    :schema_element => [
      ["optionProfile", ["VSphereCloud::OptionProfile[]", XSD::QName.new(NsVim25, "OptionProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DateTimeProfile,
    :schema_type => XSD::QName.new(NsVim25, "DateTimeProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ServiceProfile,
    :schema_type => XSD::QName.new(NsVim25, "ServiceProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfServiceProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfServiceProfile"),
    :schema_element => [
      ["serviceProfile", ["VSphereCloud::ServiceProfile[]", XSD::QName.new(NsVim25, "ServiceProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FirewallProfileRulesetProfile,
    :schema_type => XSD::QName.new(NsVim25, "FirewallProfileRulesetProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfFirewallProfileRulesetProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfFirewallProfileRulesetProfile"),
    :schema_element => [
      ["firewallProfileRulesetProfile", ["VSphereCloud::FirewallProfileRulesetProfile[]", XSD::QName.new(NsVim25, "FirewallProfileRulesetProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FirewallProfile,
    :schema_type => XSD::QName.new(NsVim25, "FirewallProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["ruleset", "VSphereCloud::FirewallProfileRulesetProfile[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NasStorageProfile,
    :schema_type => XSD::QName.new(NsVim25, "NasStorageProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfNasStorageProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNasStorageProfile"),
    :schema_element => [
      ["nasStorageProfile", ["VSphereCloud::NasStorageProfile[]", XSD::QName.new(NsVim25, "NasStorageProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StorageProfile,
    :schema_type => XSD::QName.new(NsVim25, "StorageProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["nasStorage", "VSphereCloud::NasStorageProfile[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetworkProfileDnsConfigProfile,
    :schema_type => XSD::QName.new(NsVim25, "NetworkProfileDnsConfigProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetworkProfile,
    :schema_type => XSD::QName.new(NsVim25, "NetworkProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["vswitch", "VSphereCloud::VirtualSwitchProfile[]", [0, nil]],
      ["vmPortGroup", "VSphereCloud::VmPortGroupProfile[]", [0, nil]],
      ["hostPortGroup", "VSphereCloud::HostPortGroupProfile[]", [0, nil]],
      ["serviceConsolePortGroup", "VSphereCloud::ServiceConsolePortGroupProfile[]", [0, nil]],
      ["dnsConfig", "VSphereCloud::NetworkProfileDnsConfigProfile", [0, 1]],
      ["ipRouteConfig", "VSphereCloud::IpRouteProfile", [0, 1]],
      ["consoleIpRouteConfig", "VSphereCloud::IpRouteProfile", [0, 1]],
      ["pnic", "VSphereCloud::PhysicalNicProfile[]", [0, nil]],
      ["dvswitch", "VSphereCloud::DvsProfile[]", [0, nil]],
      ["dvsServiceConsoleNic", "VSphereCloud::DvsServiceConsoleVNicProfile[]", [0, nil]],
      ["dvsHostNic", "VSphereCloud::DvsHostVNicProfile[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsVNicProfile,
    :schema_type => XSD::QName.new(NsVim25, "DvsVNicProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["ipConfig", "VSphereCloud::IpAddressProfile"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsServiceConsoleVNicProfile,
    :schema_type => XSD::QName.new(NsVim25, "DvsServiceConsoleVNicProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsVNicProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["ipConfig", "VSphereCloud::IpAddressProfile"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDvsServiceConsoleVNicProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDvsServiceConsoleVNicProfile"),
    :schema_element => [
      ["dvsServiceConsoleVNicProfile", ["VSphereCloud::DvsServiceConsoleVNicProfile[]", XSD::QName.new(NsVim25, "DvsServiceConsoleVNicProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsHostVNicProfile,
    :schema_type => XSD::QName.new(NsVim25, "DvsHostVNicProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsVNicProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["ipConfig", "VSphereCloud::IpAddressProfile"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDvsHostVNicProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDvsHostVNicProfile"),
    :schema_element => [
      ["dvsHostVNicProfile", ["VSphereCloud::DvsHostVNicProfile[]", XSD::QName.new(NsVim25, "DvsHostVNicProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DvsProfile,
    :schema_type => XSD::QName.new(NsVim25, "DvsProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["uplink", "VSphereCloud::PnicUplinkProfile[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfDvsProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDvsProfile"),
    :schema_element => [
      ["dvsProfile", ["VSphereCloud::DvsProfile[]", XSD::QName.new(NsVim25, "DvsProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PnicUplinkProfile,
    :schema_type => XSD::QName.new(NsVim25, "PnicUplinkProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPnicUplinkProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPnicUplinkProfile"),
    :schema_element => [
      ["pnicUplinkProfile", ["VSphereCloud::PnicUplinkProfile[]", XSD::QName.new(NsVim25, "PnicUplinkProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IpRouteProfile,
    :schema_type => XSD::QName.new(NsVim25, "IpRouteProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["staticRoute", "VSphereCloud::StaticRouteProfile[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StaticRouteProfile,
    :schema_type => XSD::QName.new(NsVim25, "StaticRouteProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfStaticRouteProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfStaticRouteProfile"),
    :schema_element => [
      ["staticRouteProfile", ["VSphereCloud::StaticRouteProfile[]", XSD::QName.new(NsVim25, "StaticRouteProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LinkProfile,
    :schema_type => XSD::QName.new(NsVim25, "LinkProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NumPortsProfile,
    :schema_type => XSD::QName.new(NsVim25, "NumPortsProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSwitchProfile,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSwitchProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["link", "VSphereCloud::LinkProfile"],
      ["numPorts", "VSphereCloud::NumPortsProfile"],
      ["networkPolicy", "VSphereCloud::NetworkPolicyProfile"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualSwitchProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualSwitchProfile"),
    :schema_element => [
      ["virtualSwitchProfile", ["VSphereCloud::VirtualSwitchProfile[]", XSD::QName.new(NsVim25, "VirtualSwitchProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VlanProfile,
    :schema_type => XSD::QName.new(NsVim25, "VlanProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSwitchSelectionProfile,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSwitchSelectionProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PortGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "PortGroupProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VSphereCloud::VlanProfile"],
      ["vswitch", "VSphereCloud::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VSphereCloud::NetworkPolicyProfile"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmPortGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "VmPortGroupProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "PortGroupProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VSphereCloud::VlanProfile"],
      ["vswitch", "VSphereCloud::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VSphereCloud::NetworkPolicyProfile"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVmPortGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVmPortGroupProfile"),
    :schema_element => [
      ["vmPortGroupProfile", ["VSphereCloud::VmPortGroupProfile[]", XSD::QName.new(NsVim25, "VmPortGroupProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPortGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "HostPortGroupProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "PortGroupProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VSphereCloud::VlanProfile"],
      ["vswitch", "VSphereCloud::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VSphereCloud::NetworkPolicyProfile"],
      ["ipConfig", "VSphereCloud::IpAddressProfile"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostPortGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPortGroupProfile"),
    :schema_element => [
      ["hostPortGroupProfile", ["VSphereCloud::HostPortGroupProfile[]", XSD::QName.new(NsVim25, "HostPortGroupProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ServiceConsolePortGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "ServiceConsolePortGroupProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "PortGroupProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VSphereCloud::VlanProfile"],
      ["vswitch", "VSphereCloud::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VSphereCloud::NetworkPolicyProfile"],
      ["ipConfig", "VSphereCloud::IpAddressProfile"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfServiceConsolePortGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfServiceConsolePortGroupProfile"),
    :schema_element => [
      ["serviceConsolePortGroupProfile", ["VSphereCloud::ServiceConsolePortGroupProfile[]", XSD::QName.new(NsVim25, "ServiceConsolePortGroupProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetworkPolicyProfile,
    :schema_type => XSD::QName.new(NsVim25, "NetworkPolicyProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IpAddressProfile,
    :schema_type => XSD::QName.new(NsVim25, "IpAddressProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AuthenticationProfile,
    :schema_type => XSD::QName.new(NsVim25, "AuthenticationProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["activeDirectory", "VSphereCloud::ActiveDirectoryProfile", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ActiveDirectoryProfile,
    :schema_type => XSD::QName.new(NsVim25, "ActiveDirectoryProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PermissionProfile,
    :schema_type => XSD::QName.new(NsVim25, "PermissionProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfPermissionProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPermissionProfile"),
    :schema_element => [
      ["permissionProfile", ["VSphereCloud::PermissionProfile[]", XSD::QName.new(NsVim25, "PermissionProfile")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostProfileConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostProfileConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["applyProfile", "VSphereCloud::HostApplyProfile", [0, 1]],
      ["defaultComplyProfile", "VSphereCloud::ComplianceProfile", [0, 1]],
      ["defaultComplyLocator", "VSphereCloud::ComplianceLocator[]", [0, nil]],
      ["customComplyProfile", "VSphereCloud::ComplianceProfile", [0, 1]],
      ["disabledExpressionList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostProfileConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostProfileConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileCreateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostProfileCompleteConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostProfileCompleteConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostProfileConfigSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["applyProfile", "VSphereCloud::HostApplyProfile", [0, 1]],
      ["customComplyProfile", "VSphereCloud::ComplianceProfile", [0, 1]],
      ["disabledExpressionListChanged", "SOAP::SOAPBoolean"],
      ["disabledExpressionList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostProfileHostBasedConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostProfileHostBasedConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostProfileConfigSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostProfileManagerConfigTaskList,
    :schema_type => XSD::QName.new(NsVim25, "HostProfileManagerConfigTaskList"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["configSpec", "VSphereCloud::HostConfigSpec", [0, 1]],
      ["taskDescription", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScheduledTaskDetail,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskDetail"),
    :schema_basetype => XSD::QName.new(NsVim25, "TypeDescription"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["frequency", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfScheduledTaskDetail,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfScheduledTaskDetail"),
    :schema_element => [
      ["scheduledTaskDetail", ["VSphereCloud::ScheduledTaskDetail[]", XSD::QName.new(NsVim25, "ScheduledTaskDetail")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScheduledTaskDescription,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["action", "VSphereCloud::TypeDescription[]", [1, nil]],
      ["schedulerInfo", "VSphereCloud::ScheduledTaskDetail[]", [1, nil]],
      ["state", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["dayOfWeek", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["weekOfMonth", "VSphereCloud::ElementDescription[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScheduledTaskInfo,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["scheduler", "VSphereCloud::TaskScheduler"],
      ["action", "VSphereCloud::Action"],
      ["notification", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ManagedObjectReference"],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["lastModifiedTime", "SOAP::SOAPDateTime"],
      ["lastModifiedUser", "SOAP::SOAPString"],
      ["nextRunTime", "SOAP::SOAPDateTime", [0, 1]],
      ["prevRunTime", "SOAP::SOAPDateTime", [0, 1]],
      ["state", "VSphereCloud::TaskInfoState"],
      ["error", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["result", nil, [0, 1]],
      ["progress", "SOAP::SOAPInt", [0, 1]],
      ["activeTask", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["taskObject", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "TaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AfterStartupTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "AfterStartupTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["minute", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OnceTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "OnceTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["runAt", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RecurrentTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "RecurrentTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HourlyTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "HourlyTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "RecurrentTaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DailyTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "DailyTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "HourlyTaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::WeeklyTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "WeeklyTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "DailyTaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"],
      ["sunday", "SOAP::SOAPBoolean"],
      ["monday", "SOAP::SOAPBoolean"],
      ["tuesday", "SOAP::SOAPBoolean"],
      ["wednesday", "SOAP::SOAPBoolean"],
      ["thursday", "SOAP::SOAPBoolean"],
      ["friday", "SOAP::SOAPBoolean"],
      ["saturday", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MonthlyTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "MonthlyTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "DailyTaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MonthlyByDayTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "MonthlyByDayTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "MonthlyTaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"],
      ["day", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MonthlyByWeekdayTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "MonthlyByWeekdayTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "MonthlyTaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"],
      ["offset", "VSphereCloud::WeekOfMonth"],
      ["weekday", "VSphereCloud::DayOfWeek"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScheduledTaskSpec,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["scheduler", "VSphereCloud::TaskScheduler"],
      ["action", "VSphereCloud::Action"],
      ["notification", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppCloneSpecNetworkMappingPair,
    :schema_type => XSD::QName.new(NsVim25, "VAppCloneSpecNetworkMappingPair"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["source", "VSphereCloud::ManagedObjectReference"],
      ["destination", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVAppCloneSpecNetworkMappingPair,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppCloneSpecNetworkMappingPair"),
    :schema_element => [
      ["vAppCloneSpecNetworkMappingPair", ["VSphereCloud::VAppCloneSpecNetworkMappingPair[]", XSD::QName.new(NsVim25, "VAppCloneSpecNetworkMappingPair")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppCloneSpecResourceMap,
    :schema_type => XSD::QName.new(NsVim25, "VAppCloneSpecResourceMap"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["source", "VSphereCloud::ManagedObjectReference"],
      ["parent", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["resourceSpec", "VSphereCloud::ResourceConfigSpec", [0, 1]],
      ["location", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVAppCloneSpecResourceMap,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppCloneSpecResourceMap"),
    :schema_element => [
      ["vAppCloneSpecResourceMap", ["VSphereCloud::VAppCloneSpecResourceMap[]", XSD::QName.new(NsVim25, "VAppCloneSpecResourceMap")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppCloneSpec,
    :schema_type => XSD::QName.new(NsVim25, "VAppCloneSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["location", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["resourceSpec", "VSphereCloud::ResourceConfigSpec", [0, 1]],
      ["vmFolder", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["networkMapping", "VSphereCloud::VAppCloneSpecNetworkMappingPair[]", [0, nil]],
      ["property", "VSphereCloud::KeyValue[]", [0, nil]],
      ["resourceMapping", "VSphereCloud::VAppCloneSpecResourceMap[]", [0, nil]],
      ["provisioning", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppEntityConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "VAppEntityConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["tag", "SOAP::SOAPString", [0, 1]],
      ["startOrder", "SOAP::SOAPInt", [0, 1]],
      ["startDelay", "SOAP::SOAPInt", [0, 1]],
      ["waitingForGuest", "SOAP::SOAPBoolean", [0, 1]],
      ["startAction", "SOAP::SOAPString", [0, 1]],
      ["stopDelay", "SOAP::SOAPInt", [0, 1]],
      ["stopAction", "SOAP::SOAPString", [0, 1]],
      ["destroyWithParent", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVAppEntityConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppEntityConfigInfo"),
    :schema_element => [
      ["vAppEntityConfigInfo", ["VSphereCloud::VAppEntityConfigInfo[]", XSD::QName.new(NsVim25, "VAppEntityConfigInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppIPAssignmentInfo,
    :schema_type => XSD::QName.new(NsVim25, "VAppIPAssignmentInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["supportedAllocationScheme", "SOAP::SOAPString[]", [0, nil]],
      ["ipAllocationPolicy", "SOAP::SOAPString", [0, 1]],
      ["supportedIpProtocol", "SOAP::SOAPString[]", [0, nil]],
      ["ipProtocol", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IpPoolIpPoolConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "IpPoolIpPoolConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["subnetAddress", "SOAP::SOAPString", [0, 1]],
      ["netmask", "SOAP::SOAPString", [0, 1]],
      ["gateway", "SOAP::SOAPString", [0, 1]],
      ["range", "SOAP::SOAPString", [0, 1]],
      ["dns", "SOAP::SOAPString[]", [0, nil]],
      ["dhcpServerAvailable", "SOAP::SOAPBoolean", [0, 1]],
      ["ipPoolEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IpPoolAssociation,
    :schema_type => XSD::QName.new(NsVim25, "IpPoolAssociation"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["network", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["networkName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfIpPoolAssociation,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfIpPoolAssociation"),
    :schema_element => [
      ["ipPoolAssociation", ["VSphereCloud::IpPoolAssociation[]", XSD::QName.new(NsVim25, "IpPoolAssociation")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::IpPool,
    :schema_type => XSD::QName.new(NsVim25, "IpPool"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["ipv4Config", "VSphereCloud::IpPoolIpPoolConfigInfo", [0, 1]],
      ["ipv6Config", "VSphereCloud::IpPoolIpPoolConfigInfo", [0, 1]],
      ["dnsDomain", "SOAP::SOAPString", [0, 1]],
      ["dnsSearchPath", "SOAP::SOAPString", [0, 1]],
      ["hostPrefix", "SOAP::SOAPString", [0, 1]],
      ["httpProxy", "SOAP::SOAPString", [0, 1]],
      ["networkAssociation", "VSphereCloud::IpPoolAssociation[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfIpPool,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfIpPool"),
    :schema_element => [
      ["ipPool", ["VSphereCloud::IpPool[]", XSD::QName.new(NsVim25, "IpPool")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppOvfSectionInfo,
    :schema_type => XSD::QName.new(NsVim25, "VAppOvfSectionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["namespace", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["atEnvelopeLevel", "SOAP::SOAPBoolean", [0, 1]],
      ["contents", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVAppOvfSectionInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppOvfSectionInfo"),
    :schema_element => [
      ["vAppOvfSectionInfo", ["VSphereCloud::VAppOvfSectionInfo[]", XSD::QName.new(NsVim25, "VAppOvfSectionInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppProductInfo,
    :schema_type => XSD::QName.new(NsVim25, "VAppProductInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["classId", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["fullVersion", "SOAP::SOAPString", [0, 1]],
      ["vendorUrl", "SOAP::SOAPString", [0, 1]],
      ["productUrl", "SOAP::SOAPString", [0, 1]],
      ["appUrl", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVAppProductInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppProductInfo"),
    :schema_element => [
      ["vAppProductInfo", ["VSphereCloud::VAppProductInfo[]", XSD::QName.new(NsVim25, "VAppProductInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppPropertyInfo,
    :schema_type => XSD::QName.new(NsVim25, "VAppPropertyInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["classId", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["id", "SOAP::SOAPString", [0, 1]],
      ["category", "SOAP::SOAPString", [0, 1]],
      ["label", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["userConfigurable", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultValue", "SOAP::SOAPString", [0, 1]],
      ["value", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVAppPropertyInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppPropertyInfo"),
    :schema_element => [
      ["vAppPropertyInfo", ["VSphereCloud::VAppPropertyInfo[]", XSD::QName.new(NsVim25, "VAppPropertyInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "VAppConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["product", "VSphereCloud::VAppProductInfo[]", [0, nil]],
      ["property", "VSphereCloud::VAppPropertyInfo[]", [0, nil]],
      ["ipAssignment", "VSphereCloud::VAppIPAssignmentInfo"],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VSphereCloud::VAppOvfSectionInfo[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean"],
      ["installBootStopDelay", "SOAP::SOAPInt"],
      ["entityConfig", "VSphereCloud::VAppEntityConfigInfo[]", [0, nil]],
      ["annotation", "SOAP::SOAPString"],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "VAppConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["product", "VSphereCloud::VAppProductSpec[]", [0, nil]],
      ["property", "VSphereCloud::VAppPropertySpec[]", [0, nil]],
      ["ipAssignment", "VSphereCloud::VAppIPAssignmentInfo", [0, 1]],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VSphereCloud::VAppOvfSectionSpec[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["installBootStopDelay", "SOAP::SOAPInt", [0, 1]],
      ["entityConfig", "VSphereCloud::VAppEntityConfigInfo[]", [0, nil]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualAppImportSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualAppImportSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ImportSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entityConfig", "VSphereCloud::VAppEntityConfigInfo", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["vAppConfigSpec", "VSphereCloud::VAppConfigSpec"],
      ["resourcePoolSpec", "VSphereCloud::ResourceConfigSpec"],
      ["child", "VSphereCloud::ImportSpec[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["product", "VSphereCloud::VAppProductInfo[]", [0, nil]],
      ["property", "VSphereCloud::VAppPropertyInfo[]", [0, nil]],
      ["ipAssignment", "VSphereCloud::VAppIPAssignmentInfo"],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VSphereCloud::VAppOvfSectionInfo[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean"],
      ["installBootStopDelay", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["product", "VSphereCloud::VAppProductSpec[]", [0, nil]],
      ["property", "VSphereCloud::VAppPropertySpec[]", [0, nil]],
      ["ipAssignment", "VSphereCloud::VAppIPAssignmentInfo", [0, 1]],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VSphereCloud::VAppOvfSectionSpec[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["installBootStopDelay", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppProductSpec,
    :schema_type => XSD::QName.new(NsVim25, "VAppProductSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::VAppProductInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVAppProductSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppProductSpec"),
    :schema_element => [
      ["vAppProductSpec", ["VSphereCloud::VAppProductSpec[]", XSD::QName.new(NsVim25, "VAppProductSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppPropertySpec,
    :schema_type => XSD::QName.new(NsVim25, "VAppPropertySpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::VAppPropertyInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVAppPropertySpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppPropertySpec"),
    :schema_element => [
      ["vAppPropertySpec", ["VSphereCloud::VAppPropertySpec[]", XSD::QName.new(NsVim25, "VAppPropertySpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppOvfSectionSpec,
    :schema_type => XSD::QName.new(NsVim25, "VAppOvfSectionSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::VAppOvfSectionInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVAppOvfSectionSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppOvfSectionSpec"),
    :schema_element => [
      ["vAppOvfSectionSpec", ["VSphereCloud::VAppOvfSectionSpec[]", XSD::QName.new(NsVim25, "VAppOvfSectionSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineAffinityInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineAffinityInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["affinitySet", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineBootOptions,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineBootOptions"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["bootDelay", "SOAP::SOAPLong", [0, 1]],
      ["enterBIOSSetup", "SOAP::SOAPBoolean", [0, 1]],
      ["bootRetryEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["bootRetryDelay", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineCapability,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["snapshotOperationsSupported", "SOAP::SOAPBoolean"],
      ["multipleSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["snapshotConfigSupported", "SOAP::SOAPBoolean"],
      ["poweredOffSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["memorySnapshotsSupported", "SOAP::SOAPBoolean"],
      ["revertToSnapshotSupported", "SOAP::SOAPBoolean"],
      ["quiescedSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["disableSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["lockSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["consolePreferencesSupported", "SOAP::SOAPBoolean"],
      ["cpuFeatureMaskSupported", "SOAP::SOAPBoolean"],
      ["s1AcpiManagementSupported", "SOAP::SOAPBoolean"],
      ["settingScreenResolutionSupported", "SOAP::SOAPBoolean"],
      ["toolsAutoUpdateSupported", "SOAP::SOAPBoolean"],
      ["vmNpivWwnSupported", "SOAP::SOAPBoolean"],
      ["npivWwnOnNonRdmVmSupported", "SOAP::SOAPBoolean"],
      ["vmNpivWwnDisableSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmNpivWwnUpdateSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["swapPlacementSupported", "SOAP::SOAPBoolean"],
      ["toolsSyncTimeSupported", "SOAP::SOAPBoolean"],
      ["virtualMmuUsageSupported", "SOAP::SOAPBoolean"],
      ["diskSharesSupported", "SOAP::SOAPBoolean"],
      ["bootOptionsSupported", "SOAP::SOAPBoolean"],
      ["bootRetryOptionsSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["settingVideoRamSizeSupported", "SOAP::SOAPBoolean"],
      ["settingDisplayTopologySupported", "SOAP::SOAPBoolean", [0, 1]],
      ["recordReplaySupported", "SOAP::SOAPBoolean", [0, 1]],
      ["changeTrackingSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineCdromInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineCdromInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineCdromInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineCdromInfo"),
    :schema_element => [
      ["virtualMachineCdromInfo", ["VSphereCloud::VirtualMachineCdromInfo[]", XSD::QName.new(NsVim25, "VirtualMachineCdromInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineCloneSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineCloneSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["location", "VSphereCloud::VirtualMachineRelocateSpec"],
      ["template", "SOAP::SOAPBoolean"],
      ["config", "VSphereCloud::VirtualMachineConfigSpec", [0, 1]],
      ["customization", "VSphereCloud::CustomizationSpec", [0, 1]],
      ["powerOn", "SOAP::SOAPBoolean"],
      ["snapshot", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigInfoDatastoreUrlPair,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigInfoDatastoreUrlPair"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineConfigInfoDatastoreUrlPair,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineConfigInfoDatastoreUrlPair"),
    :schema_element => [
      ["virtualMachineConfigInfoDatastoreUrlPair", ["VSphereCloud::VirtualMachineConfigInfoDatastoreUrlPair[]", XSD::QName.new(NsVim25, "VirtualMachineConfigInfoDatastoreUrlPair")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeVersion", "SOAP::SOAPString"],
      ["modified", "SOAP::SOAPDateTime"],
      ["name", "SOAP::SOAPString"],
      ["guestFullName", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["npivNodeWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivPortWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivWorldWideNameType", "SOAP::SOAPString", [0, 1]],
      ["npivDesiredNodeWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivDesiredPortWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivTemporaryDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["npivOnNonRdmDisks", "SOAP::SOAPBoolean", [0, 1]],
      ["locationId", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["guestId", "SOAP::SOAPString"],
      ["alternateGuestName", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["files", "VSphereCloud::VirtualMachineFileInfo"],
      ["tools", "VSphereCloud::ToolsConfigInfo", [0, 1]],
      ["flags", "VSphereCloud::VirtualMachineFlagInfo"],
      ["consolePreferences", "VSphereCloud::VirtualMachineConsolePreferences", [0, 1]],
      ["defaultPowerOps", "VSphereCloud::VirtualMachineDefaultPowerOpInfo"],
      ["hardware", "VSphereCloud::VirtualHardware"],
      ["cpuAllocation", "VSphereCloud::ResourceAllocationInfo", [0, 1]],
      ["memoryAllocation", "VSphereCloud::ResourceAllocationInfo", [0, 1]],
      ["memoryHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotRemoveEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["hotPlugMemoryLimit", "SOAP::SOAPLong", [0, 1]],
      ["hotPlugMemoryIncrementSize", "SOAP::SOAPLong", [0, 1]],
      ["cpuAffinity", "VSphereCloud::VirtualMachineAffinityInfo", [0, 1]],
      ["memoryAffinity", "VSphereCloud::VirtualMachineAffinityInfo", [0, 1]],
      ["networkShaper", "VSphereCloud::VirtualMachineNetworkShaperInfo", [0, 1]],
      ["extraConfig", "VSphereCloud::OptionValue[]", [0, nil]],
      ["cpuFeatureMask", "VSphereCloud::HostCpuIdInfo[]", [0, nil]],
      ["datastoreUrl", "VSphereCloud::VirtualMachineConfigInfoDatastoreUrlPair[]", [0, nil]],
      ["swapPlacement", "SOAP::SOAPString", [0, 1]],
      ["bootOptions", "VSphereCloud::VirtualMachineBootOptions", [0, 1]],
      ["ftInfo", "VSphereCloud::FaultToleranceConfigInfo", [0, 1]],
      ["vAppConfig", "VSphereCloud::VmConfigInfo", [0, 1]],
      ["vAssertsEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["changeTrackingEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["guestOSDescriptor", "VSphereCloud::GuestOsDescriptor[]", [1, nil]],
      ["guestOSDefaultIndex", "SOAP::SOAPInt"],
      ["hardwareOptions", "VSphereCloud::VirtualHardwareOption"],
      ["capabilities", "VSphereCloud::VirtualMachineCapability"],
      ["datastore", "VSphereCloud::DatastoreOption"],
      ["defaultDevice", "VSphereCloud::VirtualDevice[]", [0, nil]],
      ["supportedMonitorType", "SOAP::SOAPString[]", [1, nil]],
      ["supportedOvfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["supportedOvfInstallTransport", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigOptionDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigOptionDescriptor"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["createSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultConfigOption", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineConfigOptionDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineConfigOptionDescriptor"),
    :schema_element => [
      ["virtualMachineConfigOptionDescriptor", ["VSphereCloud::VirtualMachineConfigOptionDescriptor[]", XSD::QName.new(NsVim25, "VirtualMachineConfigOptionDescriptor")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineCpuIdInfoSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineCpuIdInfoSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::HostCpuIdInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineCpuIdInfoSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineCpuIdInfoSpec"),
    :schema_element => [
      ["virtualMachineCpuIdInfoSpec", ["VSphereCloud::VirtualMachineCpuIdInfoSpec[]", XSD::QName.new(NsVim25, "VirtualMachineCpuIdInfoSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["npivNodeWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivPortWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivWorldWideNameType", "SOAP::SOAPString", [0, 1]],
      ["npivDesiredNodeWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivDesiredPortWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivTemporaryDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["npivOnNonRdmDisks", "SOAP::SOAPBoolean", [0, 1]],
      ["npivWorldWideNameOp", "SOAP::SOAPString", [0, 1]],
      ["locationId", "SOAP::SOAPString", [0, 1]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["alternateGuestName", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["files", "VSphereCloud::VirtualMachineFileInfo", [0, 1]],
      ["tools", "VSphereCloud::ToolsConfigInfo", [0, 1]],
      ["flags", "VSphereCloud::VirtualMachineFlagInfo", [0, 1]],
      ["consolePreferences", "VSphereCloud::VirtualMachineConsolePreferences", [0, 1]],
      ["powerOpInfo", "VSphereCloud::VirtualMachineDefaultPowerOpInfo", [0, 1]],
      ["numCPUs", "SOAP::SOAPInt", [0, 1]],
      ["memoryMB", "SOAP::SOAPLong", [0, 1]],
      ["memoryHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotRemoveEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["deviceChange", "VSphereCloud::VirtualDeviceConfigSpec[]", [0, nil]],
      ["cpuAllocation", "VSphereCloud::ResourceAllocationInfo", [0, 1]],
      ["memoryAllocation", "VSphereCloud::ResourceAllocationInfo", [0, 1]],
      ["cpuAffinity", "VSphereCloud::VirtualMachineAffinityInfo", [0, 1]],
      ["memoryAffinity", "VSphereCloud::VirtualMachineAffinityInfo", [0, 1]],
      ["networkShaper", "VSphereCloud::VirtualMachineNetworkShaperInfo", [0, 1]],
      ["cpuFeatureMask", "VSphereCloud::VirtualMachineCpuIdInfoSpec[]", [0, nil]],
      ["extraConfig", "VSphereCloud::OptionValue[]", [0, nil]],
      ["swapPlacement", "SOAP::SOAPString", [0, 1]],
      ["bootOptions", "VSphereCloud::VirtualMachineBootOptions", [0, 1]],
      ["vAppConfig", "VSphereCloud::VmConfigSpec", [0, 1]],
      ["ftInfo", "VSphereCloud::FaultToleranceConfigInfo", [0, 1]],
      ["vAppConfigRemoved", "SOAP::SOAPBoolean", [0, 1]],
      ["vAssertsEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["changeTrackingEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ConfigTarget,
    :schema_type => XSD::QName.new(NsVim25, "ConfigTarget"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["numCpus", "SOAP::SOAPInt"],
      ["numCpuCores", "SOAP::SOAPInt"],
      ["numNumaNodes", "SOAP::SOAPInt"],
      ["datastore", "VSphereCloud::VirtualMachineDatastoreInfo[]", [0, nil]],
      ["network", "VSphereCloud::VirtualMachineNetworkInfo[]", [0, nil]],
      ["distributedVirtualPortgroup", "VSphereCloud::DistributedVirtualPortgroupInfo[]", [0, nil]],
      ["distributedVirtualSwitch", "VSphereCloud::DistributedVirtualSwitchInfo[]", [0, nil]],
      ["cdRom", "VSphereCloud::VirtualMachineCdromInfo[]", [0, nil]],
      ["serial", "VSphereCloud::VirtualMachineSerialInfo[]", [0, nil]],
      ["parallel", "VSphereCloud::VirtualMachineParallelInfo[]", [0, nil]],
      ["sound", "VSphereCloud::VirtualMachineSoundInfo[]", [0, nil]],
      ["usb", "VSphereCloud::VirtualMachineUsbInfo[]", [0, nil]],
      ["floppy", "VSphereCloud::VirtualMachineFloppyInfo[]", [0, nil]],
      ["legacyNetworkInfo", "VSphereCloud::VirtualMachineLegacyNetworkSwitchInfo[]", [0, nil]],
      ["scsiPassthrough", "VSphereCloud::VirtualMachineScsiPassthroughInfo[]", [0, nil]],
      ["scsiDisk", "VSphereCloud::VirtualMachineScsiDiskDeviceInfo[]", [0, nil]],
      ["ideDisk", "VSphereCloud::VirtualMachineIdeDiskDeviceInfo[]", [0, nil]],
      ["maxMemMBOptimalPerf", "SOAP::SOAPInt"],
      ["resourcePool", "VSphereCloud::ResourcePoolRuntimeInfo", [0, 1]],
      ["autoVmotion", "SOAP::SOAPBoolean", [0, 1]],
      ["pciPassthrough", "VSphereCloud::VirtualMachinePciPassthroughInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineConsolePreferences,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConsolePreferences"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["powerOnWhenOpened", "SOAP::SOAPBoolean", [0, 1]],
      ["enterFullScreenOnPowerOn", "SOAP::SOAPBoolean", [0, 1]],
      ["closeOnPowerOffOrSuspend", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineDatastoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDatastoreInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["datastore", "VSphereCloud::DatastoreSummary"],
      ["capability", "VSphereCloud::DatastoreCapability"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["mode", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineDatastoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineDatastoreInfo"),
    :schema_element => [
      ["virtualMachineDatastoreInfo", ["VSphereCloud::VirtualMachineDatastoreInfo[]", XSD::QName.new(NsVim25, "VirtualMachineDatastoreInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineDatastoreVolumeOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDatastoreVolumeOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileSystemType", "SOAP::SOAPString"],
      ["majorVersion", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineDatastoreVolumeOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineDatastoreVolumeOption"),
    :schema_element => [
      ["virtualMachineDatastoreVolumeOption", ["VSphereCloud::VirtualMachineDatastoreVolumeOption[]", XSD::QName.new(NsVim25, "VirtualMachineDatastoreVolumeOption")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreOption,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["unsupportedVolumes", "VSphereCloud::VirtualMachineDatastoreVolumeOption[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineDefaultPowerOpInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDefaultPowerOpInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["powerOffType", "SOAP::SOAPString", [0, 1]],
      ["suspendType", "SOAP::SOAPString", [0, 1]],
      ["resetType", "SOAP::SOAPString", [0, 1]],
      ["defaultPowerOffType", "SOAP::SOAPString", [0, 1]],
      ["defaultSuspendType", "SOAP::SOAPString", [0, 1]],
      ["defaultResetType", "SOAP::SOAPString", [0, 1]],
      ["standbyAction", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineDeviceRuntimeInfoDeviceRuntimeState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDeviceRuntimeInfoDeviceRuntimeState"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineDeviceRuntimeInfoDeviceRuntimeState"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmDirectPathGen2Active", "SOAP::SOAPBoolean"],
      ["vmDirectPathGen2InactiveReasonVm", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonOther", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonExtended", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineDeviceRuntimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDeviceRuntimeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["runtimeState", "VSphereCloud::VirtualMachineDeviceRuntimeInfoDeviceRuntimeState"],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineDeviceRuntimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineDeviceRuntimeInfo"),
    :schema_element => [
      ["virtualMachineDeviceRuntimeInfo", ["VSphereCloud::VirtualMachineDeviceRuntimeInfo[]", XSD::QName.new(NsVim25, "VirtualMachineDeviceRuntimeInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineDiskDeviceInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDiskDeviceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FaultToleranceConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["role", "SOAP::SOAPInt"],
      ["instanceUuids", "SOAP::SOAPString[]", [1, nil]],
      ["configPaths", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FaultTolerancePrimaryConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "FaultTolerancePrimaryConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FaultToleranceConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["role", "SOAP::SOAPInt"],
      ["instanceUuids", "SOAP::SOAPString[]", [1, nil]],
      ["configPaths", "SOAP::SOAPString[]", [1, nil]],
      ["secondaries", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FaultToleranceSecondaryConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceSecondaryConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FaultToleranceConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["role", "SOAP::SOAPInt"],
      ["instanceUuids", "SOAP::SOAPString[]", [1, nil]],
      ["configPaths", "SOAP::SOAPString[]", [1, nil]],
      ["primaryVM", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FaultToleranceSecondaryOpResult,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceSecondaryOpResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["powerOnAttempted", "SOAP::SOAPBoolean"],
      ["powerOnResult", "VSphereCloud::ClusterPowerOnVmResult", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmPathName", "SOAP::SOAPString", [0, 1]],
      ["snapshotDirectory", "SOAP::SOAPString", [0, 1]],
      ["suspendDirectory", "SOAP::SOAPString", [0, 1]],
      ["logDirectory", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutDiskLayout,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutDiskLayout"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["diskFile", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineFileLayoutDiskLayout,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineFileLayoutDiskLayout"),
    :schema_element => [
      ["virtualMachineFileLayoutDiskLayout", ["VSphereCloud::VirtualMachineFileLayoutDiskLayout[]", XSD::QName.new(NsVim25, "VirtualMachineFileLayoutDiskLayout")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutSnapshotLayout,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutSnapshotLayout"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["snapshotFile", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineFileLayoutSnapshotLayout,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineFileLayoutSnapshotLayout"),
    :schema_element => [
      ["virtualMachineFileLayoutSnapshotLayout", ["VSphereCloud::VirtualMachineFileLayoutSnapshotLayout[]", XSD::QName.new(NsVim25, "VirtualMachineFileLayoutSnapshotLayout")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayout,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayout"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["configFile", "SOAP::SOAPString[]", [0, nil]],
      ["logFile", "SOAP::SOAPString[]", [0, nil]],
      ["disk", "VSphereCloud::VirtualMachineFileLayoutDiskLayout[]", [0, nil]],
      ["snapshot", "VSphereCloud::VirtualMachineFileLayoutSnapshotLayout[]", [0, nil]],
      ["swapFile", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutExFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["size", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineFileLayoutExFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineFileLayoutExFileInfo"),
    :schema_element => [
      ["virtualMachineFileLayoutExFileInfo", ["VSphereCloud::VirtualMachineFileLayoutExFileInfo[]", XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExFileInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutExDiskUnit,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExDiskUnit"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileKey", "SOAP::SOAPInt[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineFileLayoutExDiskUnit,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineFileLayoutExDiskUnit"),
    :schema_element => [
      ["virtualMachineFileLayoutExDiskUnit", ["VSphereCloud::VirtualMachineFileLayoutExDiskUnit[]", XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExDiskUnit")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutExDiskLayout,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExDiskLayout"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chain", "VSphereCloud::VirtualMachineFileLayoutExDiskUnit[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineFileLayoutExDiskLayout,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineFileLayoutExDiskLayout"),
    :schema_element => [
      ["virtualMachineFileLayoutExDiskLayout", ["VSphereCloud::VirtualMachineFileLayoutExDiskLayout[]", XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExDiskLayout")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutExSnapshotLayout,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExSnapshotLayout"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["dataKey", "SOAP::SOAPInt"],
      ["disk", "VSphereCloud::VirtualMachineFileLayoutExDiskLayout[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineFileLayoutExSnapshotLayout,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineFileLayoutExSnapshotLayout"),
    :schema_element => [
      ["virtualMachineFileLayoutExSnapshotLayout", ["VSphereCloud::VirtualMachineFileLayoutExSnapshotLayout[]", XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExSnapshotLayout")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutEx,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutEx"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["file", "VSphereCloud::VirtualMachineFileLayoutExFileInfo[]", [0, nil]],
      ["disk", "VSphereCloud::VirtualMachineFileLayoutExDiskLayout[]", [0, nil]],
      ["snapshot", "VSphereCloud::VirtualMachineFileLayoutExSnapshotLayout[]", [0, nil]],
      ["timestamp", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFlagInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFlagInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["disableAcceleration", "SOAP::SOAPBoolean", [0, 1]],
      ["enableLogging", "SOAP::SOAPBoolean", [0, 1]],
      ["useToe", "SOAP::SOAPBoolean", [0, 1]],
      ["runWithDebugInfo", "SOAP::SOAPBoolean", [0, 1]],
      ["monitorType", "SOAP::SOAPString", [0, 1]],
      ["htSharing", "SOAP::SOAPString", [0, 1]],
      ["snapshotDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["snapshotLocked", "SOAP::SOAPBoolean", [0, 1]],
      ["diskUuidEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["virtualMmuUsage", "SOAP::SOAPString", [0, 1]],
      ["virtualExecUsage", "SOAP::SOAPString", [0, 1]],
      ["snapshotPowerOffBehavior", "SOAP::SOAPString", [0, 1]],
      ["recordReplayEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFloppyInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFloppyInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineFloppyInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineFloppyInfo"),
    :schema_element => [
      ["virtualMachineFloppyInfo", ["VSphereCloud::VirtualMachineFloppyInfo[]", XSD::QName.new(NsVim25, "VirtualMachineFloppyInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GuestDiskInfo,
    :schema_type => XSD::QName.new(NsVim25, "GuestDiskInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskPath", "SOAP::SOAPString", [0, 1]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["freeSpace", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfGuestDiskInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfGuestDiskInfo"),
    :schema_element => [
      ["guestDiskInfo", ["VSphereCloud::GuestDiskInfo[]", XSD::QName.new(NsVim25, "GuestDiskInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GuestNicInfo,
    :schema_type => XSD::QName.new(NsVim25, "GuestNicInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString[]", [0, nil]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["connected", "SOAP::SOAPBoolean"],
      ["deviceConfigId", "SOAP::SOAPInt"],
      ["dnsConfig", "VSphereCloud::NetDnsConfigInfo", [0, 1]],
      ["ipConfig", "VSphereCloud::NetIpConfigInfo", [0, 1]],
      ["netBIOSConfig", "VSphereCloud::NetBIOSConfigInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfGuestNicInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfGuestNicInfo"),
    :schema_element => [
      ["guestNicInfo", ["VSphereCloud::GuestNicInfo[]", XSD::QName.new(NsVim25, "GuestNicInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GuestStackInfo,
    :schema_type => XSD::QName.new(NsVim25, "GuestStackInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dnsConfig", "VSphereCloud::NetDnsConfigInfo", [0, 1]],
      ["ipRouteConfig", "VSphereCloud::NetIpRouteConfigInfo", [0, 1]],
      ["ipStackConfig", "VSphereCloud::KeyValue[]", [0, nil]],
      ["dhcpConfig", "VSphereCloud::NetDhcpConfigInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfGuestStackInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfGuestStackInfo"),
    :schema_element => [
      ["guestStackInfo", ["VSphereCloud::GuestStackInfo[]", XSD::QName.new(NsVim25, "GuestStackInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GuestScreenInfo,
    :schema_type => XSD::QName.new(NsVim25, "GuestScreenInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["width", "SOAP::SOAPInt"],
      ["height", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GuestInfo,
    :schema_type => XSD::QName.new(NsVim25, "GuestInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["toolsStatus", "VSphereCloud::VirtualMachineToolsStatus", [0, 1]],
      ["toolsVersionStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsRunningStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsVersion", "SOAP::SOAPString", [0, 1]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["guestFamily", "SOAP::SOAPString", [0, 1]],
      ["guestFullName", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["net", "VSphereCloud::GuestNicInfo[]", [0, nil]],
      ["ipStack", "VSphereCloud::GuestStackInfo[]", [0, nil]],
      ["disk", "VSphereCloud::GuestDiskInfo[]", [0, nil]],
      ["screen", "VSphereCloud::GuestScreenInfo", [0, 1]],
      ["guestState", "SOAP::SOAPString"],
      ["appHeartbeatStatus", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::GuestOsDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "GuestOsDescriptor"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["family", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString"],
      ["supportedMaxCPUs", "SOAP::SOAPInt"],
      ["supportedMinMemMB", "SOAP::SOAPInt"],
      ["supportedMaxMemMB", "SOAP::SOAPInt"],
      ["recommendedMemMB", "SOAP::SOAPInt"],
      ["recommendedColorDepth", "SOAP::SOAPInt"],
      ["supportedDiskControllerList", "SOAP::SOAPString[]", [1, nil]],
      ["recommendedSCSIController", "SOAP::SOAPString", [0, 1]],
      ["recommendedDiskController", "SOAP::SOAPString"],
      ["supportedNumDisks", "SOAP::SOAPInt"],
      ["recommendedDiskSizeMB", "SOAP::SOAPInt"],
      ["supportedEthernetCard", "SOAP::SOAPString[]", [1, nil]],
      ["recommendedEthernetCard", "SOAP::SOAPString", [0, 1]],
      ["supportsSlaveDisk", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuFeatureMask", "VSphereCloud::HostCpuIdInfo[]", [0, nil]],
      ["supportsWakeOnLan", "SOAP::SOAPBoolean"],
      ["supportsVMI", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsMemoryHotAdd", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsCpuHotAdd", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsCpuHotRemove", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfGuestOsDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfGuestOsDescriptor"),
    :schema_element => [
      ["guestOsDescriptor", ["VSphereCloud::GuestOsDescriptor[]", XSD::QName.new(NsVim25, "GuestOsDescriptor")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineIdeDiskDevicePartitionInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineIdeDiskDevicePartitionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPInt"],
      ["capacity", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineIdeDiskDevicePartitionInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineIdeDiskDevicePartitionInfo"),
    :schema_element => [
      ["virtualMachineIdeDiskDevicePartitionInfo", ["VSphereCloud::VirtualMachineIdeDiskDevicePartitionInfo[]", XSD::QName.new(NsVim25, "VirtualMachineIdeDiskDevicePartitionInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineIdeDiskDeviceInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineIdeDiskDeviceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineDiskDeviceInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["partitionTable", "VSphereCloud::VirtualMachineIdeDiskDevicePartitionInfo[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineIdeDiskDeviceInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineIdeDiskDeviceInfo"),
    :schema_element => [
      ["virtualMachineIdeDiskDeviceInfo", ["VSphereCloud::VirtualMachineIdeDiskDeviceInfo[]", XSD::QName.new(NsVim25, "VirtualMachineIdeDiskDeviceInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineLegacyNetworkSwitchInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineLegacyNetworkSwitchInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineLegacyNetworkSwitchInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineLegacyNetworkSwitchInfo"),
    :schema_element => [
      ["virtualMachineLegacyNetworkSwitchInfo", ["VSphereCloud::VirtualMachineLegacyNetworkSwitchInfo[]", XSD::QName.new(NsVim25, "VirtualMachineLegacyNetworkSwitchInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineMessage,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineMessage"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["argument", "[]", [0, nil]],
      ["text", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineMessage,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineMessage"),
    :schema_element => [
      ["virtualMachineMessage", ["VSphereCloud::VirtualMachineMessage[]", XSD::QName.new(NsVim25, "VirtualMachineMessage")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineNetworkInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineNetworkInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["network", "VSphereCloud::NetworkSummary"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineNetworkInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineNetworkInfo"),
    :schema_element => [
      ["virtualMachineNetworkInfo", ["VSphereCloud::VirtualMachineNetworkInfo[]", XSD::QName.new(NsVim25, "VirtualMachineNetworkInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineNetworkShaperInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineNetworkShaperInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["peakBps", "SOAP::SOAPLong", [0, 1]],
      ["averageBps", "SOAP::SOAPLong", [0, 1]],
      ["burstSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineParallelInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineParallelInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineParallelInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineParallelInfo"),
    :schema_element => [
      ["virtualMachineParallelInfo", ["VSphereCloud::VirtualMachineParallelInfo[]", XSD::QName.new(NsVim25, "VirtualMachineParallelInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachinePciPassthroughInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachinePciPassthroughInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["pciDevice", "VSphereCloud::HostPciDevice"],
      ["systemId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachinePciPassthroughInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachinePciPassthroughInfo"),
    :schema_element => [
      ["virtualMachinePciPassthroughInfo", ["VSphereCloud::VirtualMachinePciPassthroughInfo[]", XSD::QName.new(NsVim25, "VirtualMachinePciPassthroughInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineQuestionInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineQuestionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["text", "SOAP::SOAPString"],
      ["choice", "VSphereCloud::ChoiceOption"],
      ["message", "VSphereCloud::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineRelocateSpecDiskLocator,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineRelocateSpecDiskLocator"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskId", "SOAP::SOAPInt"],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["diskMoveType", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineRelocateSpecDiskLocator,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineRelocateSpecDiskLocator"),
    :schema_element => [
      ["virtualMachineRelocateSpecDiskLocator", ["VSphereCloud::VirtualMachineRelocateSpecDiskLocator[]", XSD::QName.new(NsVim25, "VirtualMachineRelocateSpecDiskLocator")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineRelocateSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineRelocateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["diskMoveType", "SOAP::SOAPString", [0, 1]],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["disk", "VSphereCloud::VirtualMachineRelocateSpecDiskLocator[]", [0, nil]],
      ["transform", "VSphereCloud::VirtualMachineRelocateTransformation", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineRuntimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineRuntimeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["device", "VSphereCloud::VirtualMachineDeviceRuntimeInfo[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["connectionState", "VSphereCloud::VirtualMachineConnectionState"],
      ["powerState", "VSphereCloud::VirtualMachinePowerState"],
      ["faultToleranceState", "VSphereCloud::VirtualMachineFaultToleranceState", [0, 1]],
      ["toolsInstallerMounted", "SOAP::SOAPBoolean"],
      ["suspendTime", "SOAP::SOAPDateTime", [0, 1]],
      ["bootTime", "SOAP::SOAPDateTime", [0, 1]],
      ["suspendInterval", "SOAP::SOAPLong", [0, 1]],
      ["question", "VSphereCloud::VirtualMachineQuestionInfo", [0, 1]],
      ["memoryOverhead", "SOAP::SOAPLong", [0, 1]],
      ["maxCpuUsage", "SOAP::SOAPInt", [0, 1]],
      ["maxMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["numMksConnections", "SOAP::SOAPInt"],
      ["recordReplayState", "VSphereCloud::VirtualMachineRecordReplayState", [0, 1]],
      ["cleanPowerOff", "SOAP::SOAPBoolean", [0, 1]],
      ["needSecondaryReason", "SOAP::SOAPString", [0, 1]],
      ["minRequiredEVCModeKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineScsiDiskDeviceInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineScsiDiskDeviceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineDiskDeviceInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["disk", "VSphereCloud::HostScsiDisk", [0, 1]],
      ["transportHint", "SOAP::SOAPString", [0, 1]],
      ["lunNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineScsiDiskDeviceInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineScsiDiskDeviceInfo"),
    :schema_element => [
      ["virtualMachineScsiDiskDeviceInfo", ["VSphereCloud::VirtualMachineScsiDiskDeviceInfo[]", XSD::QName.new(NsVim25, "VirtualMachineScsiDiskDeviceInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineScsiPassthroughInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineScsiPassthroughInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["scsiClass", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString"],
      ["physicalUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineScsiPassthroughInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineScsiPassthroughInfo"),
    :schema_element => [
      ["virtualMachineScsiPassthroughInfo", ["VSphereCloud::VirtualMachineScsiPassthroughInfo[]", XSD::QName.new(NsVim25, "VirtualMachineScsiPassthroughInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineSerialInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineSerialInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineSerialInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineSerialInfo"),
    :schema_element => [
      ["virtualMachineSerialInfo", ["VSphereCloud::VirtualMachineSerialInfo[]", XSD::QName.new(NsVim25, "VirtualMachineSerialInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineSnapshotInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineSnapshotInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["currentSnapshot", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["rootSnapshotList", "VSphereCloud::VirtualMachineSnapshotTree[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineSnapshotTree,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineSnapshotTree"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["snapshot", "VSphereCloud::ManagedObjectReference"],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["id", "SOAP::SOAPInt", [0, 1]],
      ["createTime", "SOAP::SOAPDateTime"],
      ["state", "VSphereCloud::VirtualMachinePowerState"],
      ["quiesced", "SOAP::SOAPBoolean"],
      ["backupManifest", "SOAP::SOAPString", [0, 1]],
      ["childSnapshotList", "VSphereCloud::VirtualMachineSnapshotTree[]", [0, nil]],
      ["replaySupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineSnapshotTree,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineSnapshotTree"),
    :schema_element => [
      ["virtualMachineSnapshotTree", ["VSphereCloud::VirtualMachineSnapshotTree[]", XSD::QName.new(NsVim25, "VirtualMachineSnapshotTree")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineSoundInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineSoundInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineSoundInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineSoundInfo"),
    :schema_element => [
      ["virtualMachineSoundInfo", ["VSphereCloud::VirtualMachineSoundInfo[]", XSD::QName.new(NsVim25, "VirtualMachineSoundInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineUsageOnDatastore,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineUsageOnDatastore"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["committed", "SOAP::SOAPLong"],
      ["uncommitted", "SOAP::SOAPLong"],
      ["unshared", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineUsageOnDatastore,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineUsageOnDatastore"),
    :schema_element => [
      ["virtualMachineUsageOnDatastore", ["VSphereCloud::VirtualMachineUsageOnDatastore[]", XSD::QName.new(NsVim25, "VirtualMachineUsageOnDatastore")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineStorageInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineStorageInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["perDatastoreUsage", "VSphereCloud::VirtualMachineUsageOnDatastore[]", [0, nil]],
      ["timestamp", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigSummary,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["template", "SOAP::SOAPBoolean"],
      ["vmPathName", "SOAP::SOAPString"],
      ["memorySizeMB", "SOAP::SOAPInt", [0, 1]],
      ["cpuReservation", "SOAP::SOAPInt", [0, 1]],
      ["memoryReservation", "SOAP::SOAPInt", [0, 1]],
      ["numCpu", "SOAP::SOAPInt", [0, 1]],
      ["numEthernetCards", "SOAP::SOAPInt", [0, 1]],
      ["numVirtualDisks", "SOAP::SOAPInt", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["guestFullName", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["product", "VSphereCloud::VAppProductInfo", [0, 1]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["ftInfo", "VSphereCloud::FaultToleranceConfigInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineQuickStats,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineQuickStats"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["overallCpuUsage", "SOAP::SOAPInt", [0, 1]],
      ["overallCpuDemand", "SOAP::SOAPInt", [0, 1]],
      ["guestMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["hostMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["guestHeartbeatStatus", "VSphereCloud::ManagedEntityStatus"],
      ["distributedCpuEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["distributedMemoryEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["staticCpuEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["staticMemoryEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["privateMemory", "SOAP::SOAPInt", [0, 1]],
      ["sharedMemory", "SOAP::SOAPInt", [0, 1]],
      ["swappedMemory", "SOAP::SOAPInt", [0, 1]],
      ["balloonedMemory", "SOAP::SOAPInt", [0, 1]],
      ["consumedOverheadMemory", "SOAP::SOAPInt", [0, 1]],
      ["ftLogBandwidth", "SOAP::SOAPInt", [0, 1]],
      ["ftSecondaryLatency", "SOAP::SOAPInt", [0, 1]],
      ["ftLatencyStatus", "VSphereCloud::ManagedEntityStatus", [0, 1]],
      ["compressedMemory", "SOAP::SOAPLong", [0, 1]],
      ["uptimeSeconds", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineGuestSummary,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineGuestSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["guestFullName", "SOAP::SOAPString", [0, 1]],
      ["toolsStatus", "VSphereCloud::VirtualMachineToolsStatus", [0, 1]],
      ["toolsVersionStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsRunningStatus", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineStorageSummary,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineStorageSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["committed", "SOAP::SOAPLong"],
      ["uncommitted", "SOAP::SOAPLong"],
      ["unshared", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineSummary,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["runtime", "VSphereCloud::VirtualMachineRuntimeInfo"],
      ["guest", "VSphereCloud::VirtualMachineGuestSummary", [0, 1]],
      ["config", "VSphereCloud::VirtualMachineConfigSummary"],
      ["storage", "VSphereCloud::VirtualMachineStorageSummary", [0, 1]],
      ["quickStats", "VSphereCloud::VirtualMachineQuickStats"],
      ["overallStatus", "VSphereCloud::ManagedEntityStatus"],
      ["customValue", "VSphereCloud::CustomFieldValue[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineSummary,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineSummary"),
    :schema_element => [
      ["virtualMachineSummary", ["VSphereCloud::VirtualMachineSummary[]", XSD::QName.new(NsVim25, "VirtualMachineSummary")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineTargetInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ToolsConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ToolsConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["toolsVersion", "SOAP::SOAPInt", [0, 1]],
      ["afterPowerOn", "SOAP::SOAPBoolean", [0, 1]],
      ["afterResume", "SOAP::SOAPBoolean", [0, 1]],
      ["beforeGuestStandby", "SOAP::SOAPBoolean", [0, 1]],
      ["beforeGuestShutdown", "SOAP::SOAPBoolean", [0, 1]],
      ["beforeGuestReboot", "SOAP::SOAPBoolean", [0, 1]],
      ["toolsUpgradePolicy", "SOAP::SOAPString", [0, 1]],
      ["pendingCustomization", "SOAP::SOAPString", [0, 1]],
      ["syncTimeWithHost", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineUsbInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineUsbInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["description", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPInt"],
      ["product", "SOAP::SOAPInt"],
      ["physicalPath", "SOAP::SOAPString"],
      ["family", "SOAP::SOAPString[]", [0, nil]],
      ["speed", "SOAP::SOAPString[]", [0, nil]],
      ["summary", "VSphereCloud::VirtualMachineSummary", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineUsbInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineUsbInfo"),
    :schema_element => [
      ["virtualMachineUsbInfo", ["VSphereCloud::VirtualMachineUsbInfo[]", XSD::QName.new(NsVim25, "VirtualMachineUsbInfo")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualHardware,
    :schema_type => XSD::QName.new(NsVim25, "VirtualHardware"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["numCPU", "SOAP::SOAPInt"],
      ["memoryMB", "SOAP::SOAPInt"],
      ["device", "VSphereCloud::VirtualDevice[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualHardwareOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualHardwareOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["hwVersion", "SOAP::SOAPInt"],
      ["virtualDeviceOption", "VSphereCloud::VirtualDeviceOption[]", [1, nil]],
      ["deviceListReadonly", "SOAP::SOAPBoolean"],
      ["numCPU", "SOAP::SOAPInt[]", [1, nil]],
      ["numCpuReadonly", "SOAP::SOAPBoolean"],
      ["memoryMB", "VSphereCloud::LongOption"],
      ["numPCIControllers", "VSphereCloud::IntOption"],
      ["numIDEControllers", "VSphereCloud::IntOption"],
      ["numUSBControllers", "VSphereCloud::IntOption"],
      ["numSIOControllers", "VSphereCloud::IntOption"],
      ["numPS2Controllers", "VSphereCloud::IntOption"],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["numSupportedWwnPorts", "VSphereCloud::IntOption", [0, 1]],
      ["numSupportedWwnNodes", "VSphereCloud::IntOption", [0, 1]],
      ["resourceConfigOption", "VSphereCloud::ResourceConfigOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineImportSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineImportSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ImportSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entityConfig", "VSphereCloud::VAppEntityConfigInfo", [0, 1]],
      ["configSpec", "VSphereCloud::VirtualMachineConfigSpec"],
      ["resPoolEntity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CheckResult,
    :schema_type => XSD::QName.new(NsVim25, "CheckResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["warning", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfCheckResult,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfCheckResult"),
    :schema_element => [
      ["checkResult", ["VSphereCloud::CheckResult[]", XSD::QName.new(NsVim25, "CheckResult")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationSpec,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["options", "VSphereCloud::CustomizationOptions", [0, 1]],
      ["identity", "VSphereCloud::CustomizationIdentitySettings"],
      ["globalIPSettings", "VSphereCloud::CustomizationGlobalIPSettings"],
      ["nicSettingMap", "VSphereCloud::CustomizationAdapterMapping[]", [0, nil]],
      ["encryptionKey", "SOAP::SOAPByte[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationName,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationName"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationFixedName,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationFixedName"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationName"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationPrefixName,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationPrefixName"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationName"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["base", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationVirtualMachineName,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationVirtualMachineName"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationName"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationUnknownName,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationUnknownName"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationName"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationCustomName,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationCustomName"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationName"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationPassword,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationPassword"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["value", "SOAP::SOAPString"],
      ["plainText", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationOptions,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationOptions"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationWinOptions,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationWinOptions"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationOptions"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeSID", "SOAP::SOAPBoolean"],
      ["deleteAccounts", "SOAP::SOAPBoolean"],
      ["reboot", "VSphereCloud::CustomizationSysprepRebootOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationLinuxOptions,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationLinuxOptions"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationOptions"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationGuiUnattended,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationGuiUnattended"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["password", "VSphereCloud::CustomizationPassword", [0, 1]],
      ["timeZone", "SOAP::SOAPInt"],
      ["autoLogon", "SOAP::SOAPBoolean"],
      ["autoLogonCount", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationUserData,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationUserData"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fullName", "SOAP::SOAPString"],
      ["orgName", "SOAP::SOAPString"],
      ["computerName", "VSphereCloud::CustomizationName"],
      ["productId", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationGuiRunOnce,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationGuiRunOnce"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["commandList", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationIdentification,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationIdentification"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["joinWorkgroup", "SOAP::SOAPString", [0, 1]],
      ["joinDomain", "SOAP::SOAPString", [0, 1]],
      ["domainAdmin", "SOAP::SOAPString", [0, 1]],
      ["domainAdminPassword", "VSphereCloud::CustomizationPassword", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationLicenseFilePrintData,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationLicenseFilePrintData"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["autoMode", "VSphereCloud::CustomizationLicenseDataMode"],
      ["autoUsers", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationIdentitySettings,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationIdentitySettings"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationSysprepText,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSysprepText"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIdentitySettings"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["value", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationSysprep,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSysprep"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIdentitySettings"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["guiUnattended", "VSphereCloud::CustomizationGuiUnattended"],
      ["userData", "VSphereCloud::CustomizationUserData"],
      ["guiRunOnce", "VSphereCloud::CustomizationGuiRunOnce", [0, 1]],
      ["identification", "VSphereCloud::CustomizationIdentification"],
      ["licenseFilePrintData", "VSphereCloud::CustomizationLicenseFilePrintData", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationLinuxPrep,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationLinuxPrep"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIdentitySettings"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["hostName", "VSphereCloud::CustomizationName"],
      ["domain", "SOAP::SOAPString"],
      ["timeZone", "SOAP::SOAPString", [0, 1]],
      ["hwClockUTC", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationGlobalIPSettings,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationGlobalIPSettings"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dnsSuffixList", "SOAP::SOAPString[]", [0, nil]],
      ["dnsServerList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationIPSettingsIpV6AddressSpec,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationIPSettingsIpV6AddressSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ip", "VSphereCloud::CustomizationIpV6Generator[]", [1, nil]],
      ["gateway", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationIPSettings,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationIPSettings"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ip", "VSphereCloud::CustomizationIpGenerator"],
      ["subnetMask", "SOAP::SOAPString", [0, 1]],
      ["gateway", "SOAP::SOAPString[]", [0, nil]],
      ["ipV6Spec", "VSphereCloud::CustomizationIPSettingsIpV6AddressSpec", [0, 1]],
      ["dnsServerList", "SOAP::SOAPString[]", [0, nil]],
      ["dnsDomain", "SOAP::SOAPString", [0, 1]],
      ["primaryWINS", "SOAP::SOAPString", [0, 1]],
      ["secondaryWINS", "SOAP::SOAPString", [0, 1]],
      ["netBIOS", "VSphereCloud::CustomizationNetBIOSMode", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationIpGenerator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationIpGenerator"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationDhcpIpGenerator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationDhcpIpGenerator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpGenerator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationFixedIp,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationFixedIp"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpGenerator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationUnknownIpGenerator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationUnknownIpGenerator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpGenerator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationCustomIpGenerator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationCustomIpGenerator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpGenerator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationIpV6Generator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationIpV6Generator"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfCustomizationIpV6Generator,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfCustomizationIpV6Generator"),
    :schema_element => [
      ["customizationIpV6Generator", ["VSphereCloud::CustomizationIpV6Generator[]", XSD::QName.new(NsVim25, "CustomizationIpV6Generator")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationDhcpIpV6Generator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationDhcpIpV6Generator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpV6Generator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationStatelessIpV6Generator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationStatelessIpV6Generator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpV6Generator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationFixedIpV6,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationFixedIpV6"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpV6Generator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["subnetMask", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationAutoIpV6Generator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationAutoIpV6Generator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpV6Generator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationUnknownIpV6Generator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationUnknownIpV6Generator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpV6Generator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationCustomIpV6Generator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationCustomIpV6Generator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpV6Generator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationAdapterMapping,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationAdapterMapping"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["adapter", "VSphereCloud::CustomizationIPSettings"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfCustomizationAdapterMapping,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfCustomizationAdapterMapping"),
    :schema_element => [
      ["customizationAdapterMapping", ["VSphereCloud::CustomizationAdapterMapping[]", XSD::QName.new(NsVim25, "CustomizationAdapterMapping")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiskMappingPartitionInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskMappingPartitionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["fileSystem", "SOAP::SOAPString"],
      ["capacityInKb", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiskMappingInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskMappingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["physicalPartition", "VSphereCloud::HostDiskMappingPartitionInfo", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["exclusive", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiskMappingPartitionOption,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskMappingPartitionOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["fileSystem", "SOAP::SOAPString"],
      ["capacityInKb", "SOAP::SOAPLong"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfHostDiskMappingPartitionOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDiskMappingPartitionOption"),
    :schema_element => [
      ["hostDiskMappingPartitionOption", ["VSphereCloud::HostDiskMappingPartitionOption[]", XSD::QName.new(NsVim25, "HostDiskMappingPartitionOption")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiskMappingOption,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskMappingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["physicalPartition", "VSphereCloud::HostDiskMappingPartitionOption[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ParaVirtualSCSIController,
    :schema_type => XSD::QName.new(NsVim25, "ParaVirtualSCSIController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "VSphereCloud::VirtualSCSISharing"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ParaVirtualSCSIControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "ParaVirtualSCSIControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VSphereCloud::IntOption"],
      ["numSCSICdroms", "VSphereCloud::IntOption"],
      ["numSCSIPassthrough", "VSphereCloud::IntOption"],
      ["sharing", "VSphereCloud::VirtualSCSISharing[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VSphereCloud::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualBusLogicController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualBusLogicController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "VSphereCloud::VirtualSCSISharing"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualBusLogicControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualBusLogicControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VSphereCloud::IntOption"],
      ["numSCSICdroms", "VSphereCloud::IntOption"],
      ["numSCSIPassthrough", "VSphereCloud::IntOption"],
      ["sharing", "VSphereCloud::VirtualSCSISharing[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VSphereCloud::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualCdromIsoBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromIsoBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualCdromPassthroughBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromPassthroughBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["exclusive", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualCdromRemotePassthroughBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromRemotePassthroughBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceRemoteDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["exclusive", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualCdromAtapiBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromAtapiBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualCdromRemoteAtapiBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromRemoteAtapiBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceRemoteDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualCdrom,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdrom"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualCdromIsoBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromIsoBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualCdromPassthroughBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromPassthroughBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"],
      ["exclusive", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualCdromRemotePassthroughBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromRemotePassthroughBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceRemoteDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"],
      ["exclusive", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualCdromAtapiBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromAtapiBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualCdromRemoteAtapiBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromRemoteAtapiBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualCdromOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceFileBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceRemoteDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceRemoteDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDevicePipeBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDevicePipeBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["pipeName", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceURIBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceURIBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["serviceURI", "SOAP::SOAPString"],
      ["direction", "SOAP::SOAPString"],
      ["proxyURI", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceConnectInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["startConnected", "SOAP::SOAPBoolean"],
      ["allowGuestControl", "SOAP::SOAPBoolean"],
      ["connected", "SOAP::SOAPBoolean"],
      ["status", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDevice,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualDevice,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualDevice"),
    :schema_element => [
      ["virtualDevice", ["VSphereCloud::VirtualDevice[]", XSD::QName.new(NsVim25, "VirtualDevice")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualDeviceBackingOption"),
    :schema_element => [
      ["virtualDeviceBackingOption", ["VSphereCloud::VirtualDeviceBackingOption[]", XSD::QName.new(NsVim25, "VirtualDeviceBackingOption")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceFileBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceRemoteDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceRemoteDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDevicePipeBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDevicePipeBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceURIBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceURIBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["directions", "VSphereCloud::ChoiceOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceConnectOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceConnectOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["startConnected", "VSphereCloud::BoolOption"],
      ["allowGuestControl", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualDeviceOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualDeviceOption"),
    :schema_element => [
      ["virtualDeviceOption", ["VSphereCloud::VirtualDeviceOption[]", XSD::QName.new(NsVim25, "VirtualDeviceOption")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::VirtualDeviceConfigSpecOperation", [0, 1]],
      ["fileOperation", "VSphereCloud::VirtualDeviceConfigSpecFileOperation", [0, 1]],
      ["device", "VSphereCloud::VirtualDevice"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualDeviceConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualDeviceConfigSpec"),
    :schema_element => [
      ["virtualDeviceConfigSpec", ["VSphereCloud::VirtualDeviceConfigSpec[]", XSD::QName.new(NsVim25, "VirtualDeviceConfigSpec")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskSparseVer1BackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskSparseVer1BackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["spaceUsedInKB", "SOAP::SOAPLong", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::VirtualDiskSparseVer1BackingInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskSparseVer2BackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskSparseVer2BackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["spaceUsedInKB", "SOAP::SOAPLong", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::VirtualDiskSparseVer2BackingInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskFlatVer1BackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskFlatVer1BackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::VirtualDiskFlatVer1BackingInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskFlatVer2BackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskFlatVer2BackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["thinProvisioned", "SOAP::SOAPBoolean", [0, 1]],
      ["eagerlyScrub", "SOAP::SOAPBoolean", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::VirtualDiskFlatVer2BackingInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskRawDiskVer2BackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskRawDiskVer2BackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["descriptorFileName", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskPartitionedRawDiskVer2BackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskPartitionedRawDiskVer2BackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDiskRawDiskVer2BackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["descriptorFileName", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["partition", "SOAP::SOAPInt[]", [1, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskRawDiskMappingVer1BackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskRawDiskMappingVer1BackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["lunUuid", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString", [0, 1]],
      ["compatibilityMode", "SOAP::SOAPString", [0, 1]],
      ["diskMode", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::VirtualDiskRawDiskMappingVer1BackingInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDisk,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["capacityInKB", "SOAP::SOAPLong"],
      ["shares", "VSphereCloud::SharesInfo", [0, 1]],
      ["storageIOAllocation", "VSphereCloud::StorageIOAllocationInfo", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualDisk,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualDisk"),
    :schema_element => [
      ["virtualDisk", ["VSphereCloud::VirtualDisk[]", XSD::QName.new(NsVim25, "VirtualDisk")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskSparseVer1BackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskSparseVer1BackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]],
      ["diskModes", "VSphereCloud::ChoiceOption"],
      ["split", "VSphereCloud::BoolOption"],
      ["writeThrough", "VSphereCloud::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskSparseVer2BackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskSparseVer2BackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]],
      ["diskMode", "VSphereCloud::ChoiceOption"],
      ["split", "VSphereCloud::BoolOption"],
      ["writeThrough", "VSphereCloud::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"],
      ["hotGrowable", "SOAP::SOAPBoolean"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskFlatVer1BackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskFlatVer1BackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]],
      ["diskMode", "VSphereCloud::ChoiceOption"],
      ["split", "VSphereCloud::BoolOption"],
      ["writeThrough", "VSphereCloud::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskFlatVer2BackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskFlatVer2BackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]],
      ["diskMode", "VSphereCloud::ChoiceOption"],
      ["split", "VSphereCloud::BoolOption"],
      ["writeThrough", "VSphereCloud::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"],
      ["hotGrowable", "SOAP::SOAPBoolean"],
      ["uuid", "SOAP::SOAPBoolean"],
      ["thinProvisioned", "VSphereCloud::BoolOption", [0, 1]],
      ["eagerlyScrub", "VSphereCloud::BoolOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskRawDiskVer2BackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskRawDiskVer2BackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"],
      ["descriptorFileNameExtensions", "VSphereCloud::ChoiceOption"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskPartitionedRawDiskVer2BackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskPartitionedRawDiskVer2BackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDiskRawDiskVer2BackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"],
      ["descriptorFileNameExtensions", "VSphereCloud::ChoiceOption"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskRawDiskMappingVer1BackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskRawDiskMappingVer1BackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"],
      ["descriptorFileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]],
      ["compatibilityMode", "VSphereCloud::ChoiceOption"],
      ["diskMode", "VSphereCloud::ChoiceOption"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["capacityInKB", "VSphereCloud::LongOption"],
      ["ioAllocationOption", "VSphereCloud::StorageIOAllocationOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualE1000,
    :schema_type => XSD::QName.new(NsVim25, "VirtualE1000"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualEthernetCard"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualE1000Option,
    :schema_type => XSD::QName.new(NsVim25, "VirtualE1000Option"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualEthernetCardOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VSphereCloud::ChoiceOption"],
      ["macType", "VSphereCloud::ChoiceOption"],
      ["wakeOnLanEnabled", "VSphereCloud::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualEnsoniq1371,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEnsoniq1371"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSoundCard"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualEnsoniq1371Option,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEnsoniq1371Option"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSoundCardOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardNetworkBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardNetworkBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["network", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["inPassthroughMode", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardLegacyNetworkBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardLegacyNetworkBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardDistributedVirtualPortBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardDistributedVirtualPortBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["port", "VSphereCloud::DistributedVirtualSwitchPortConnection"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualEthernetCard,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCard"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardNetworkBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardNetworkBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardLegacyNetworkBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardLegacyNetworkBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardDVPortBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardDVPortBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VSphereCloud::ChoiceOption"],
      ["macType", "VSphereCloud::ChoiceOption"],
      ["wakeOnLanEnabled", "VSphereCloud::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualFloppyImageBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppyImageBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualFloppyDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppyDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualFloppyRemoteDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppyRemoteDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceRemoteDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualFloppy,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppy"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualFloppyImageBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppyImageBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualFloppyDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppyDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualFloppyRemoteDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppyRemoteDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceRemoteDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualFloppyOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppyOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualIDEController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualIDEController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualIDEControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualIDEControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numIDEDisks", "VSphereCloud::IntOption"],
      ["numIDECdroms", "VSphereCloud::IntOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualKeyboard,
    :schema_type => XSD::QName.new(NsVim25, "VirtualKeyboard"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualKeyboardOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualKeyboardOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualLsiLogicController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualLsiLogicController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "VSphereCloud::VirtualSCSISharing"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualLsiLogicControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualLsiLogicControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VSphereCloud::IntOption"],
      ["numSCSICdroms", "VSphereCloud::IntOption"],
      ["numSCSIPassthrough", "VSphereCloud::IntOption"],
      ["sharing", "VSphereCloud::VirtualSCSISharing[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VSphereCloud::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualLsiLogicSASController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualLsiLogicSASController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "VSphereCloud::VirtualSCSISharing"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualLsiLogicSASControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualLsiLogicSASControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VSphereCloud::IntOption"],
      ["numSCSICdroms", "VSphereCloud::IntOption"],
      ["numSCSIPassthrough", "VSphereCloud::IntOption"],
      ["sharing", "VSphereCloud::VirtualSCSISharing[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VSphereCloud::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualPCIController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCIController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualPCIControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCIControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIControllers", "VSphereCloud::IntOption"],
      ["numEthernetCards", "VSphereCloud::IntOption"],
      ["numVideoCards", "VSphereCloud::IntOption"],
      ["numSoundCards", "VSphereCloud::IntOption"],
      ["numVmiRoms", "VSphereCloud::IntOption"],
      ["numVmciDevices", "VSphereCloud::IntOption", [0, 1]],
      ["numPCIPassthroughDevices", "VSphereCloud::IntOption", [0, 1]],
      ["numSasSCSIControllers", "VSphereCloud::IntOption", [0, 1]],
      ["numVmxnet3EthernetCards", "VSphereCloud::IntOption", [0, 1]],
      ["numParaVirtualSCSIControllers", "VSphereCloud::IntOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualPCIPassthroughDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCIPassthroughDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["id", "SOAP::SOAPString"],
      ["deviceId", "SOAP::SOAPString"],
      ["systemId", "SOAP::SOAPString"],
      ["vendorId", "SOAP::SOAPShort"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualPCIPassthrough,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCIPassthrough"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualPCIPassthroughDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCIPassthroughDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualPCIPassthroughOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCIPassthroughOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualPCNet32,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCNet32"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualEthernetCard"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualPCNet32Option,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCNet32Option"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualEthernetCardOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VSphereCloud::ChoiceOption"],
      ["macType", "VSphereCloud::ChoiceOption"],
      ["wakeOnLanEnabled", "VSphereCloud::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsMorphing", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualPS2Controller,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPS2Controller"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualPS2ControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPS2ControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numKeyboards", "VSphereCloud::IntOption"],
      ["numPointingDevices", "VSphereCloud::IntOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualParallelPortFileBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualParallelPortFileBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualParallelPortDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualParallelPortDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualParallelPort,
    :schema_type => XSD::QName.new(NsVim25, "VirtualParallelPort"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualParallelPortFileBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualParallelPortFileBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualParallelPortDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualParallelPortDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualParallelPortOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualParallelPortOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualPointingDeviceDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPointingDeviceDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["hostPointingDevice", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualPointingDevice,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPointingDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualPointingDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPointingDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"],
      ["hostPointingDevice", "VSphereCloud::ChoiceOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualPointingDeviceOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPointingDeviceOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualSCSISharing,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualSCSISharing"),
    :schema_element => [
      ["virtualSCSISharing", ["VSphereCloud::VirtualSCSISharing[]", XSD::QName.new(NsVim25, "VirtualSCSISharing")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSCSIController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSCSIController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "VSphereCloud::VirtualSCSISharing"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSCSIControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSCSIControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VSphereCloud::IntOption"],
      ["numSCSICdroms", "VSphereCloud::IntOption"],
      ["numSCSIPassthrough", "VSphereCloud::IntOption"],
      ["sharing", "VSphereCloud::VirtualSCSISharing[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VSphereCloud::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSCSIPassthroughDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSCSIPassthroughDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSCSIPassthrough,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSCSIPassthrough"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSCSIPassthroughDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSCSIPassthroughDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSCSIPassthroughOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSCSIPassthroughOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSIOController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSIOController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSIOControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSIOControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numFloppyDrives", "VSphereCloud::IntOption"],
      ["numSerialPorts", "VSphereCloud::IntOption"],
      ["numParallelPorts", "VSphereCloud::IntOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSerialPortFileBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortFileBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSerialPortDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSerialPortPipeBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortPipeBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevicePipeBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["pipeName", "SOAP::SOAPString"],
      ["endpoint", "SOAP::SOAPString"],
      ["noRxLoss", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSerialPortURIBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortURIBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceURIBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["serviceURI", "SOAP::SOAPString"],
      ["direction", "SOAP::SOAPString"],
      ["proxyURI", "SOAP::SOAPString", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSerialPort,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPort"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["yieldOnPoll", "SOAP::SOAPBoolean"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSerialPortFileBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortFileBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSerialPortDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSerialPortPipeBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortPipeBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevicePipeBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["endpoint", "VSphereCloud::ChoiceOption"],
      ["noRxLoss", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSerialPortURIBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortURIBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceURIBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["directions", "VSphereCloud::ChoiceOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSerialPortOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["yieldOnPoll", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSoundBlaster16,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSoundBlaster16"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSoundCard"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSoundBlaster16Option,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSoundBlaster16Option"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSoundCardOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSoundCardDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSoundCardDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSoundCard,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSoundCard"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSoundCardDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSoundCardDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSoundCardOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSoundCardOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualUSBUSBBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSBUSBBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualUSBRemoteHostBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSBRemoteHostBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["hostname", "SOAP::SOAPString"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualUSB,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSB"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["connected", "SOAP::SOAPBoolean"],
      ["vendor", "SOAP::SOAPInt", [0, 1]],
      ["product", "SOAP::SOAPInt", [0, 1]],
      ["family", "SOAP::SOAPString[]", [0, nil]],
      ["speed", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualUSBController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSBController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["autoConnectDevices", "SOAP::SOAPBoolean", [0, 1]],
      ["ehciEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualUSBControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSBControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["autoConnectDevices", "VSphereCloud::BoolOption"],
      ["ehciSupported", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualUSBUSBBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSBUSBBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualUSBRemoteHostBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSBRemoteHostBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualUSBOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSBOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineVMCIDevice,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineVMCIDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["id", "SOAP::SOAPLong", [0, 1]],
      ["allowUnrestrictedCommunication", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineVMCIDeviceOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineVMCIDeviceOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["allowUnrestrictedCommunication", "VSphereCloud::BoolOption"]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineVMIROM,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineVMIROM"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualVMIROMOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVMIROMOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineVideoCard,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineVideoCard"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["videoRamSizeInKB", "SOAP::SOAPLong", [0, 1]],
      ["numDisplays", "SOAP::SOAPInt", [0, 1]],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["enable3DSupport", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualVideoCardOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVideoCardOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["videoRamSizeInKB", "VSphereCloud::LongOption", [0, 1]],
      ["numDisplays", "VSphereCloud::IntOption", [0, 1]],
      ["useAutoDetect", "VSphereCloud::BoolOption", [0, 1]],
      ["support3D", "VSphereCloud::BoolOption", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualVmxnet,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVmxnet"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualEthernetCard"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualVmxnet2,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVmxnet2"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualVmxnet"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualVmxnet2Option,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVmxnet2Option"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualVmxnetOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VSphereCloud::ChoiceOption"],
      ["macType", "VSphereCloud::ChoiceOption"],
      ["wakeOnLanEnabled", "VSphereCloud::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualVmxnet3,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVmxnet3"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualVmxnet"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualVmxnet3Option,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVmxnet3Option"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualVmxnetOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VSphereCloud::ChoiceOption"],
      ["macType", "VSphereCloud::ChoiceOption"],
      ["wakeOnLanEnabled", "VSphereCloud::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualVmxnetOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVmxnetOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualEthernetCardOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VSphereCloud::ChoiceOption"],
      ["macType", "VSphereCloud::ChoiceOption"],
      ["wakeOnLanEnabled", "VSphereCloud::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ObjectUpdateKind,
    :schema_type => XSD::QName.new(NsVim25, "ObjectUpdateKind")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PropertyChangeOp,
    :schema_type => XSD::QName.new(NsVim25, "PropertyChangeOp")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ConfigSpecOperation,
    :schema_type => XSD::QName.new(NsVim25, "ConfigSpecOperation")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DatastoreAccessible,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreAccessible")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DiagnosticManagerLogCreator,
    :schema_type => XSD::QName.new(NsVim25, "DiagnosticManagerLogCreator")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DiagnosticManagerLogFormat,
    :schema_type => XSD::QName.new(NsVim25, "DiagnosticManagerLogFormat")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchProductSpecOperationType,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchProductSpecOperationType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchNicTeamingPolicyMode,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchNicTeamingPolicyMode")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostSystemConnectionState,
    :schema_type => XSD::QName.new(NsVim25, "HostSystemConnectionState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostSystemPowerState,
    :schema_type => XSD::QName.new(NsVim25, "HostSystemPowerState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostStandbyMode,
    :schema_type => XSD::QName.new(NsVim25, "HostStandbyMode")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseState,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseManagerState,
    :schema_type => XSD::QName.new(NsVim25, "LicenseManagerState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseManagerLicenseKey,
    :schema_type => XSD::QName.new(NsVim25, "LicenseManagerLicenseKey")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseFeatureInfoUnit,
    :schema_type => XSD::QName.new(NsVim25, "LicenseFeatureInfoUnit")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseFeatureInfoState,
    :schema_type => XSD::QName.new(NsVim25, "LicenseFeatureInfoState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseFeatureInfoSourceRestriction,
    :schema_type => XSD::QName.new(NsVim25, "LicenseFeatureInfoSourceRestriction")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseReservationInfoState,
    :schema_type => XSD::QName.new(NsVim25, "LicenseReservationInfoState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ManagedEntityStatus,
    :schema_type => XSD::QName.new(NsVim25, "ManagedEntityStatus")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::OvfCreateImportSpecParamsDiskProvisioningType,
    :schema_type => XSD::QName.new(NsVim25, "OvfCreateImportSpecParamsDiskProvisioningType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfFormat,
    :schema_type => XSD::QName.new(NsVim25, "PerfFormat")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfSummaryType,
    :schema_type => XSD::QName.new(NsVim25, "PerfSummaryType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerfStatsType,
    :schema_type => XSD::QName.new(NsVim25, "PerfStatsType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PerformanceManagerUnit,
    :schema_type => XSD::QName.new(NsVim25, "PerformanceManagerUnit")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ValidateMigrationTestType,
    :schema_type => XSD::QName.new(NsVim25, "ValidateMigrationTestType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VMotionCompatibilityType,
    :schema_type => XSD::QName.new(NsVim25, "VMotionCompatibilityType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SharesLevel,
    :schema_type => XSD::QName.new(NsVim25, "SharesLevel")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskFilterSpecRecursionOption,
    :schema_type => XSD::QName.new(NsVim25, "TaskFilterSpecRecursionOption")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskFilterSpecTimeOption,
    :schema_type => XSD::QName.new(NsVim25, "TaskFilterSpecTimeOption")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::TaskInfoState,
    :schema_type => XSD::QName.new(NsVim25, "TaskInfoState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualAppVAppState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualAppVAppState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskAdapterType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskAdapterType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachinePowerState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachinePowerState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineAppHeartbeatStatusType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineAppHeartbeatStatusType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineConnectionState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConnectionState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineMovePriority,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineMovePriority")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFaultToleranceState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFaultToleranceState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineRecordReplayState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineRecordReplayState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineNeedSecondaryReason,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineNeedSecondaryReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineTicketType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineTicketType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ActionParameter,
    :schema_type => XSD::QName.new(NsVim25, "ActionParameter")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::StateAlarmOperator,
    :schema_type => XSD::QName.new(NsVim25, "StateAlarmOperator")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EventAlarmExpressionComparisonOperator,
    :schema_type => XSD::QName.new(NsVim25, "EventAlarmExpressionComparisonOperator")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MetricAlarmOperator,
    :schema_type => XSD::QName.new(NsVim25, "MetricAlarmOperator")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ActionType,
    :schema_type => XSD::QName.new(NsVim25, "ActionType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsBehavior,
    :schema_type => XSD::QName.new(NsVim25, "DrsBehavior")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DpmBehavior,
    :schema_type => XSD::QName.new(NsVim25, "DpmBehavior")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasAamNodeStateDasState,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasAamNodeStateDasState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasConfigInfoServiceState,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasConfigInfoServiceState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasConfigInfoVmMonitoringState,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasConfigInfoVmMonitoringState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DasVmPriority,
    :schema_type => XSD::QName.new(NsVim25, "DasVmPriority")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasVmSettingsRestartPriority,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasVmSettingsRestartPriority")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterDasVmSettingsIsolationResponse,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasVmSettingsIsolationResponse")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DrsRecommendationReasonCode,
    :schema_type => XSD::QName.new(NsVim25, "DrsRecommendationReasonCode")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPowerOperationType,
    :schema_type => XSD::QName.new(NsVim25, "HostPowerOperationType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterPowerOnVmOption,
    :schema_type => XSD::QName.new(NsVim25, "ClusterPowerOnVmOption")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RecommendationType,
    :schema_type => XSD::QName.new(NsVim25, "RecommendationType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::RecommendationReasonCode,
    :schema_type => XSD::QName.new(NsVim25, "RecommendationReasonCode")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortStatusVmDirectPathGen2InactiveReasonNetwork,
    :schema_type => XSD::QName.new(NsVim25, "DVPortStatusVmDirectPathGen2InactiveReasonNetwork")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DVPortStatusVmDirectPathGen2InactiveReasonOther,
    :schema_type => XSD::QName.new(NsVim25, "DVPortStatusVmDirectPathGen2InactiveReasonOther")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualPortgroupPortgroupType,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualPortgroupPortgroupType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualPortgroupMetaTagName,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualPortgroupMetaTagName")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDistributedVirtualSwitchManagerNetworkResourcePoolKey,
    :schema_type => XSD::QName.new(NsVim25, "HostDistributedVirtualSwitchManagerNetworkResourcePoolKey")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostMemberHostComponentState,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberHostComponentState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchPortConnecteeConnecteeType,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchPortConnecteeConnecteeType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmwareDistributedVirtualSwitchPvlanPortType,
    :schema_type => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchPvlanPortType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EventEventSeverity,
    :schema_type => XSD::QName.new(NsVim25, "EventEventSeverity")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDisconnectedEventReasonCode,
    :schema_type => XSD::QName.new(NsVim25, "HostDisconnectedEventReasonCode")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDasErrorEventHostDasErrorReason,
    :schema_type => XSD::QName.new(NsVim25, "HostDasErrorEventHostDasErrorReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmShutdownOnIsolationEventOperation,
    :schema_type => XSD::QName.new(NsVim25, "VmShutdownOnIsolationEventOperation")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmDasBeingResetEventReasonCode,
    :schema_type => XSD::QName.new(NsVim25, "VmDasBeingResetEventReasonCode")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFailedStartingSecondaryEventFailureReason,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedStartingSecondaryEventFailureReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EventCategory,
    :schema_type => XSD::QName.new(NsVim25, "EventCategory")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::EventFilterSpecRecursionOption,
    :schema_type => XSD::QName.new(NsVim25, "EventFilterSpecRecursionOption")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AffinityType,
    :schema_type => XSD::QName.new(NsVim25, "AffinityType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AgentInstallFailedReason,
    :schema_type => XSD::QName.new(NsVim25, "AgentInstallFailedReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CannotMoveFaultToleranceVmMoveType,
    :schema_type => XSD::QName.new(NsVim25, "CannotMoveFaultToleranceVmMoveType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DasConfigFaultDasConfigFaultReason,
    :schema_type => XSD::QName.new(NsVim25, "DasConfigFaultDasConfigFaultReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DeviceNotSupportedReason,
    :schema_type => XSD::QName.new(NsVim25, "DeviceNotSupportedReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FtIssuesOnHostHostSelectionType,
    :schema_type => XSD::QName.new(NsVim25, "FtIssuesOnHostHostSelectionType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIncompatibleForFaultToleranceReason,
    :schema_type => XSD::QName.new(NsVim25, "HostIncompatibleForFaultToleranceReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIncompatibleForRecordReplayReason,
    :schema_type => XSD::QName.new(NsVim25, "HostIncompatibleForRecordReplayReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LicenseAssignmentFailedReason,
    :schema_type => XSD::QName.new(NsVim25, "LicenseAssignmentFailedReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NotSupportedDeviceForFTDeviceType,
    :schema_type => XSD::QName.new(NsVim25, "NotSupportedDeviceForFTDeviceType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NumVirtualCpusIncompatibleReason,
    :schema_type => XSD::QName.new(NsVim25, "NumVirtualCpusIncompatibleReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFaultToleranceConfigIssueReasonForIssue,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceConfigIssueReasonForIssue")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VmFaultToleranceInvalidFileBackingDeviceType,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceInvalidFileBackingDeviceType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostActiveDirectoryInfoDomainMembershipStatus,
    :schema_type => XSD::QName.new(NsVim25, "HostActiveDirectoryInfoDomainMembershipStatus")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AutoStartAction,
    :schema_type => XSD::QName.new(NsVim25, "AutoStartAction")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::AutoStartWaitHeartbeatSetting,
    :schema_type => XSD::QName.new(NsVim25, "AutoStartWaitHeartbeatSetting")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostReplayUnsupportedReason,
    :schema_type => XSD::QName.new(NsVim25, "HostReplayUnsupportedReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCapabilityFtUnsupportedReason,
    :schema_type => XSD::QName.new(NsVim25, "HostCapabilityFtUnsupportedReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCapabilityVmDirectPathGen2UnsupportedReason,
    :schema_type => XSD::QName.new(NsVim25, "HostCapabilityVmDirectPathGen2UnsupportedReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConfigChangeMode,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigChangeMode")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostConfigChangeOperation,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigChangeOperation")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DiagnosticPartitionStorageType,
    :schema_type => XSD::QName.new(NsVim25, "DiagnosticPartitionStorageType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DiagnosticPartitionType,
    :schema_type => XSD::QName.new(NsVim25, "DiagnosticPartitionType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDiskPartitionInfoType,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskPartitionInfoType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFeatureVersionKey,
    :schema_type => XSD::QName.new(NsVim25, "HostFeatureVersionKey")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FileSystemMountInfoVStorageSupportStatus,
    :schema_type => XSD::QName.new(NsVim25, "FileSystemMountInfoVStorageSupportStatus")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCpuPowerManagementInfoPolicyType,
    :schema_type => XSD::QName.new(NsVim25, "HostCpuPowerManagementInfoPolicyType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostCpuPackageVendor,
    :schema_type => XSD::QName.new(NsVim25, "HostCpuPackageVendor")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostHardwareElementStatus,
    :schema_type => XSD::QName.new(NsVim25, "HostHardwareElementStatus")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::FibreChannelPortType,
    :schema_type => XSD::QName.new(NsVim25, "FibreChannelPortType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::InternetScsiSnsDiscoveryMethod,
    :schema_type => XSD::QName.new(NsVim25, "InternetScsiSnsDiscoveryMethod")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::SlpDiscoveryMethod,
    :schema_type => XSD::QName.new(NsVim25, "SlpDiscoveryMethod")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaChapAuthenticationType,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaChapAuthenticationType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaDigestType,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaDigestType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIpConfigIpV6AddressConfigType,
    :schema_type => XSD::QName.new(NsVim25, "HostIpConfigIpV6AddressConfigType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostIpConfigIpV6AddressStatus,
    :schema_type => XSD::QName.new(NsVim25, "HostIpConfigIpV6AddressStatus")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LinkDiscoveryProtocolConfigProtocolType,
    :schema_type => XSD::QName.new(NsVim25, "LinkDiscoveryProtocolConfigProtocolType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::LinkDiscoveryProtocolConfigOperationType,
    :schema_type => XSD::QName.new(NsVim25, "LinkDiscoveryProtocolConfigOperationType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostLowLevelProvisioningManagerReloadTarget,
    :schema_type => XSD::QName.new(NsVim25, "HostLowLevelProvisioningManagerReloadTarget")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineMemoryAllocationPolicy,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineMemoryAllocationPolicy")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostMountMode,
    :schema_type => XSD::QName.new(NsVim25, "HostMountMode")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::MultipathState,
    :schema_type => XSD::QName.new(NsVim25, "MultipathState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNumericSensorHealthState,
    :schema_type => XSD::QName.new(NsVim25, "HostNumericSensorHealthState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostNumericSensorType,
    :schema_type => XSD::QName.new(NsVim25, "HostNumericSensorType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPatchManagerReason,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPatchManagerIntegrityStatus,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerIntegrityStatus")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostPatchManagerInstallState,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerInstallState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PhysicalNicVmDirectPathGen2SupportedMode,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicVmDirectPathGen2SupportedMode")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PhysicalNicResourcePoolSchedulerDisallowedReason,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicResourcePoolSchedulerDisallowedReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::PortGroupConnecteeType,
    :schema_type => XSD::QName.new(NsVim25, "PortGroupConnecteeType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFirewallRuleDirection,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallRuleDirection")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostFirewallRuleProtocol,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallRuleProtocol")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScsiLunType,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLunType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScsiLunState,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLunState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScsiLunDescriptorQuality,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLunDescriptorQuality")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ScsiLunVStorageSupportStatus,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLunVStorageSupportStatus")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostServicePolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostServicePolicy")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostSnmpAgentCapability,
    :schema_type => XSD::QName.new(NsVim25, "HostSnmpAgentCapability")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostSystemIdentificationInfoIdentifier,
    :schema_type => XSD::QName.new(NsVim25, "HostSystemIdentificationInfoIdentifier")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostDigestInfoDigestMethodType,
    :schema_type => XSD::QName.new(NsVim25, "HostDigestInfoDigestMethodType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsExtentUnresolvedReason,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsExtentUnresolvedReason")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsResolutionSpecVmfsUuidResolution,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsResolutionSpecVmfsUuidResolution")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::HostVirtualNicManagerNicType,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualNicManagerNicType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpConfigInfoIpAddressOrigin,
    :schema_type => XSD::QName.new(NsVim25, "NetIpConfigInfoIpAddressOrigin")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpConfigInfoIpAddressStatus,
    :schema_type => XSD::QName.new(NsVim25, "NetIpConfigInfoIpAddressStatus")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpStackInfoEntryType,
    :schema_type => XSD::QName.new(NsVim25, "NetIpStackInfoEntryType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetIpStackInfoPreference,
    :schema_type => XSD::QName.new(NsVim25, "NetIpStackInfoPreference")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::NetBIOSConfigInfoMode,
    :schema_type => XSD::QName.new(NsVim25, "NetBIOSConfigInfoMode")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ArrayUpdateOperation,
    :schema_type => XSD::QName.new(NsVim25, "ArrayUpdateOperation")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ComplianceResultStatus,
    :schema_type => XSD::QName.new(NsVim25, "ComplianceResultStatus")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileNumericComparator,
    :schema_type => XSD::QName.new(NsVim25, "ProfileNumericComparator")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ClusterProfileServiceType,
    :schema_type => XSD::QName.new(NsVim25, "ClusterProfileServiceType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::ProfileExecuteResultStatus,
    :schema_type => XSD::QName.new(NsVim25, "ProfileExecuteResultStatus")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::DayOfWeek,
    :schema_type => XSD::QName.new(NsVim25, "DayOfWeek")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::WeekOfMonth,
    :schema_type => XSD::QName.new(NsVim25, "WeekOfMonth")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppCloneSpecProvisioningType,
    :schema_type => XSD::QName.new(NsVim25, "VAppCloneSpecProvisioningType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppAutoStartAction,
    :schema_type => XSD::QName.new(NsVim25, "VAppAutoStartAction")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppIPAssignmentInfoIpAllocationPolicy,
    :schema_type => XSD::QName.new(NsVim25, "VAppIPAssignmentInfoIpAllocationPolicy")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppIPAssignmentInfoAllocationSchemes,
    :schema_type => XSD::QName.new(NsVim25, "VAppIPAssignmentInfoAllocationSchemes")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VAppIPAssignmentInfoProtocols,
    :schema_type => XSD::QName.new(NsVim25, "VAppIPAssignmentInfoProtocols")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigInfoNpivWwnType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigInfoNpivWwnType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigInfoSwapPlacementType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigInfoSwapPlacementType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigSpecNpivWwnOp,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigSpecNpivWwnOp")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachinePowerOpType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachinePowerOpType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineStandbyActionType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineStandbyActionType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutExFileType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExFileType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineHtSharing,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineHtSharing")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachinePowerOffBehavior,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachinePowerOffBehavior")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFlagInfoMonitorType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFlagInfoMonitorType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFlagInfoVirtualMmuUsage,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFlagInfoVirtualMmuUsage")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineFlagInfoVirtualExecUsage,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFlagInfoVirtualExecUsage")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineToolsStatus,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineToolsStatus")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineToolsVersionStatus,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineToolsVersionStatus")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineToolsRunningStatus,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineToolsRunningStatus")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineGuestState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineGuestState")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineGuestOsFamily,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineGuestOsFamily")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineGuestOsIdentifier,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineGuestOsIdentifier")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineRelocateTransformation,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineRelocateTransformation")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineRelocateDiskMoveOptions,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineRelocateDiskMoveOptions")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineScsiPassthroughType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineScsiPassthroughType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineTargetInfoConfigurationTag,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineTargetInfoConfigurationTag")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::UpgradePolicy,
    :schema_type => XSD::QName.new(NsVim25, "UpgradePolicy")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineUsbInfoSpeed,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineUsbInfoSpeed")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualMachineUsbInfoFamily,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineUsbInfoFamily")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CheckTestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckTestType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationSysprepRebootOption,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSysprepRebootOption")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationLicenseDataMode,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationLicenseDataMode")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::CustomizationNetBIOSMode,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationNetBIOSMode")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceConnectInfoStatus,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceConnectInfoStatus")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceFileExtension,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceFileExtension")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceURIBackingOptionDirection,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceURIBackingOptionDirection")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceConfigSpecOperation,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceConfigSpecOperation")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDeviceConfigSpecFileOperation,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceConfigSpecFileOperation")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskMode,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskMode")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualDiskCompatibilityMode,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskCompatibilityMode")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardLegacyNetworkDeviceName,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardLegacyNetworkDeviceName")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardMacType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardMacType")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualPointingDeviceHostChoice,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPointingDeviceHostChoice")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSCSISharing,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSCSISharing")
  )

  EncodedRegistry.register(
    :class => VSphereCloud::VirtualSerialPortEndPoint,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortEndPoint")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyPropertyFilterRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyPropertyFilterRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateFilterRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateFilterRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::PropertyFilterSpec"],
      ["partialUpdates", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrievePropertiesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrievePropertiesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["specSet", "VSphereCloud::PropertyFilterSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckForUpdatesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckForUpdatesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WaitForUpdatesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "WaitForUpdatesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CancelWaitForUpdatesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CancelWaitForUpdatesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WaitForUpdatesExRequestType,
    :schema_type => XSD::QName.new(NsVim25, "WaitForUpdatesExRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["options", "VSphereCloud::WaitOptions", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrievePropertiesExRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrievePropertiesExRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["specSet", "VSphereCloud::PropertyFilterSpec[]", [1, nil]],
      ["options", "VSphereCloud::RetrieveOptions"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ContinueRetrievePropertiesExRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ContinueRetrievePropertiesExRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["token", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CancelRetrievePropertiesExRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CancelRetrievePropertiesExRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["token", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreatePropertyCollectorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreatePropertyCollectorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyPropertyCollectorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyPropertyCollectorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DynamicArray,
    :schema_type => XSD::QName.new(NsVim25, "DynamicArray"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["val", "[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DynamicData,
    :schema_type => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DynamicProperty,
    :schema_type => XSD::QName.new(NsVim25, "DynamicProperty"),
    :schema_element => [
      ["name", "SOAP::SOAPString"],
      ["val", nil]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDynamicProperty,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDynamicProperty"),
    :schema_element => [
      ["dynamicProperty", ["VSphereCloud::DynamicProperty[]", XSD::QName.new(NsVim25, "DynamicProperty")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::KeyAnyValue,
    :schema_type => XSD::QName.new(NsVim25, "KeyAnyValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", nil]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfKeyAnyValue,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfKeyAnyValue"),
    :schema_element => [
      ["keyAnyValue", ["VSphereCloud::KeyAnyValue[]", XSD::QName.new(NsVim25, "KeyAnyValue")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LocalizableMessage,
    :schema_type => XSD::QName.new(NsVim25, "LocalizableMessage"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["arg", "VSphereCloud::KeyAnyValue[]", [0, nil]],
      ["message", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfLocalizableMessage,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLocalizableMessage"),
    :schema_element => [
      ["localizableMessage", ["VSphereCloud::LocalizableMessage[]", XSD::QName.new(NsVim25, "LocalizableMessage")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCommunication,
    :schema_type => XSD::QName.new(NsVim25, "HostCommunication"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNotConnected,
    :schema_type => XSD::QName.new(NsVim25, "HostNotConnected"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostCommunication"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNotReachable,
    :schema_type => XSD::QName.new(NsVim25, "HostNotReachable"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostCommunication"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidArgument,
    :schema_type => XSD::QName.new(NsVim25, "InvalidArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidRequest,
    :schema_type => XSD::QName.new(NsVim25, "InvalidRequest"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidType,
    :schema_type => XSD::QName.new(NsVim25, "InvalidType"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidRequest"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ManagedObjectNotFound,
    :schema_type => XSD::QName.new(NsVim25, "ManagedObjectNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["obj", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MethodNotFound,
    :schema_type => XSD::QName.new(NsVim25, "MethodNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidRequest"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["receiver", "VSphereCloud::ManagedObjectReference"],
      ["method", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotEnoughLicenses,
    :schema_type => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotImplemented,
    :schema_type => XSD::QName.new(NsVim25, "NotImplemented"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotSupported,
    :schema_type => XSD::QName.new(NsVim25, "NotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RequestCanceled,
    :schema_type => XSD::QName.new(NsVim25, "RequestCanceled"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::C_SecurityError,
    :schema_type => XSD::QName.new(NsVim25, "SecurityError"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SystemError,
    :schema_type => XSD::QName.new(NsVim25, "SystemError"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnexpectedFault,
    :schema_type => XSD::QName.new(NsVim25, "UnexpectedFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["faultName", "SOAP::SOAPString"],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LocalizedMethodFault,
    :schema_type => XSD::QName.new(NsVim25, "LocalizedMethodFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fault", "VSphereCloud::MethodFault"],
      ["localizedMessage", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MethodFault,
    :schema_type => XSD::QName.new(NsVim25, "MethodFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfMethodFault,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfMethodFault"),
    :schema_element => [
      ["methodFault", ["VSphereCloud::MethodFault[]", XSD::QName.new(NsVim25, "MethodFault")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RuntimeFault,
    :schema_type => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "MethodFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ManagedObjectReference,
    :schema_type => XSD::QName.new(NsVim25, "ManagedObjectReference"),
    :schema_attribute => {
      XSD::QName.new(nil, "type") => "SOAP::SOAPString"
    }
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfString,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfString"),
    :schema_element => [
      ["string", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfAnyType,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAnyType"),
    :schema_element => [
      ["anyType", "[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfManagedObjectReference,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfManagedObjectReference"),
    :schema_element => [
      ["managedObjectReference", ["VSphereCloud::ManagedObjectReference[]", XSD::QName.new(NsVim25, "ManagedObjectReference")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfByte,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfByte"),
    :schema_element => [
      ["byte", "SOAP::SOAPByte[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfInt,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfInt"),
    :schema_element => [
      ["int", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfLong,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLong"),
    :schema_element => [
      ["long", "SOAP::SOAPLong[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfShort,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfShort"),
    :schema_element => [
      ["short", "SOAP::SOAPShort[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidCollectorVersion,
    :schema_type => XSD::QName.new(NsVim25, "InvalidCollectorVersion"),
    :schema_basetype => XSD::QName.new(NsVim25, "MethodFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidProperty,
    :schema_type => XSD::QName.new(NsVim25, "InvalidProperty"),
    :schema_basetype => XSD::QName.new(NsVim25, "MethodFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PropertyFilterSpec,
    :schema_type => XSD::QName.new(NsVim25, "PropertyFilterSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["propSet", "VSphereCloud::PropertySpec[]", [1, nil]],
      ["objectSet", "VSphereCloud::ObjectSpec[]", [1, nil]],
      ["reportMissingObjectsInResults", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPropertyFilterSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPropertyFilterSpec"),
    :schema_element => [
      ["propertyFilterSpec", ["VSphereCloud::PropertyFilterSpec[]", XSD::QName.new(NsVim25, "PropertyFilterSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PropertySpec,
    :schema_type => XSD::QName.new(NsVim25, "PropertySpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["all", "SOAP::SOAPBoolean", [0, 1]],
      ["pathSet", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPropertySpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPropertySpec"),
    :schema_element => [
      ["propertySpec", ["VSphereCloud::PropertySpec[]", XSD::QName.new(NsVim25, "PropertySpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ObjectSpec,
    :schema_type => XSD::QName.new(NsVim25, "ObjectSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["skip", "SOAP::SOAPBoolean", [0, 1]],
      ["selectSet", "VSphereCloud::SelectionSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfObjectSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfObjectSpec"),
    :schema_element => [
      ["objectSpec", ["VSphereCloud::ObjectSpec[]", XSD::QName.new(NsVim25, "ObjectSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SelectionSpec,
    :schema_type => XSD::QName.new(NsVim25, "SelectionSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfSelectionSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfSelectionSpec"),
    :schema_element => [
      ["selectionSpec", ["VSphereCloud::SelectionSpec[]", XSD::QName.new(NsVim25, "SelectionSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TraversalSpec,
    :schema_type => XSD::QName.new(NsVim25, "TraversalSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "SelectionSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"],
      ["skip", "SOAP::SOAPBoolean", [0, 1]],
      ["selectSet", "VSphereCloud::SelectionSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ObjectContent,
    :schema_type => XSD::QName.new(NsVim25, "ObjectContent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["propSet", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["missingSet", "VSphereCloud::MissingProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfObjectContent,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfObjectContent"),
    :schema_element => [
      ["objectContent", ["VSphereCloud::ObjectContent[]", XSD::QName.new(NsVim25, "ObjectContent")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateSet,
    :schema_type => XSD::QName.new(NsVim25, "UpdateSet"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["filterSet", "VSphereCloud::PropertyFilterUpdate[]", [0, nil]],
      ["truncated", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PropertyFilterUpdate,
    :schema_type => XSD::QName.new(NsVim25, "PropertyFilterUpdate"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["filter", "VSphereCloud::ManagedObjectReference"],
      ["objectSet", "VSphereCloud::ObjectUpdate[]", [0, nil]],
      ["missingSet", "VSphereCloud::MissingObject[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPropertyFilterUpdate,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPropertyFilterUpdate"),
    :schema_element => [
      ["propertyFilterUpdate", ["VSphereCloud::PropertyFilterUpdate[]", XSD::QName.new(NsVim25, "PropertyFilterUpdate")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ObjectUpdate,
    :schema_type => XSD::QName.new(NsVim25, "ObjectUpdate"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["kind", "VSphereCloud::ObjectUpdateKind"],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["changeSet", "VSphereCloud::PropertyChange[]", [0, nil]],
      ["missingSet", "VSphereCloud::MissingProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfObjectUpdate,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfObjectUpdate"),
    :schema_element => [
      ["objectUpdate", ["VSphereCloud::ObjectUpdate[]", XSD::QName.new(NsVim25, "ObjectUpdate")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PropertyChange,
    :schema_type => XSD::QName.new(NsVim25, "PropertyChange"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["op", "VSphereCloud::PropertyChangeOp"],
      ["val", nil, [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPropertyChange,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPropertyChange"),
    :schema_element => [
      ["propertyChange", ["VSphereCloud::PropertyChange[]", XSD::QName.new(NsVim25, "PropertyChange")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingProperty,
    :schema_type => XSD::QName.new(NsVim25, "MissingProperty"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfMissingProperty,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfMissingProperty"),
    :schema_element => [
      ["missingProperty", ["VSphereCloud::MissingProperty[]", XSD::QName.new(NsVim25, "MissingProperty")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingObject,
    :schema_type => XSD::QName.new(NsVim25, "MissingObject"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfMissingObject,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfMissingObject"),
    :schema_element => [
      ["missingObject", ["VSphereCloud::MissingObject[]", XSD::QName.new(NsVim25, "MissingObject")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WaitOptions,
    :schema_type => XSD::QName.new(NsVim25, "WaitOptions"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["maxWaitSeconds", "SOAP::SOAPInt", [0, 1]],
      ["maxObjectUpdates", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveOptions,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveOptions"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["maxObjects", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveResult,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["token", "SOAP::SOAPString", [0, 1]],
      ["objects", "VSphereCloud::ObjectContent[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddAuthorizationRoleRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddAuthorizationRoleRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["privIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveAuthorizationRoleRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveAuthorizationRoleRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["roleId", "SOAP::SOAPInt"],
      ["failIfUsed", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateAuthorizationRoleRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateAuthorizationRoleRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["roleId", "SOAP::SOAPInt"],
      ["newName", "SOAP::SOAPString"],
      ["privIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MergePermissionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MergePermissionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["srcRoleId", "SOAP::SOAPInt"],
      ["dstRoleId", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveRolePermissionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveRolePermissionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["roleId", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveEntityPermissionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveEntityPermissionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["inherited", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveAllPermissionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveAllPermissionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetEntityPermissionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetEntityPermissionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["permission", "VSphereCloud::Permission[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetEntityPermissionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetEntityPermissionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["permission", "VSphereCloud::Permission[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveEntityPermissionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveEntityPermissionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["user", "SOAP::SOAPString"],
      ["isGroup", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureClusterRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureClusterRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::ClusterConfigSpec"],
      ["modify", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ApplyRecommendationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ApplyRecommendationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CancelRecommendationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CancelRecommendationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RecommendHostsForVmRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RecommendHostsForVmRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostConnectSpec"],
      ["asConnected", "SOAP::SOAPBoolean"],
      ["resourcePool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["license", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveIntoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MoveIntoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveHostIntoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MoveHostIntoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["resourcePool", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshRecommendationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshRecommendationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveDasAdvancedRuntimeInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveDasAdvancedRuntimeInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureComputeResourceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureComputeResourceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::ComputeResourceConfigSpec"],
      ["modify", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddCustomFieldDefRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddCustomFieldDefRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["moType", "SOAP::SOAPString", [0, 1]],
      ["fieldDefPolicy", "VSphereCloud::PrivilegePolicyDef", [0, 1]],
      ["fieldPolicy", "VSphereCloud::PrivilegePolicyDef", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveCustomFieldDefRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveCustomFieldDefRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RenameCustomFieldDefRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RenameCustomFieldDefRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetFieldRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetFieldRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["key", "SOAP::SOAPInt"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DoesCustomizationSpecExistRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DoesCustomizationSpecExistRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GetCustomizationSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "GetCustomizationSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateCustomizationSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateCustomizationSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["item", "VSphereCloud::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OverwriteCustomizationSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "OverwriteCustomizationSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["item", "VSphereCloud::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeleteCustomizationSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DeleteCustomizationSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DuplicateCustomizationSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DuplicateCustomizationSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RenameCustomizationSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RenameCustomizationSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationSpecItemToXmlRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSpecItemToXmlRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["item", "VSphereCloud::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::XmlToCustomizationSpecItemRequestType,
    :schema_type => XSD::QName.new(NsVim25, "XmlToCustomizationSpecItemRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["specItemXml", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckCustomizationResourcesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckCustomizationResourcesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["guestOs", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryConnectionInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryConnectionInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["hostname", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt"],
      ["username", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOnMultiVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PowerOnMultiVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]],
      ["option", "VSphereCloud::OptionValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshDatastoreStorageInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshDatastoreStorageInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateVirtualMachineFilesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateVirtualMachineFilesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["mountPathDatastoreMapping", "VSphereCloud::DatastoreMountPathDatastorePair[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RenameDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RenameDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDescriptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryDescriptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::BrowseDiagnosticLogRequestType,
    :schema_type => XSD::QName.new(NsVim25, "BrowseDiagnosticLogRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["start", "SOAP::SOAPInt", [0, 1]],
      ["lines", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GenerateLogBundlesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "GenerateLogBundlesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["includeDefault", "SOAP::SOAPBoolean"],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FetchDVPortKeysRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FetchDVPortKeysRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["criteria", "VSphereCloud::DistributedVirtualSwitchPortCriteria", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FetchDVPortsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FetchDVPortsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["criteria", "VSphereCloud::DistributedVirtualSwitchPortCriteria", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryUsedVlanIdInDvsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryUsedVlanIdInDvsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureDvsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureDvsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::DVSConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerformDvsProductSpecOperationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PerformDvsProductSpecOperationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["operation", "SOAP::SOAPString"],
      ["productSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MergeDvsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MergeDvsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dvs", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddDVPortgroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddDVPortgroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::DVPortgroupConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveDVPortRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MoveDVPortRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]],
      ["destinationPortgroupKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDvsCapabilityRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateDvsCapabilityRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["capability", "VSphereCloud::DVSCapability"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureDVPortRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureDVPortRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["port", "VSphereCloud::DVPortConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshDVPortStateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshDVPortStateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["portKeys", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RectifyDvsHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RectifyDvsHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["hosts", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateNetworkResourcePoolRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateNetworkResourcePoolRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["configSpec", "VSphereCloud::DVSNetworkResourcePoolConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableNetworkResourceManagementRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnableNetworkResourceManagementRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["enable", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryConfigOptionDescriptorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryConfigOptionDescriptorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryConfigOptionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryConfigOptionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryConfigTargetRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryConfigTargetRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryTargetCapabilitiesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryTargetCapabilitiesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetCustomValueRequestType,
    :schema_type => XSD::QName.new(NsVim25, "setCustomValueRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnregisterExtensionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UnregisterExtensionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindExtensionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindExtensionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RegisterExtensionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RegisterExtensionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extension", "VSphereCloud::Extension"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateExtensionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateExtensionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extension", "VSphereCloud::Extension"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GetPublicKeyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "GetPublicKeyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetPublicKeyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetPublicKeyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["publicKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetExtensionCertificateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetExtensionCertificateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["certificatePem", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveDatastoreFileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MoveDatastoreFileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["destinationName", "SOAP::SOAPString"],
      ["destinationDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CopyDatastoreFileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CopyDatastoreFileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["destinationName", "SOAP::SOAPString"],
      ["destinationDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeleteDatastoreFileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DeleteDatastoreFileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MakeDirectoryRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MakeDirectoryRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["createParentDirectories", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ChangeOwnerRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ChangeOwnerRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["owner", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateFolderRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateFolderRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveIntoFolderRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MoveIntoFolderRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["list", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::VirtualMachineConfigSpec"],
      ["pool", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RegisterVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RegisterVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["path", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["asTemplate", "SOAP::SOAPBoolean"],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateClusterRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateClusterRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::ClusterConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateClusterExRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateClusterExRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::ClusterConfigSpecEx"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddStandaloneHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddStandaloneHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostConnectSpec"],
      ["compResSpec", "VSphereCloud::ComputeResourceConfigSpec", [0, 1]],
      ["addConnected", "SOAP::SOAPBoolean"],
      ["license", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateDatacenterRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateDatacenterRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnregisterAndDestroyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UnregisterAndDestroyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateDVSRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateDVSRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::DVSCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetCollectorPageSizeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetCollectorPageSizeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RewindCollectorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RewindCollectorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetCollectorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetCollectorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyCollectorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyCollectorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryHostConnectionInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryHostConnectionInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateSystemResourcesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateSystemResourcesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["resourceInfo", "VSphereCloud::HostSystemResourceInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconnectHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconnectHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["cnxSpec", "VSphereCloud::HostConnectSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisconnectHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DisconnectHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnterMaintenanceModeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnterMaintenanceModeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["timeout", "SOAP::SOAPInt"],
      ["evacuatePoweredOffVms", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExitMaintenanceModeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExitMaintenanceModeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["timeout", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RebootHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RebootHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ShutdownHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ShutdownHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerDownHostToStandByRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PowerDownHostToStandByRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["timeoutSec", "SOAP::SOAPInt"],
      ["evacuatePoweredOffVms", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerUpHostFromStandByRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PowerUpHostFromStandByRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["timeoutSec", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryMemoryOverheadRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryMemoryOverheadRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["memorySize", "SOAP::SOAPLong"],
      ["videoRamSize", "SOAP::SOAPInt", [0, 1]],
      ["numVcpus", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryMemoryOverheadExRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryMemoryOverheadExRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vmConfigInfo", "VSphereCloud::VirtualMachineConfigInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureHostForDASRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureHostForDASRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateFlagsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateFlagsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["flagInfo", "VSphereCloud::HostFlagInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnterLockdownModeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnterLockdownModeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExitLockdownModeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExitLockdownModeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcquireCimServicesTicketRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AcquireCimServicesTicketRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateIpmiRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateIpmiRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ipmiInfo", "VSphereCloud::HostIpmiInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveHardwareUptimeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveHardwareUptimeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseGetManifestRequestType,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseGetManifestRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseCompleteRequestType,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseCompleteRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseAbortRequestType,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseAbortRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseProgressRequestType,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseProgressRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["percent", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryIpPoolsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryIpPoolsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dc", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateIpPoolRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateIpPoolRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dc", "VSphereCloud::ManagedObjectReference"],
      ["pool", "VSphereCloud::IpPool"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateIpPoolRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateIpPoolRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dc", "VSphereCloud::ManagedObjectReference"],
      ["pool", "VSphereCloud::IpPool"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyIpPoolRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyIpPoolRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dc", "VSphereCloud::ManagedObjectReference"],
      ["id", "SOAP::SOAPInt"],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateAssignedLicenseRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateAssignedLicenseRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "SOAP::SOAPString"],
      ["licenseKey", "SOAP::SOAPString"],
      ["entityDisplayName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveAssignedLicenseRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveAssignedLicenseRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entityId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAssignedLicensesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryAssignedLicensesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entityId", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QuerySupportedFeaturesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QuerySupportedFeaturesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryLicenseSourceAvailabilityRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryLicenseSourceAvailabilityRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryLicenseUsageRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryLicenseUsageRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetLicenseEditionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetLicenseEditionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckLicenseFeatureRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckLicenseFeatureRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableFeatureRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnableFeatureRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableFeatureRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DisableFeatureRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConfigureLicenseSourceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ConfigureLicenseSourceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["licenseSource", "VSphereCloud::LicenseSource"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateLicenseRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateLicenseRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labels", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddLicenseRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddLicenseRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labels", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveLicenseRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveLicenseRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DecodeLicenseRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DecodeLicenseRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateLicenseLabelRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateLicenseLabelRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labelKey", "SOAP::SOAPString"],
      ["labelValue", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveLicenseLabelRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveLicenseLabelRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labelKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReloadRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReloadRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RenameRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RenameRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyNetworkRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyNetworkRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ValidateHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ValidateHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["vhp", "VSphereCloud::OvfValidateHostParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ParseDescriptorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ParseDescriptorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["pdp", "VSphereCloud::OvfParseDescriptorParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateImportSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateImportSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["resourcePool", "VSphereCloud::ManagedObjectReference"],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["cisp", "VSphereCloud::OvfCreateImportSpecParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateDescriptorRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateDescriptorRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["cdp", "VSphereCloud::OvfCreateDescriptorParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPerfProviderSummaryRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPerfProviderSummaryRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAvailablePerfMetricRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryAvailablePerfMetricRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["beginTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]],
      ["intervalId", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPerfCounterRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPerfCounterRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["counterId", "SOAP::SOAPInt[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPerfCounterByLevelRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPerfCounterByLevelRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["level", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPerfRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPerfRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["querySpec", "VSphereCloud::PerfQuerySpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPerfCompositeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPerfCompositeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["querySpec", "VSphereCloud::PerfQuerySpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreatePerfIntervalRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreatePerfIntervalRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["intervalId", "VSphereCloud::PerfInterval"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemovePerfIntervalRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemovePerfIntervalRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["samplePeriod", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdatePerfIntervalRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdatePerfIntervalRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["interval", "VSphereCloud::PerfInterval"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EstimateDatabaseSizeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EstimateDatabaseSizeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dbSizeParam", "VSphereCloud::DatabaseSizeParam"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["config", "VSphereCloud::ResourceConfigSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveIntoResourcePoolRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MoveIntoResourcePoolRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["list", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateChildResourceConfigurationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateChildResourceConfigurationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::ResourceConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateResourcePoolRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateResourcePoolRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::ResourceConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyChildrenRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyChildrenRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["resSpec", "VSphereCloud::ResourceConfigSpec"],
      ["configSpec", "VSphereCloud::VAppConfigSpec"],
      ["vmFolder", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateChildVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateChildVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::VirtualMachineConfigSpec"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RegisterChildVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RegisterChildVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["path", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ImportVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ImportVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::ImportSpec"],
      ["folder", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryResourceConfigOptionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryResourceConfigOptionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshRuntimeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshRuntimeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindByUuidRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindByUuidRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindByDatastorePathRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindByDatastorePathRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference"],
      ["path", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindByDnsNameRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindByDnsNameRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["dnsName", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindByIpRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindByIpRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["ip", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindByInventoryPathRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindByInventoryPathRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["inventoryPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindChildRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindChildRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindAllByUuidRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindAllByUuidRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindAllByDnsNameRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindAllByDnsNameRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["dnsName", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindAllByIpRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindAllByIpRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["ip", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CurrentTimeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CurrentTimeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveServiceContentRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveServiceContentRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ValidateMigrationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ValidateMigrationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]],
      ["state", "VSphereCloud::VirtualMachinePowerState", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVMotionCompatibilityRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVMotionCompatibilityRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference[]", [1, nil]],
      ["compatibility", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveProductComponentsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveProductComponentsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateServiceMessageRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateServiceMessageRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LoginRequestType,
    :schema_type => XSD::QName.new(NsVim25, "LoginRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LoginBySSPIRequestType,
    :schema_type => XSD::QName.new(NsVim25, "LoginBySSPIRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["base64Token", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LogoutRequestType,
    :schema_type => XSD::QName.new(NsVim25, "LogoutRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcquireLocalTicketRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AcquireLocalTicketRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TerminateSessionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "TerminateSessionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sessionId", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetLocaleRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetLocaleRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["locale", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LoginExtensionBySubjectNameRequestType,
    :schema_type => XSD::QName.new(NsVim25, "LoginExtensionBySubjectNameRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LoginExtensionByCertificateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "LoginExtensionByCertificateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ImpersonateUserRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ImpersonateUserRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SessionIsActiveRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SessionIsActiveRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sessionID", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcquireCloneTicketRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AcquireCloneTicketRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CloneSessionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CloneSessionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["cloneTicket", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConfigureDatastoreIORMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ConfigureDatastoreIORMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::StorageIORMConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryIORMConfigOptionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryIORMConfigOptionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CancelTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CancelTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateProgressRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateProgressRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["percentDone", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetTaskStateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetTaskStateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["state", "VSphereCloud::TaskInfoState"],
      ["result", nil, [0, 1]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetTaskDescriptionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetTaskDescriptionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["description", "VSphereCloud::LocalizableMessage"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReadNextTasksRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReadNextTasksRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReadPreviousTasksRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReadPreviousTasksRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateCollectorForTasksRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateCollectorForTasksRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["filter", "VSphereCloud::TaskFilterSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["taskTypeId", "SOAP::SOAPString"],
      ["initiatedBy", "SOAP::SOAPString", [0, 1]],
      ["cancelable", "SOAP::SOAPBoolean"],
      ["parentTaskKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveUserGroupsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveUserGroupsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["domain", "SOAP::SOAPString", [0, 1]],
      ["searchStr", "SOAP::SOAPString"],
      ["belongsToGroup", "SOAP::SOAPString", [0, 1]],
      ["belongsToUser", "SOAP::SOAPString", [0, 1]],
      ["exactMatch", "SOAP::SOAPBoolean"],
      ["findUsers", "SOAP::SOAPBoolean"],
      ["findGroups", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateVAppConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateVAppConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::VAppConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateLinkedChildrenRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateLinkedChildrenRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["addChangeSet", "VSphereCloud::VirtualAppLinkInfo[]", [0, nil]],
      ["removeSet", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CloneVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CloneVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["target", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::VAppCloneSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExportVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExportVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOnVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PowerOnVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOffVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PowerOffVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SuspendVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SuspendVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnregisterVAppRequestType,
    :schema_type => XSD::QName.new(NsVim25, "unregisterVAppRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["spec", "VSphereCloud::VirtualDiskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeleteVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DeleteVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MoveVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["destName", "SOAP::SOAPString"],
      ["destDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CopyVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CopyVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["destName", "SOAP::SOAPString"],
      ["destDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["destSpec", "VSphereCloud::VirtualDiskSpec", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtendVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExtendVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["newCapacityKb", "SOAP::SOAPLong"],
      ["eagerZero", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVirtualDiskFragmentationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVirtualDiskFragmentationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DefragmentVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DefragmentVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ShrinkVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ShrinkVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["copy", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InflateVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "InflateVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EagerZeroVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EagerZeroVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ZeroFillVirtualDiskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ZeroFillVirtualDiskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetVirtualDiskUuidRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetVirtualDiskUuidRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVirtualDiskUuidRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVirtualDiskUuidRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVirtualDiskGeometryRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVirtualDiskGeometryRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshStorageInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshStorageInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateSnapshotRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateSnapshotRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["memory", "SOAP::SOAPBoolean"],
      ["quiesce", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RevertToCurrentSnapshotRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RevertToCurrentSnapshotRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["suppressPowerOn", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveAllSnapshotsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveAllSnapshotsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::VirtualMachineConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpgradeVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpgradeVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtractOvfEnvironmentRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExtractOvfEnvironmentRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOnVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PowerOnVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOffVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PowerOffVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SuspendVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SuspendVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ShutdownGuestRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ShutdownGuestRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RebootGuestRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RebootGuestRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StandbyGuestRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StandbyGuestRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AnswerVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AnswerVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["questionId", "SOAP::SOAPString"],
      ["answerChoice", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizeVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CustomizeVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::CustomizationSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckCustomizationSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckCustomizationSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::CustomizationSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrateVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MigrateVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["priority", "VSphereCloud::VirtualMachineMovePriority"],
      ["state", "VSphereCloud::VirtualMachinePowerState", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RelocateVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RelocateVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::VirtualMachineRelocateSpec"],
      ["priority", "VSphereCloud::VirtualMachineMovePriority", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CloneVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CloneVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["folder", "VSphereCloud::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::VirtualMachineCloneSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExportVmRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExportVmRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MarkAsTemplateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MarkAsTemplateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MarkAsVirtualMachineRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MarkAsVirtualMachineRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pool", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnregisterVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UnregisterVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetGuestInformationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetGuestInformationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MountToolsInstallerRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MountToolsInstallerRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnmountToolsInstallerRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UnmountToolsInstallerRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpgradeToolsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpgradeToolsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["installerOptions", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcquireMksTicketRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AcquireMksTicketRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcquireTicketRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AcquireTicketRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ticketType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetScreenResolutionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetScreenResolutionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["width", "SOAP::SOAPInt"],
      ["height", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DefragmentAllDisksRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DefragmentAllDisksRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateSecondaryVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateSecondaryVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TurnOffFaultToleranceForVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "TurnOffFaultToleranceForVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MakePrimaryVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "MakePrimaryVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TerminateFaultTolerantVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "TerminateFaultTolerantVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableSecondaryVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DisableSecondaryVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableSecondaryVMRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnableSecondaryVMRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetDisplayTopologyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetDisplayTopologyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["displays", "VSphereCloud::VirtualMachineDisplayTopology[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StartRecordingRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StartRecordingRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StopRecordingRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StopRecordingRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StartReplayingRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StartReplayingRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["replaySnapshot", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StopReplayingRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StopReplayingRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PromoteDisksRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PromoteDisksRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["unlink", "SOAP::SOAPBoolean"],
      ["disks", "VSphereCloud::VirtualDisk[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateScreenshotRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateScreenshotRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryChangedDiskAreasRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryChangedDiskAreasRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["snapshot", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["deviceKey", "SOAP::SOAPInt"],
      ["startOffset", "SOAP::SOAPLong"],
      ["changeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryUnownedFilesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryUnownedFilesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReloadVirtualMachineFromPathRequestType,
    :schema_type => XSD::QName.new(NsVim25, "reloadVirtualMachineFromPathRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["configurationPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryFaultToleranceCompatibilityRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryFaultToleranceCompatibilityRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveAlarmRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveAlarmRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureAlarmRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureAlarmRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::AlarmSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateAlarmRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateAlarmRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::AlarmSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GetAlarmRequestType,
    :schema_type => XSD::QName.new(NsVim25, "GetAlarmRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AreAlarmActionsEnabledRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AreAlarmActionsEnabledRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableAlarmActionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnableAlarmActionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GetAlarmStateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "GetAlarmStateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcknowledgeAlarmRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AcknowledgeAlarmRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["alarm", "VSphereCloud::ManagedObjectReference"],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureDVPortgroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureDVPortgroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::DVPortgroupConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAvailableDvsSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryAvailableDvsSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryCompatibleHostForNewDvsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryCompatibleHostForNewDvsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["container", "VSphereCloud::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"],
      ["switchProductSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryCompatibleHostForExistingDvsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryCompatibleHostForExistingDvsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["container", "VSphereCloud::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"],
      ["dvs", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDvsCompatibleHostSpecRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryDvsCompatibleHostSpecRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["switchProductSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDvsFeatureCapabilityRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryDvsFeatureCapabilityRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["switchProductSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDvsByUuidRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryDvsByUuidRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDvsConfigTargetRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryDvsConfigTargetRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["dvs", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDvsCheckCompatibilityRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryDvsCheckCompatibilityRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["hostContainer", "VSphereCloud::DistributedVirtualSwitchManagerHostContainer"],
      ["dvsProductSpec", "VSphereCloud::DistributedVirtualSwitchManagerDvsProductSpec", [0, 1]],
      ["hostFilterSpec", "VSphereCloud::DistributedVirtualSwitchManagerHostDvsFilterSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReadNextEventsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReadNextEventsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReadPreviousEventsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReadPreviousEventsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveArgumentDescriptionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveArgumentDescriptionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["eventTypeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateCollectorForEventsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateCollectorForEventsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["filter", "VSphereCloud::EventFilterSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LogUserEventRequestType,
    :schema_type => XSD::QName.new(NsVim25, "LogUserEventRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["msg", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryEventsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryEventsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["filter", "VSphereCloud::EventFilterSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PostEventRequestType,
    :schema_type => XSD::QName.new(NsVim25, "PostEventRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["eventToPost", "VSphereCloud::Event"],
      ["taskInfo", "VSphereCloud::TaskInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::JoinDomainRequestType,
    :schema_type => XSD::QName.new(NsVim25, "JoinDomainRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["domainName", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LeaveCurrentDomainRequestType,
    :schema_type => XSD::QName.new(NsVim25, "LeaveCurrentDomainRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureAutostartRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureAutostartRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostAutoStartManagerConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AutoStartPowerOnRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AutoStartPowerOnRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AutoStartPowerOffRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AutoStartPowerOffRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryBootDevicesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryBootDevicesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateBootDeviceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateBootDeviceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableHyperThreadingRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnableHyperThreadingRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableHyperThreadingRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DisableHyperThreadingRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SearchDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SearchDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastorePath", "SOAP::SOAPString"],
      ["searchSpec", "VSphereCloud::HostDatastoreBrowserSearchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SearchDatastoreSubFoldersRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SearchDatastoreSubFoldersRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastorePath", "SOAP::SOAPString"],
      ["searchSpec", "VSphereCloud::HostDatastoreBrowserSearchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeleteFileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DeleteFileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastorePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateLocalSwapDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateLocalSwapDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAvailableDisksForVmfsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryAvailableDisksForVmfsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVmfsDatastoreCreateOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVmfsDatastoreCreateOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["devicePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateVmfsDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateVmfsDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::VmfsDatastoreCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVmfsDatastoreExtendOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVmfsDatastoreExtendOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["devicePath", "SOAP::SOAPString"],
      ["suppressExpandCandidates", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVmfsDatastoreExpandOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVmfsDatastoreExpandOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtendVmfsDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExtendVmfsDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::VmfsDatastoreExtendSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExpandVmfsDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExpandVmfsDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::VmfsDatastoreExpandSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateNasDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateNasDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostNasVolumeSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateLocalDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateLocalDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveDatastoreRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveDatastoreRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConfigureDatastorePrincipalRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ConfigureDatastorePrincipalRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryUnresolvedVmfsVolumesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryUnresolvedVmfsVolumesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResignatureUnresolvedVmfsVolumeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResignatureUnresolvedVmfsVolumeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["resolutionSpec", "VSphereCloud::HostUnresolvedVmfsResignatureSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDateTimeConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateDateTimeConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostDateTimeConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAvailableTimeZonesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryAvailableTimeZonesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDateTimeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryDateTimeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDateTimeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateDateTimeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dateTime", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshDateTimeSystemRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshDateTimeSystemRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAvailablePartitionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryAvailablePartitionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SelectActivePartitionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SelectActivePartitionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["partition", "VSphereCloud::HostScsiDiskPartition", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPartitionCreateOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPartitionCreateOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPartitionCreateDescRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPartitionCreateDescRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["diskUuid", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateDiagnosticPartitionRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateDiagnosticPartitionRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostDiagnosticPartitionCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDefaultPolicyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateDefaultPolicyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["defaultPolicy", "VSphereCloud::HostFirewallDefaultPolicy"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableRulesetRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnableRulesetRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableRulesetRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DisableRulesetRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshFirewallRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshFirewallRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetFirmwareToFactoryDefaultsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetFirmwareToFactoryDefaultsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::BackupFirmwareConfigurationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "BackupFirmwareConfigurationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryFirmwareConfigUploadURLRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryFirmwareConfigUploadURLRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RestoreFirmwareConfigurationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RestoreFirmwareConfigurationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshHealthStatusSystemRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshHealthStatusSystemRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetSystemHealthInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetSystemHealthInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryModulesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryModulesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateModuleOptionStringRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateModuleOptionStringRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["options", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryConfiguredModuleOptionStringRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryConfiguredModuleOptionStringRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateUserRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateUserRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["user", "VSphereCloud::HostAccountSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateUserRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateUserRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["user", "VSphereCloud::HostAccountSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateGroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateGroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["group", "VSphereCloud::HostAccountSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveUserRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveUserRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveGroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveGroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["groupName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AssignUserToGroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AssignUserToGroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["user", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnassignUserFromGroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UnassignUserFromGroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["user", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureServiceConsoleReservationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureServiceConsoleReservationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["cfgBytes", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureVirtualMachineReservationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureVirtualMachineReservationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::VirtualMachineMemoryReservationSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateNetworkConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateNetworkConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostNetworkConfig"],
      ["changeMode", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDnsConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateDnsConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostDnsConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateIpRouteConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateIpRouteConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostIpRouteConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateConsoleIpRouteConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateConsoleIpRouteConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostIpRouteConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateIpRouteTableConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateIpRouteTableConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostIpRouteTableConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddVirtualSwitchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddVirtualSwitchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vswitchName", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostVirtualSwitchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveVirtualSwitchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveVirtualSwitchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vswitchName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateVirtualSwitchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateVirtualSwitchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vswitchName", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostVirtualSwitchSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddPortGroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddPortGroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["portgrp", "VSphereCloud::HostPortGroupSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemovePortGroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemovePortGroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pgName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdatePortGroupRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdatePortGroupRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pgName", "SOAP::SOAPString"],
      ["portgrp", "VSphereCloud::HostPortGroupSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdatePhysicalNicLinkSpeedRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdatePhysicalNicLinkSpeedRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"],
      ["linkSpeed", "VSphereCloud::PhysicalNicLinkInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryNetworkHintRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryNetworkHintRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddVirtualNicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddVirtualNicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["portgroup", "SOAP::SOAPString"],
      ["nic", "VSphereCloud::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveVirtualNicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveVirtualNicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateVirtualNicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateVirtualNicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"],
      ["nic", "VSphereCloud::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddServiceConsoleVirtualNicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddServiceConsoleVirtualNicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["portgroup", "SOAP::SOAPString"],
      ["nic", "VSphereCloud::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveServiceConsoleVirtualNicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveServiceConsoleVirtualNicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateServiceConsoleVirtualNicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateServiceConsoleVirtualNicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"],
      ["nic", "VSphereCloud::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RestartServiceConsoleVirtualNicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RestartServiceConsoleVirtualNicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshNetworkSystemRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshNetworkSystemRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckHostPatchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckHostPatchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScanHostPatchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ScanHostPatchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["repository", "VSphereCloud::HostPatchManagerLocator"],
      ["updateID", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScanHostPatchV2RequestType,
    :schema_type => XSD::QName.new(NsVim25, "ScanHostPatchV2RequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StageHostPatchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StageHostPatchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["vibUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InstallHostPatchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "InstallHostPatchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["repository", "VSphereCloud::HostPatchManagerLocator"],
      ["updateID", "SOAP::SOAPString"],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InstallHostPatchV2RequestType,
    :schema_type => XSD::QName.new(NsVim25, "InstallHostPatchV2RequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["vibUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UninstallHostPatchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UninstallHostPatchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["bulletinIds", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryHostPatchRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryHostPatchRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdatePassthruConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdatePassthruConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostPciPassthruConfig[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConfigurePowerPolicyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ConfigurePowerPolicyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateServicePolicyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateServicePolicyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StartServiceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StartServiceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StopServiceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "StopServiceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RestartServiceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RestartServiceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UninstallServiceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UninstallServiceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshServicesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshServicesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureSnmpAgentRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureSnmpAgentRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostSnmpConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SendTestNotificationRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SendTestNotificationRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveDiskPartitionInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveDiskPartitionInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["devicePath", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ComputeDiskPartitionInfoRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ComputeDiskPartitionInfoRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["devicePath", "SOAP::SOAPString"],
      ["layout", "VSphereCloud::HostDiskPartitionLayout"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ComputeDiskPartitionInfoForResizeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ComputeDiskPartitionInfoForResizeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["partition", "VSphereCloud::HostScsiDiskPartition"],
      ["blockRange", "VSphereCloud::HostDiskPartitionBlockRange"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDiskPartitionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateDiskPartitionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["devicePath", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostDiskPartitionSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FormatVmfsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FormatVmfsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["createSpec", "VSphereCloud::HostVmfsSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RescanVmfsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RescanVmfsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AttachVmfsExtentRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AttachVmfsExtentRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vmfsPath", "SOAP::SOAPString"],
      ["extent", "VSphereCloud::HostScsiDiskPartition"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExpandVmfsExtentRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExpandVmfsExtentRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vmfsPath", "SOAP::SOAPString"],
      ["extent", "VSphereCloud::HostScsiDiskPartition"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpgradeVmfsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpgradeVmfsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vmfsPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpgradeVmLayoutRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpgradeVmLayoutRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryUnresolvedVmfsVolumeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryUnresolvedVmfsVolumeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResolveMultipleUnresolvedVmfsVolumesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResolveMultipleUnresolvedVmfsVolumesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["resolutionSpec", "VSphereCloud::HostUnresolvedVmfsResolutionSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnmountForceMountedVmfsVolumeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UnmountForceMountedVmfsVolumeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vmfsUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RescanHbaRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RescanHbaRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["hbaDevice", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RescanAllHbaRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RescanAllHbaRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateSoftwareInternetScsiEnabledRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateSoftwareInternetScsiEnabledRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiDiscoveryPropertiesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateInternetScsiDiscoveryPropertiesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["discoveryProperties", "VSphereCloud::HostInternetScsiHbaDiscoveryProperties"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiAuthenticationPropertiesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateInternetScsiAuthenticationPropertiesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["authenticationProperties", "VSphereCloud::HostInternetScsiHbaAuthenticationProperties"],
      ["targetSet", "VSphereCloud::HostInternetScsiHbaTargetSet", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiDigestPropertiesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateInternetScsiDigestPropertiesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targetSet", "VSphereCloud::HostInternetScsiHbaTargetSet", [0, 1]],
      ["digestProperties", "VSphereCloud::HostInternetScsiHbaDigestProperties"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiAdvancedOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateInternetScsiAdvancedOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targetSet", "VSphereCloud::HostInternetScsiHbaTargetSet", [0, 1]],
      ["options", "VSphereCloud::HostInternetScsiHbaParamValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiIPPropertiesRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateInternetScsiIPPropertiesRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["ipProperties", "VSphereCloud::HostInternetScsiHbaIPProperties"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiNameRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateInternetScsiNameRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["iScsiName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiAliasRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateInternetScsiAliasRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["iScsiAlias", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddInternetScsiSendTargetsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddInternetScsiSendTargetsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VSphereCloud::HostInternetScsiHbaSendTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveInternetScsiSendTargetsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveInternetScsiSendTargetsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VSphereCloud::HostInternetScsiHbaSendTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddInternetScsiStaticTargetsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AddInternetScsiStaticTargetsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VSphereCloud::HostInternetScsiHbaStaticTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveInternetScsiStaticTargetsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveInternetScsiStaticTargetsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VSphereCloud::HostInternetScsiHbaStaticTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableMultipathPathRequestType,
    :schema_type => XSD::QName.new(NsVim25, "EnableMultipathPathRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pathName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableMultipathPathRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DisableMultipathPathRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pathName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetMultipathLunPolicyRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SetMultipathLunPolicyRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["lunId", "SOAP::SOAPString"],
      ["policy", "VSphereCloud::HostMultipathInfoLogicalUnitPolicy"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPathSelectionPolicyOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPathSelectionPolicyOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryStorageArrayTypePolicyOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryStorageArrayTypePolicyOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateScsiLunDisplayNameRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateScsiLunDisplayNameRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["lunUuid", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshStorageSystemRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RefreshStorageSystemRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateIpConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateIpConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ipConfig", "VSphereCloud::HostIpConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SelectVnicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SelectVnicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeselectVnicRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DeselectVnicRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryNetConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryNetConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["nicType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SelectVnicForNicTypeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "SelectVnicForNicTypeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["nicType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeselectVnicForNicTypeRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DeselectVnicForNicTypeRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["nicType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateOptionsRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateOptionsRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["changedValue", "VSphereCloud::OptionValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckComplianceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckComplianceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["profile", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryComplianceStatusRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryComplianceStatusRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["profile", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClearComplianceStatusRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ClearComplianceStatusRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["profile", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryExpressionMetadataRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryExpressionMetadataRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["expressionName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AssociateProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "AssociateProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DissociateProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DissociateProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckProfileComplianceRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckProfileComplianceRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExportProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExportProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["createSpec", "VSphereCloud::ProfileCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPolicyMetadataRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryPolicyMetadataRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["policyName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindAssociatedProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "FindAssociatedProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateClusterProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateClusterProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::ClusterProfileConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateReferenceHostRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateReferenceHostRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateHostProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "UpdateHostProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostProfileConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExecuteHostProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ExecuteHostProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["deferredParam", "VSphereCloud::ProfileDeferredPolicyOptionParameter[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ApplyHostConfigRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ApplyHostConfigRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["configSpec", "VSphereCloud::HostConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GenerateConfigTaskListRequestType,
    :schema_type => XSD::QName.new(NsVim25, "GenerateConfigTaskListRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["configSpec", "VSphereCloud::HostConfigSpec"],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryHostProfileMetadataRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryHostProfileMetadataRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["profileName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateDefaultProfileRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateDefaultProfileRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["profileType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveScheduledTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveScheduledTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureScheduledTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ReconfigureScheduledTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::ScheduledTaskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RunScheduledTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RunScheduledTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateScheduledTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateScheduledTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::ScheduledTaskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveEntityScheduledTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveEntityScheduledTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateObjectScheduledTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateObjectScheduledTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::ScheduledTaskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveObjectScheduledTaskRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RetrieveObjectScheduledTaskRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OpenInventoryViewFolderRequestType,
    :schema_type => XSD::QName.new(NsVim25, "OpenInventoryViewFolderRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CloseInventoryViewFolderRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CloseInventoryViewFolderRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ModifyListViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ModifyListViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["add", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["remove", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetListViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetListViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetListViewFromViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "ResetListViewFromViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["view", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "DestroyViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateInventoryViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateInventoryViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateContainerViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateContainerViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["container", "VSphereCloud::ManagedObjectReference"],
      ["type", "SOAP::SOAPString[]", [0, nil]],
      ["recursive", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateListViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateListViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateListViewFromViewRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CreateListViewFromViewRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["view", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RevertToSnapshotRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RevertToSnapshotRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["suppressPowerOn", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveSnapshotRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RemoveSnapshotRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["removeChildren", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RenameSnapshotRequestType,
    :schema_type => XSD::QName.new(NsVim25, "RenameSnapshotRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckCompatibilityRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckCompatibilityRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVMotionCompatibilityExRequestType,
    :schema_type => XSD::QName.new(NsVim25, "QueryVMotionCompatibilityExRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckMigrateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckMigrateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["state", "VSphereCloud::VirtualMachinePowerState", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckRelocateRequestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckRelocateRequestType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::VirtualMachineRelocateSpec"],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AboutInfo,
    :schema_type => XSD::QName.new(NsVim25, "AboutInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["build", "SOAP::SOAPString"],
      ["localeVersion", "SOAP::SOAPString", [0, 1]],
      ["localeBuild", "SOAP::SOAPString", [0, 1]],
      ["osType", "SOAP::SOAPString"],
      ["productLineId", "SOAP::SOAPString"],
      ["apiType", "SOAP::SOAPString"],
      ["apiVersion", "SOAP::SOAPString"],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["licenseProductName", "SOAP::SOAPString", [0, 1]],
      ["licenseProductVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AuthorizationDescription,
    :schema_type => XSD::QName.new(NsVim25, "AuthorizationDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["privilege", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["privilegeGroup", "VSphereCloud::ElementDescription[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::Permission,
    :schema_type => XSD::QName.new(NsVim25, "Permission"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"],
      ["roleId", "SOAP::SOAPInt"],
      ["propagate", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPermission,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPermission"),
    :schema_element => [
      ["permission", ["VSphereCloud::Permission[]", XSD::QName.new(NsVim25, "Permission")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AuthorizationRole,
    :schema_type => XSD::QName.new(NsVim25, "AuthorizationRole"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["roleId", "SOAP::SOAPInt"],
      ["system", "SOAP::SOAPBoolean"],
      ["name", "SOAP::SOAPString"],
      ["info", "VSphereCloud::Description"],
      ["privilege", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfAuthorizationRole,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAuthorizationRole"),
    :schema_element => [
      ["authorizationRole", ["VSphereCloud::AuthorizationRole[]", XSD::QName.new(NsVim25, "AuthorizationRole")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AuthorizationPrivilege,
    :schema_type => XSD::QName.new(NsVim25, "AuthorizationPrivilege"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["privId", "SOAP::SOAPString"],
      ["onParent", "SOAP::SOAPBoolean"],
      ["name", "SOAP::SOAPString"],
      ["privGroupName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfAuthorizationPrivilege,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAuthorizationPrivilege"),
    :schema_element => [
      ["authorizationPrivilege", ["VSphereCloud::AuthorizationPrivilege[]", XSD::QName.new(NsVim25, "AuthorizationPrivilege")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::BoolPolicy,
    :schema_type => XSD::QName.new(NsVim25, "BoolPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::Capability,
    :schema_type => XSD::QName.new(NsVim25, "Capability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["provisioningSupported", "SOAP::SOAPBoolean"],
      ["multiHostSupported", "SOAP::SOAPBoolean"],
      ["userShellAccessSupported", "SOAP::SOAPBoolean"],
      ["supportedEVCMode", "VSphereCloud::EVCMode[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterComputeResourceSummary,
    :schema_type => XSD::QName.new(NsVim25, "ClusterComputeResourceSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "ComputeResourceSummary"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["totalCpu", "SOAP::SOAPInt"],
      ["totalMemory", "SOAP::SOAPLong"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["effectiveCpu", "SOAP::SOAPInt"],
      ["effectiveMemory", "SOAP::SOAPLong"],
      ["numHosts", "SOAP::SOAPInt"],
      ["numEffectiveHosts", "SOAP::SOAPInt"],
      ["overallStatus", "VSphereCloud::ManagedEntityStatus"],
      ["currentFailoverLevel", "SOAP::SOAPInt"],
      ["admissionControlInfo", "VSphereCloud::ClusterDasAdmissionControlInfo", [0, 1]],
      ["numVmotions", "SOAP::SOAPInt"],
      ["targetBalance", "SOAP::SOAPInt", [0, 1]],
      ["currentBalance", "SOAP::SOAPInt", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ComputeResourceSummary,
    :schema_type => XSD::QName.new(NsVim25, "ComputeResourceSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["totalCpu", "SOAP::SOAPInt"],
      ["totalMemory", "SOAP::SOAPLong"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["effectiveCpu", "SOAP::SOAPInt"],
      ["effectiveMemory", "SOAP::SOAPLong"],
      ["numHosts", "SOAP::SOAPInt"],
      ["numEffectiveHosts", "SOAP::SOAPInt"],
      ["overallStatus", "VSphereCloud::ManagedEntityStatus"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ComputeResourceConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ComputeResourceConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ComputeResourceConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ComputeResourceConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomFieldDef,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldDef"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["managedObjectType", "SOAP::SOAPString", [0, 1]],
      ["fieldDefPrivileges", "VSphereCloud::PrivilegePolicyDef", [0, 1]],
      ["fieldInstancePrivileges", "VSphereCloud::PrivilegePolicyDef", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfCustomFieldDef,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfCustomFieldDef"),
    :schema_element => [
      ["customFieldDef", ["VSphereCloud::CustomFieldDef[]", XSD::QName.new(NsVim25, "CustomFieldDef")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomFieldValue,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfCustomFieldValue,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfCustomFieldValue"),
    :schema_element => [
      ["customFieldValue", ["VSphereCloud::CustomFieldValue[]", XSD::QName.new(NsVim25, "CustomFieldValue")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomFieldStringValue,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldStringValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomFieldValue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationSpecInfo,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSpecInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["changeVersion", "SOAP::SOAPString", [0, 1]],
      ["lastUpdateTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfCustomizationSpecInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfCustomizationSpecInfo"),
    :schema_element => [
      ["customizationSpecInfo", ["VSphereCloud::CustomizationSpecInfo[]", XSD::QName.new(NsVim25, "CustomizationSpecInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationSpecItem,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSpecItem"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["info", "VSphereCloud::CustomizationSpecInfo"],
      ["spec", "VSphereCloud::CustomizationSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreSummary,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["uncommitted", "SOAP::SOAPLong", [0, 1]],
      ["accessible", "SOAP::SOAPBoolean"],
      ["multipleHostAccess", "SOAP::SOAPBoolean", [0, 1]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreCapability,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["directoryHierarchySupported", "SOAP::SOAPBoolean"],
      ["rawDiskMappingsSupported", "SOAP::SOAPBoolean"],
      ["perFileThinProvisioningSupported", "SOAP::SOAPBoolean"],
      ["storageIORMSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreHostMount,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreHostMount"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["mountInfo", "VSphereCloud::HostMountInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDatastoreHostMount,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDatastoreHostMount"),
    :schema_element => [
      ["datastoreHostMount", ["VSphereCloud::DatastoreHostMount[]", XSD::QName.new(NsVim25, "DatastoreHostMount")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreMountPathDatastorePair,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreMountPathDatastorePair"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["oldMountPath", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDatastoreMountPathDatastorePair,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDatastoreMountPathDatastorePair"),
    :schema_element => [
      ["datastoreMountPathDatastorePair", ["VSphereCloud::DatastoreMountPathDatastorePair[]", XSD::QName.new(NsVim25, "DatastoreMountPathDatastorePair")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::Description,
    :schema_type => XSD::QName.new(NsVim25, "Description"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DiagnosticManagerLogDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "DiagnosticManagerLogDescriptor"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["fileName", "SOAP::SOAPString"],
      ["creator", "SOAP::SOAPString"],
      ["format", "SOAP::SOAPString"],
      ["mimeType", "SOAP::SOAPString"],
      ["info", "VSphereCloud::Description"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDiagnosticManagerLogDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDiagnosticManagerLogDescriptor"),
    :schema_element => [
      ["diagnosticManagerLogDescriptor", ["VSphereCloud::DiagnosticManagerLogDescriptor[]", XSD::QName.new(NsVim25, "DiagnosticManagerLogDescriptor")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DiagnosticManagerLogHeader,
    :schema_type => XSD::QName.new(NsVim25, "DiagnosticManagerLogHeader"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["lineStart", "SOAP::SOAPInt"],
      ["lineEnd", "SOAP::SOAPInt"],
      ["lineText", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DiagnosticManagerBundleInfo,
    :schema_type => XSD::QName.new(NsVim25, "DiagnosticManagerBundleInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["system", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["url", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDiagnosticManagerBundleInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDiagnosticManagerBundleInfo"),
    :schema_element => [
      ["diagnosticManagerBundleInfo", ["VSphereCloud::DiagnosticManagerBundleInfo[]", XSD::QName.new(NsVim25, "DiagnosticManagerBundleInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSContactInfo,
    :schema_type => XSD::QName.new(NsVim25, "DVSContactInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["contact", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSFeatureCapability,
    :schema_type => XSD::QName.new(NsVim25, "DVSFeatureCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["networkResourceManagementSupported", "SOAP::SOAPBoolean"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean"],
      ["nicTeamingPolicy", "SOAP::SOAPString[]", [0, nil]],
      ["networkResourcePoolHighShareValue", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSCapability,
    :schema_type => XSD::QName.new(NsVim25, "DVSCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dvsOperationSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["dvPortGroupOperationSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["dvPortOperationSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["compatibleHostComponentProductInfo", "VSphereCloud::DistributedVirtualSwitchHostProductSpec[]", [0, nil]],
      ["featuresSupported", "VSphereCloud::DVSFeatureCapability", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSSummary,
    :schema_type => XSD::QName.new(NsVim25, "DVSSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["hostMember", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["portgroupName", "SOAP::SOAPString[]", [0, nil]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["contact", "VSphereCloud::DVSContactInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSPolicy,
    :schema_type => XSD::QName.new(NsVim25, "DVSPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["autoPreInstallAllowed", "SOAP::SOAPBoolean", [0, 1]],
      ["autoUpgradeAllowed", "SOAP::SOAPBoolean", [0, 1]],
      ["partialUpgradeAllowed", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSUplinkPortPolicy,
    :schema_type => XSD::QName.new(NsVim25, "DVSUplinkPortPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSNameArrayUplinkPortPolicy,
    :schema_type => XSD::QName.new(NsVim25, "DVSNameArrayUplinkPortPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVSUplinkPortPolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["uplinkPortName", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "DVSConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["numStandalonePorts", "SOAP::SOAPInt", [0, 1]],
      ["maxPorts", "SOAP::SOAPInt", [0, 1]],
      ["uplinkPortPolicy", "VSphereCloud::DVSUplinkPortPolicy", [0, 1]],
      ["uplinkPortgroup", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VSphereCloud::DVPortSetting", [0, 1]],
      ["host", "VSphereCloud::DistributedVirtualSwitchHostMemberConfigSpec[]", [0, nil]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["policy", "VSphereCloud::DVSPolicy", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["contact", "VSphereCloud::DVSContactInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSCreateSpec,
    :schema_type => XSD::QName.new(NsVim25, "DVSCreateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["configSpec", "VSphereCloud::DVSConfigSpec"],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["capability", "VSphereCloud::DVSCapability", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "DVSConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["numStandalonePorts", "SOAP::SOAPInt"],
      ["numPorts", "SOAP::SOAPInt"],
      ["maxPorts", "SOAP::SOAPInt"],
      ["uplinkPortPolicy", "VSphereCloud::DVSUplinkPortPolicy"],
      ["uplinkPortgroup", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VSphereCloud::DVPortSetting"],
      ["host", "VSphereCloud::DistributedVirtualSwitchHostMember[]", [0, nil]],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec"],
      ["targetInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["policy", "VSphereCloud::DVSPolicy", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPString"],
      ["contact", "VSphereCloud::DVSContactInfo"],
      ["createTime", "SOAP::SOAPDateTime"],
      ["networkResourceManagementEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCMode,
    :schema_type => XSD::QName.new(NsVim25, "EVCMode"),
    :schema_basetype => XSD::QName.new(NsVim25, "ElementDescription"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["guaranteedCPUFeatures", "VSphereCloud::HostCpuIdInfo[]", [0, nil]],
      ["vendor", "SOAP::SOAPString"],
      ["track", "SOAP::SOAPString[]", [0, nil]],
      ["vendorTier", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfEVCMode,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfEVCMode"),
    :schema_element => [
      ["eVCMode", ["VSphereCloud::EVCMode[]", XSD::QName.new(NsVim25, "EVCMode")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ElementDescription,
    :schema_type => XSD::QName.new(NsVim25, "ElementDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "Description"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfElementDescription,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfElementDescription"),
    :schema_element => [
      ["elementDescription", ["VSphereCloud::ElementDescription[]", XSD::QName.new(NsVim25, "ElementDescription")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnumDescription,
    :schema_type => XSD::QName.new(NsVim25, "EnumDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["tags", "VSphereCloud::ElementDescription[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfEnumDescription,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfEnumDescription"),
    :schema_element => [
      ["enumDescription", ["VSphereCloud::EnumDescription[]", XSD::QName.new(NsVim25, "EnumDescription")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtendedDescription,
    :schema_type => XSD::QName.new(NsVim25, "ExtendedDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "Description"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["messageCatalogKeyPrefix", "SOAP::SOAPString"],
      ["messageArg", "VSphereCloud::KeyAnyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtendedElementDescription,
    :schema_type => XSD::QName.new(NsVim25, "ExtendedElementDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "ElementDescription"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["messageCatalogKeyPrefix", "SOAP::SOAPString"],
      ["messageArg", "VSphereCloud::KeyAnyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtensionServerInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionServerInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"],
      ["description", "VSphereCloud::Description"],
      ["company", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["adminEmail", "SOAP::SOAPString[]", [1, nil]],
      ["serverThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfExtensionServerInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtensionServerInfo"),
    :schema_element => [
      ["extensionServerInfo", ["VSphereCloud::ExtensionServerInfo[]", XSD::QName.new(NsVim25, "ExtensionServerInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtensionClientInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionClientInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["description", "VSphereCloud::Description"],
      ["company", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfExtensionClientInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtensionClientInfo"),
    :schema_element => [
      ["extensionClientInfo", ["VSphereCloud::ExtensionClientInfo[]", XSD::QName.new(NsVim25, "ExtensionClientInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtensionTaskTypeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionTaskTypeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["taskID", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfExtensionTaskTypeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtensionTaskTypeInfo"),
    :schema_element => [
      ["extensionTaskTypeInfo", ["VSphereCloud::ExtensionTaskTypeInfo[]", XSD::QName.new(NsVim25, "ExtensionTaskTypeInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtensionEventTypeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionEventTypeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["eventID", "SOAP::SOAPString"],
      ["eventTypeSchema", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfExtensionEventTypeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtensionEventTypeInfo"),
    :schema_element => [
      ["extensionEventTypeInfo", ["VSphereCloud::ExtensionEventTypeInfo[]", XSD::QName.new(NsVim25, "ExtensionEventTypeInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtensionFaultTypeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionFaultTypeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultID", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfExtensionFaultTypeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtensionFaultTypeInfo"),
    :schema_element => [
      ["extensionFaultTypeInfo", ["VSphereCloud::ExtensionFaultTypeInfo[]", XSD::QName.new(NsVim25, "ExtensionFaultTypeInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtensionPrivilegeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionPrivilegeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["privID", "SOAP::SOAPString"],
      ["privGroupName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfExtensionPrivilegeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtensionPrivilegeInfo"),
    :schema_element => [
      ["extensionPrivilegeInfo", ["VSphereCloud::ExtensionPrivilegeInfo[]", XSD::QName.new(NsVim25, "ExtensionPrivilegeInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtensionResourceInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionResourceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["v_module", ["SOAP::SOAPString", XSD::QName.new(NsVim25, "module")]],
      ["data", "VSphereCloud::KeyValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfExtensionResourceInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtensionResourceInfo"),
    :schema_element => [
      ["extensionResourceInfo", ["VSphereCloud::ExtensionResourceInfo[]", XSD::QName.new(NsVim25, "ExtensionResourceInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtensionHealthInfo,
    :schema_type => XSD::QName.new(NsVim25, "ExtensionHealthInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::Extension,
    :schema_type => XSD::QName.new(NsVim25, "Extension"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["description", "VSphereCloud::Description"],
      ["key", "SOAP::SOAPString"],
      ["company", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString"],
      ["subjectName", "SOAP::SOAPString", [0, 1]],
      ["server", "VSphereCloud::ExtensionServerInfo[]", [0, nil]],
      ["client", "VSphereCloud::ExtensionClientInfo[]", [0, nil]],
      ["taskList", "VSphereCloud::ExtensionTaskTypeInfo[]", [0, nil]],
      ["eventList", "VSphereCloud::ExtensionEventTypeInfo[]", [0, nil]],
      ["faultList", "VSphereCloud::ExtensionFaultTypeInfo[]", [0, nil]],
      ["privilegeList", "VSphereCloud::ExtensionPrivilegeInfo[]", [0, nil]],
      ["resourceList", "VSphereCloud::ExtensionResourceInfo[]", [0, nil]],
      ["lastHeartbeatTime", "SOAP::SOAPDateTime"],
      ["healthInfo", "VSphereCloud::ExtensionHealthInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfExtension,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtension"),
    :schema_element => [
      ["extension", ["VSphereCloud::Extension[]", XSD::QName.new(NsVim25, "Extension")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostServiceTicket,
    :schema_type => XSD::QName.new(NsVim25, "HostServiceTicket"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]],
      ["service", "SOAP::SOAPString"],
      ["serviceVersion", "SOAP::SOAPString"],
      ["sessionId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseDatastoreLeaseInfo,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseDatastoreLeaseInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["datastoreKey", "SOAP::SOAPString"],
      ["hosts", "VSphereCloud::HttpNfcLeaseHostInfo[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHttpNfcLeaseDatastoreLeaseInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHttpNfcLeaseDatastoreLeaseInfo"),
    :schema_element => [
      ["httpNfcLeaseDatastoreLeaseInfo", ["VSphereCloud::HttpNfcLeaseDatastoreLeaseInfo[]", XSD::QName.new(NsVim25, "HttpNfcLeaseDatastoreLeaseInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseHostInfo,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseHostInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"],
      ["sslThumbprint", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHttpNfcLeaseHostInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHttpNfcLeaseHostInfo"),
    :schema_element => [
      ["httpNfcLeaseHostInfo", ["VSphereCloud::HttpNfcLeaseHostInfo[]", XSD::QName.new(NsVim25, "HttpNfcLeaseHostInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseInfo,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["lease", "VSphereCloud::ManagedObjectReference"],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["deviceUrl", "VSphereCloud::HttpNfcLeaseDeviceUrl[]", [0, nil]],
      ["totalDiskCapacityInKB", "SOAP::SOAPLong"],
      ["leaseTimeout", "SOAP::SOAPInt"],
      ["hostMap", "VSphereCloud::HttpNfcLeaseDatastoreLeaseInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseDeviceUrl,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseDeviceUrl"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["importKey", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["sslThumbprint", "SOAP::SOAPString"],
      ["disk", "SOAP::SOAPBoolean", [0, 1]],
      ["targetId", "SOAP::SOAPString", [0, 1]],
      ["datastoreKey", "SOAP::SOAPString", [0, 1]],
      ["fileSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHttpNfcLeaseDeviceUrl,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHttpNfcLeaseDeviceUrl"),
    :schema_element => [
      ["httpNfcLeaseDeviceUrl", ["VSphereCloud::HttpNfcLeaseDeviceUrl[]", XSD::QName.new(NsVim25, "HttpNfcLeaseDeviceUrl")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseManifestEntry,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseManifestEntry"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["sha1", "SOAP::SOAPString"],
      ["size", "SOAP::SOAPLong"],
      ["disk", "SOAP::SOAPBoolean"],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["populatedSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHttpNfcLeaseManifestEntry,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHttpNfcLeaseManifestEntry"),
    :schema_element => [
      ["httpNfcLeaseManifestEntry", ["VSphereCloud::HttpNfcLeaseManifestEntry[]", XSD::QName.new(NsVim25, "HttpNfcLeaseManifestEntry")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ImportSpec,
    :schema_type => XSD::QName.new(NsVim25, "ImportSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entityConfig", "VSphereCloud::VAppEntityConfigInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfImportSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfImportSpec"),
    :schema_element => [
      ["importSpec", ["VSphereCloud::ImportSpec[]", XSD::QName.new(NsVim25, "ImportSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InheritablePolicy,
    :schema_type => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IntPolicy,
    :schema_type => XSD::QName.new(NsVim25, "IntPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::KeyValue,
    :schema_type => XSD::QName.new(NsVim25, "KeyValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfKeyValue,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfKeyValue"),
    :schema_element => [
      ["keyValue", ["VSphereCloud::KeyValue[]", XSD::QName.new(NsVim25, "KeyValue")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseAssignmentManagerLicenseAssignment,
    :schema_type => XSD::QName.new(NsVim25, "LicenseAssignmentManagerLicenseAssignment"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entityId", "SOAP::SOAPString"],
      ["scope", "SOAP::SOAPString", [0, 1]],
      ["entityDisplayName", "SOAP::SOAPString", [0, 1]],
      ["assignedLicense", "VSphereCloud::LicenseManagerLicenseInfo"],
      ["properties", "VSphereCloud::KeyAnyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfLicenseAssignmentManagerLicenseAssignment,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLicenseAssignmentManagerLicenseAssignment"),
    :schema_element => [
      ["licenseAssignmentManagerLicenseAssignment", ["VSphereCloud::LicenseAssignmentManagerLicenseAssignment[]", XSD::QName.new(NsVim25, "LicenseAssignmentManagerLicenseAssignment")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseSource,
    :schema_type => XSD::QName.new(NsVim25, "LicenseSource"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseServerSource,
    :schema_type => XSD::QName.new(NsVim25, "LicenseServerSource"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseSource"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LocalLicenseSource,
    :schema_type => XSD::QName.new(NsVim25, "LocalLicenseSource"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseSource"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["licenseKeys", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EvaluationLicenseSource,
    :schema_type => XSD::QName.new(NsVim25, "EvaluationLicenseSource"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseSource"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["remainingHours", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseFeatureInfo,
    :schema_type => XSD::QName.new(NsVim25, "LicenseFeatureInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["featureName", "SOAP::SOAPString"],
      ["featureDescription", "SOAP::SOAPString", [0, 1]],
      ["state", "VSphereCloud::LicenseFeatureInfoState", [0, 1]],
      ["costUnit", "SOAP::SOAPString"],
      ["sourceRestriction", "SOAP::SOAPString", [0, 1]],
      ["dependentKey", "SOAP::SOAPString[]", [0, nil]],
      ["edition", "SOAP::SOAPBoolean", [0, 1]],
      ["expiresOn", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfLicenseFeatureInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLicenseFeatureInfo"),
    :schema_element => [
      ["licenseFeatureInfo", ["VSphereCloud::LicenseFeatureInfo[]", XSD::QName.new(NsVim25, "LicenseFeatureInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseReservationInfo,
    :schema_type => XSD::QName.new(NsVim25, "LicenseReservationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["state", "VSphereCloud::LicenseReservationInfoState"],
      ["required", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfLicenseReservationInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLicenseReservationInfo"),
    :schema_element => [
      ["licenseReservationInfo", ["VSphereCloud::LicenseReservationInfo[]", XSD::QName.new(NsVim25, "LicenseReservationInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseAvailabilityInfo,
    :schema_type => XSD::QName.new(NsVim25, "LicenseAvailabilityInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["feature", "VSphereCloud::LicenseFeatureInfo"],
      ["total", "SOAP::SOAPInt"],
      ["available", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfLicenseAvailabilityInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLicenseAvailabilityInfo"),
    :schema_element => [
      ["licenseAvailabilityInfo", ["VSphereCloud::LicenseAvailabilityInfo[]", XSD::QName.new(NsVim25, "LicenseAvailabilityInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseDiagnostics,
    :schema_type => XSD::QName.new(NsVim25, "LicenseDiagnostics"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["sourceLastChanged", "SOAP::SOAPDateTime"],
      ["sourceLost", "SOAP::SOAPString"],
      ["sourceLatency", "SOAP::SOAPFloat"],
      ["licenseRequests", "SOAP::SOAPString"],
      ["licenseRequestFailures", "SOAP::SOAPString"],
      ["licenseFeatureUnknowns", "SOAP::SOAPString"],
      ["opState", "VSphereCloud::LicenseManagerState"],
      ["lastStatusUpdate", "SOAP::SOAPDateTime"],
      ["opFailureMessage", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseUsageInfo,
    :schema_type => XSD::QName.new(NsVim25, "LicenseUsageInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["source", "VSphereCloud::LicenseSource"],
      ["sourceAvailable", "SOAP::SOAPBoolean"],
      ["reservationInfo", "VSphereCloud::LicenseReservationInfo[]", [0, nil]],
      ["featureInfo", "VSphereCloud::LicenseFeatureInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseManagerEvaluationInfo,
    :schema_type => XSD::QName.new(NsVim25, "LicenseManagerEvaluationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["properties", "VSphereCloud::KeyAnyValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseManagerLicenseInfo,
    :schema_type => XSD::QName.new(NsVim25, "LicenseManagerLicenseInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["licenseKey", "SOAP::SOAPString"],
      ["editionKey", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["total", "SOAP::SOAPInt"],
      ["used", "SOAP::SOAPInt", [0, 1]],
      ["costUnit", "SOAP::SOAPString"],
      ["properties", "VSphereCloud::KeyAnyValue[]", [0, nil]],
      ["labels", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfLicenseManagerLicenseInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLicenseManagerLicenseInfo"),
    :schema_element => [
      ["licenseManagerLicenseInfo", ["VSphereCloud::LicenseManagerLicenseInfo[]", XSD::QName.new(NsVim25, "LicenseManagerLicenseInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LocalizationManagerMessageCatalog,
    :schema_type => XSD::QName.new(NsVim25, "LocalizationManagerMessageCatalog"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["moduleName", "SOAP::SOAPString"],
      ["catalogName", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString"],
      ["catalogUri", "SOAP::SOAPString"],
      ["lastModified", "SOAP::SOAPDateTime", [0, 1]],
      ["md5sum", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfLocalizationManagerMessageCatalog,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfLocalizationManagerMessageCatalog"),
    :schema_element => [
      ["localizationManagerMessageCatalog", ["VSphereCloud::LocalizationManagerMessageCatalog[]", XSD::QName.new(NsVim25, "LocalizationManagerMessageCatalog")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LongPolicy,
    :schema_type => XSD::QName.new(NsVim25, "LongPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MethodDescription,
    :schema_type => XSD::QName.new(NsVim25, "MethodDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "Description"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetworkSummary,
    :schema_type => XSD::QName.new(NsVim25, "NetworkSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["network", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["accessible", "SOAP::SOAPBoolean"],
      ["ipPoolName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NumericRange,
    :schema_type => XSD::QName.new(NsVim25, "NumericRange"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["start", "SOAP::SOAPInt"],
      ["v_end", ["SOAP::SOAPInt", XSD::QName.new(NsVim25, "end")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfNumericRange,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNumericRange"),
    :schema_element => [
      ["numericRange", ["VSphereCloud::NumericRange[]", XSD::QName.new(NsVim25, "NumericRange")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfDeploymentOption,
    :schema_type => XSD::QName.new(NsVim25, "OvfDeploymentOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfOvfDeploymentOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOvfDeploymentOption"),
    :schema_element => [
      ["ovfDeploymentOption", ["VSphereCloud::OvfDeploymentOption[]", XSD::QName.new(NsVim25, "OvfDeploymentOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfManagerCommonParams,
    :schema_type => XSD::QName.new(NsVim25, "OvfManagerCommonParams"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfValidateHostParams,
    :schema_type => XSD::QName.new(NsVim25, "OvfValidateHostParams"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfManagerCommonParams"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfValidateHostResult,
    :schema_type => XSD::QName.new(NsVim25, "OvfValidateHostResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["downloadSize", "SOAP::SOAPLong", [0, 1]],
      ["flatDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["sparseDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["warning", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["supportedDiskProvisioning", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfParseDescriptorParams,
    :schema_type => XSD::QName.new(NsVim25, "OvfParseDescriptorParams"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfManagerCommonParams"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfParseDescriptorResult,
    :schema_type => XSD::QName.new(NsVim25, "OvfParseDescriptorResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["network", "VSphereCloud::OvfNetworkInfo[]", [0, nil]],
      ["ipAllocationScheme", "SOAP::SOAPString[]", [0, nil]],
      ["ipProtocols", "SOAP::SOAPString[]", [0, nil]],
      ["property", "VSphereCloud::VAppPropertyInfo[]", [0, nil]],
      ["productInfo", "VSphereCloud::VAppProductInfo", [0, 1]],
      ["annotation", "SOAP::SOAPString"],
      ["approximateDownloadSize", "SOAP::SOAPLong", [0, 1]],
      ["approximateFlatDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["approximateSparseDeploymentSize", "SOAP::SOAPLong", [0, 1]],
      ["defaultEntityName", "SOAP::SOAPString"],
      ["virtualApp", "SOAP::SOAPBoolean"],
      ["deploymentOption", "VSphereCloud::OvfDeploymentOption[]", [0, nil]],
      ["defaultDeploymentOption", "SOAP::SOAPString"],
      ["entityName", "VSphereCloud::KeyValue[]", [0, nil]],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["warning", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfNetworkInfo,
    :schema_type => XSD::QName.new(NsVim25, "OvfNetworkInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfOvfNetworkInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOvfNetworkInfo"),
    :schema_element => [
      ["ovfNetworkInfo", ["VSphereCloud::OvfNetworkInfo[]", XSD::QName.new(NsVim25, "OvfNetworkInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfCreateImportSpecParams,
    :schema_type => XSD::QName.new(NsVim25, "OvfCreateImportSpecParams"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfManagerCommonParams"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["locale", "SOAP::SOAPString"],
      ["deploymentOption", "SOAP::SOAPString"],
      ["msgBundle", "VSphereCloud::KeyValue[]", [0, nil]],
      ["entityName", "SOAP::SOAPString"],
      ["hostSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["networkMapping", "VSphereCloud::OvfNetworkMapping[]", [0, nil]],
      ["ipAllocationPolicy", "SOAP::SOAPString", [0, 1]],
      ["ipProtocol", "SOAP::SOAPString", [0, 1]],
      ["propertyMapping", "VSphereCloud::KeyValue[]", [0, nil]],
      ["resourceMapping", "VSphereCloud::OvfResourceMap[]", [0, nil]],
      ["diskProvisioning", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfResourceMap,
    :schema_type => XSD::QName.new(NsVim25, "OvfResourceMap"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["source", "SOAP::SOAPString"],
      ["parent", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["resourceSpec", "VSphereCloud::ResourceConfigSpec", [0, 1]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfOvfResourceMap,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOvfResourceMap"),
    :schema_element => [
      ["ovfResourceMap", ["VSphereCloud::OvfResourceMap[]", XSD::QName.new(NsVim25, "OvfResourceMap")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfNetworkMapping,
    :schema_type => XSD::QName.new(NsVim25, "OvfNetworkMapping"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["network", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfOvfNetworkMapping,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOvfNetworkMapping"),
    :schema_element => [
      ["ovfNetworkMapping", ["VSphereCloud::OvfNetworkMapping[]", XSD::QName.new(NsVim25, "OvfNetworkMapping")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfCreateImportSpecResult,
    :schema_type => XSD::QName.new(NsVim25, "OvfCreateImportSpecResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["importSpec", "VSphereCloud::ImportSpec", [0, 1]],
      ["fileItem", "VSphereCloud::OvfFileItem[]", [0, nil]],
      ["warning", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfFileItem,
    :schema_type => XSD::QName.new(NsVim25, "OvfFileItem"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceId", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"],
      ["compressionMethod", "SOAP::SOAPString", [0, 1]],
      ["chunkSize", "SOAP::SOAPLong", [0, 1]],
      ["size", "SOAP::SOAPLong", [0, 1]],
      ["cimType", "SOAP::SOAPInt"],
      ["create", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfOvfFileItem,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOvfFileItem"),
    :schema_element => [
      ["ovfFileItem", ["VSphereCloud::OvfFileItem[]", XSD::QName.new(NsVim25, "OvfFileItem")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfCreateDescriptorParams,
    :schema_type => XSD::QName.new(NsVim25, "OvfCreateDescriptorParams"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ovfFiles", "VSphereCloud::OvfFile[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["includeImageFiles", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfCreateDescriptorResult,
    :schema_type => XSD::QName.new(NsVim25, "OvfCreateDescriptorResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["warning", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["includeImageFiles", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfFile,
    :schema_type => XSD::QName.new(NsVim25, "OvfFile"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceId", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"],
      ["compressionMethod", "SOAP::SOAPString", [0, 1]],
      ["chunkSize", "SOAP::SOAPLong", [0, 1]],
      ["size", "SOAP::SOAPLong"],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["populatedSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfOvfFile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOvfFile"),
    :schema_element => [
      ["ovfFile", ["VSphereCloud::OvfFile[]", XSD::QName.new(NsVim25, "OvfFile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PasswordField,
    :schema_type => XSD::QName.new(NsVim25, "PasswordField"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerformanceDescription,
    :schema_type => XSD::QName.new(NsVim25, "PerformanceDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["counterType", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["statsType", "VSphereCloud::ElementDescription[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfProviderSummary,
    :schema_type => XSD::QName.new(NsVim25, "PerfProviderSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["currentSupported", "SOAP::SOAPBoolean"],
      ["summarySupported", "SOAP::SOAPBoolean"],
      ["refreshRate", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfCounterInfo,
    :schema_type => XSD::QName.new(NsVim25, "PerfCounterInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["nameInfo", "VSphereCloud::ElementDescription"],
      ["groupInfo", "VSphereCloud::ElementDescription"],
      ["unitInfo", "VSphereCloud::ElementDescription"],
      ["rollupType", "VSphereCloud::PerfSummaryType"],
      ["statsType", "VSphereCloud::PerfStatsType"],
      ["level", "SOAP::SOAPInt", [0, 1]],
      ["perDeviceLevel", "SOAP::SOAPInt", [0, 1]],
      ["associatedCounterId", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPerfCounterInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfCounterInfo"),
    :schema_element => [
      ["perfCounterInfo", ["VSphereCloud::PerfCounterInfo[]", XSD::QName.new(NsVim25, "PerfCounterInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfMetricId,
    :schema_type => XSD::QName.new(NsVim25, "PerfMetricId"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["counterId", "SOAP::SOAPInt"],
      ["instance", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPerfMetricId,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfMetricId"),
    :schema_element => [
      ["perfMetricId", ["VSphereCloud::PerfMetricId[]", XSD::QName.new(NsVim25, "PerfMetricId")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfQuerySpec,
    :schema_type => XSD::QName.new(NsVim25, "PerfQuerySpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["startTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]],
      ["maxSample", "SOAP::SOAPInt", [0, 1]],
      ["metricId", "VSphereCloud::PerfMetricId[]", [0, nil]],
      ["intervalId", "SOAP::SOAPInt", [0, 1]],
      ["format", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPerfQuerySpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfQuerySpec"),
    :schema_element => [
      ["perfQuerySpec", ["VSphereCloud::PerfQuerySpec[]", XSD::QName.new(NsVim25, "PerfQuerySpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfSampleInfo,
    :schema_type => XSD::QName.new(NsVim25, "PerfSampleInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["timestamp", "SOAP::SOAPDateTime"],
      ["interval", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPerfSampleInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfSampleInfo"),
    :schema_element => [
      ["perfSampleInfo", ["VSphereCloud::PerfSampleInfo[]", XSD::QName.new(NsVim25, "PerfSampleInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfMetricSeries,
    :schema_type => XSD::QName.new(NsVim25, "PerfMetricSeries"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::PerfMetricId"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPerfMetricSeries,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfMetricSeries"),
    :schema_element => [
      ["perfMetricSeries", ["VSphereCloud::PerfMetricSeries[]", XSD::QName.new(NsVim25, "PerfMetricSeries")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfMetricIntSeries,
    :schema_type => XSD::QName.new(NsVim25, "PerfMetricIntSeries"),
    :schema_basetype => XSD::QName.new(NsVim25, "PerfMetricSeries"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::PerfMetricId"],
      ["value", "SOAP::SOAPLong[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfMetricSeriesCSV,
    :schema_type => XSD::QName.new(NsVim25, "PerfMetricSeriesCSV"),
    :schema_basetype => XSD::QName.new(NsVim25, "PerfMetricSeries"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::PerfMetricId"],
      ["value", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPerfMetricSeriesCSV,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfMetricSeriesCSV"),
    :schema_element => [
      ["perfMetricSeriesCSV", ["VSphereCloud::PerfMetricSeriesCSV[]", XSD::QName.new(NsVim25, "PerfMetricSeriesCSV")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfEntityMetricBase,
    :schema_type => XSD::QName.new(NsVim25, "PerfEntityMetricBase"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPerfEntityMetricBase,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfEntityMetricBase"),
    :schema_element => [
      ["perfEntityMetricBase", ["VSphereCloud::PerfEntityMetricBase[]", XSD::QName.new(NsVim25, "PerfEntityMetricBase")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfEntityMetric,
    :schema_type => XSD::QName.new(NsVim25, "PerfEntityMetric"),
    :schema_basetype => XSD::QName.new(NsVim25, "PerfEntityMetricBase"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["sampleInfo", "VSphereCloud::PerfSampleInfo[]", [0, nil]],
      ["value", "VSphereCloud::PerfMetricSeries[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfEntityMetricCSV,
    :schema_type => XSD::QName.new(NsVim25, "PerfEntityMetricCSV"),
    :schema_basetype => XSD::QName.new(NsVim25, "PerfEntityMetricBase"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["sampleInfoCSV", "SOAP::SOAPString"],
      ["value", "VSphereCloud::PerfMetricSeriesCSV[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfCompositeMetric,
    :schema_type => XSD::QName.new(NsVim25, "PerfCompositeMetric"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::PerfEntityMetricBase", [0, 1]],
      ["childEntity", "VSphereCloud::PerfEntityMetricBase[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfInterval,
    :schema_type => XSD::QName.new(NsVim25, "PerfInterval"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["samplingPeriod", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["length", "SOAP::SOAPInt"],
      ["level", "SOAP::SOAPInt", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPerfInterval,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPerfInterval"),
    :schema_element => [
      ["perfInterval", ["VSphereCloud::PerfInterval[]", XSD::QName.new(NsVim25, "PerfInterval")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PosixUserSearchResult,
    :schema_type => XSD::QName.new(NsVim25, "PosixUserSearchResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "UserSearchResult"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString", [0, 1]],
      ["group", "SOAP::SOAPBoolean"],
      ["id", "SOAP::SOAPInt"],
      ["shellAccess", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PrivilegePolicyDef,
    :schema_type => XSD::QName.new(NsVim25, "PrivilegePolicyDef"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["createPrivilege", "SOAP::SOAPString"],
      ["readPrivilege", "SOAP::SOAPString"],
      ["updatePrivilege", "SOAP::SOAPString"],
      ["deletePrivilege", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourceAllocationInfo,
    :schema_type => XSD::QName.new(NsVim25, "ResourceAllocationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["reservation", "SOAP::SOAPLong", [0, 1]],
      ["expandableReservation", "SOAP::SOAPBoolean", [0, 1]],
      ["limit", "SOAP::SOAPLong", [0, 1]],
      ["shares", "VSphereCloud::SharesInfo", [0, 1]],
      ["overheadLimit", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourceAllocationOption,
    :schema_type => XSD::QName.new(NsVim25, "ResourceAllocationOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["sharesOption", "VSphereCloud::SharesOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourceConfigOption,
    :schema_type => XSD::QName.new(NsVim25, "ResourceConfigOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["cpuAllocationOption", "VSphereCloud::ResourceAllocationOption"],
      ["memoryAllocationOption", "VSphereCloud::ResourceAllocationOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourceConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ResourceConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["changeVersion", "SOAP::SOAPString", [0, 1]],
      ["lastModified", "SOAP::SOAPDateTime", [0, 1]],
      ["cpuAllocation", "VSphereCloud::ResourceAllocationInfo"],
      ["memoryAllocation", "VSphereCloud::ResourceAllocationInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfResourceConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfResourceConfigSpec"),
    :schema_element => [
      ["resourceConfigSpec", ["VSphereCloud::ResourceConfigSpec[]", XSD::QName.new(NsVim25, "ResourceConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatabaseSizeParam,
    :schema_type => XSD::QName.new(NsVim25, "DatabaseSizeParam"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inventoryDesc", "VSphereCloud::InventoryDescription"],
      ["perfStatsDesc", "VSphereCloud::PerformanceStatisticsDescription", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InventoryDescription,
    :schema_type => XSD::QName.new(NsVim25, "InventoryDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["numHosts", "SOAP::SOAPInt"],
      ["numVirtualMachines", "SOAP::SOAPInt"],
      ["numResourcePools", "SOAP::SOAPInt", [0, 1]],
      ["numClusters", "SOAP::SOAPInt", [0, 1]],
      ["numCpuDev", "SOAP::SOAPInt", [0, 1]],
      ["numNetDev", "SOAP::SOAPInt", [0, 1]],
      ["numDiskDev", "SOAP::SOAPInt", [0, 1]],
      ["numvCpuDev", "SOAP::SOAPInt", [0, 1]],
      ["numvNetDev", "SOAP::SOAPInt", [0, 1]],
      ["numvDiskDev", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerformanceStatisticsDescription,
    :schema_type => XSD::QName.new(NsVim25, "PerformanceStatisticsDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["intervals", "VSphereCloud::PerfInterval[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatabaseSizeEstimate,
    :schema_type => XSD::QName.new(NsVim25, "DatabaseSizeEstimate"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["size", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourcePoolResourceUsage,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolResourceUsage"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["reservationUsed", "SOAP::SOAPLong"],
      ["reservationUsedForVm", "SOAP::SOAPLong"],
      ["unreservedForPool", "SOAP::SOAPLong"],
      ["unreservedForVm", "SOAP::SOAPLong"],
      ["overallUsage", "SOAP::SOAPLong"],
      ["maxUsage", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourcePoolRuntimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolRuntimeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["memory", "VSphereCloud::ResourcePoolResourceUsage"],
      ["cpu", "VSphereCloud::ResourcePoolResourceUsage"],
      ["overallStatus", "VSphereCloud::ManagedEntityStatus"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourcePoolQuickStats,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolQuickStats"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["overallCpuUsage", "SOAP::SOAPLong", [0, 1]],
      ["overallCpuDemand", "SOAP::SOAPLong", [0, 1]],
      ["guestMemoryUsage", "SOAP::SOAPLong", [0, 1]],
      ["hostMemoryUsage", "SOAP::SOAPLong", [0, 1]],
      ["distributedCpuEntitlement", "SOAP::SOAPLong", [0, 1]],
      ["distributedMemoryEntitlement", "SOAP::SOAPLong", [0, 1]],
      ["staticCpuEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["staticMemoryEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["privateMemory", "SOAP::SOAPLong", [0, 1]],
      ["sharedMemory", "SOAP::SOAPLong", [0, 1]],
      ["swappedMemory", "SOAP::SOAPLong", [0, 1]],
      ["balloonedMemory", "SOAP::SOAPLong", [0, 1]],
      ["overheadMemory", "SOAP::SOAPLong", [0, 1]],
      ["consumedOverheadMemory", "SOAP::SOAPLong", [0, 1]],
      ["compressedMemory", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourcePoolSummary,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["config", "VSphereCloud::ResourceConfigSpec"],
      ["runtime", "VSphereCloud::ResourcePoolRuntimeInfo"],
      ["quickStats", "VSphereCloud::ResourcePoolQuickStats", [0, 1]],
      ["configuredMemoryMB", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVMotionCompatibility,
    :schema_type => XSD::QName.new(NsVim25, "HostVMotionCompatibility"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["compatibility", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostVMotionCompatibility,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostVMotionCompatibility"),
    :schema_element => [
      ["hostVMotionCompatibility", ["VSphereCloud::HostVMotionCompatibility[]", XSD::QName.new(NsVim25, "HostVMotionCompatibility")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProductComponentInfo,
    :schema_type => XSD::QName.new(NsVim25, "ProductComponentInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["release", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfProductComponentInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProductComponentInfo"),
    :schema_element => [
      ["productComponentInfo", ["VSphereCloud::ProductComponentInfo[]", XSD::QName.new(NsVim25, "ProductComponentInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ServiceContent,
    :schema_type => XSD::QName.new(NsVim25, "ServiceContent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["rootFolder", "VSphereCloud::ManagedObjectReference"],
      ["propertyCollector", "VSphereCloud::ManagedObjectReference"],
      ["viewManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["about", "VSphereCloud::AboutInfo"],
      ["setting", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["userDirectory", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["sessionManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["authorizationManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["perfManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["scheduledTaskManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["alarmManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["eventManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["taskManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["extensionManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["customizationSpecManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["customFieldsManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["accountManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["diagnosticManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["licenseManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["searchIndex", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["fileManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["virtualDiskManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["virtualizationManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["snmpSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["vmProvisioningChecker", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["vmCompatibilityChecker", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["ovfManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["ipPoolManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["dvSwitchManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["hostProfileManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["clusterProfileManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["complianceManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["localizationManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["storageResourceManager", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SessionManagerLocalTicket,
    :schema_type => XSD::QName.new(NsVim25, "SessionManagerLocalTicket"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["userName", "SOAP::SOAPString"],
      ["passwordFilePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UserSession,
    :schema_type => XSD::QName.new(NsVim25, "UserSession"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString"],
      ["loginTime", "SOAP::SOAPDateTime"],
      ["lastActiveTime", "SOAP::SOAPDateTime"],
      ["locale", "SOAP::SOAPString"],
      ["messageLocale", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfUserSession,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfUserSession"),
    :schema_element => [
      ["userSession", ["VSphereCloud::UserSession[]", XSD::QName.new(NsVim25, "UserSession")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SharesInfo,
    :schema_type => XSD::QName.new(NsVim25, "SharesInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["shares", "SOAP::SOAPInt"],
      ["level", "VSphereCloud::SharesLevel"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SharesOption,
    :schema_type => XSD::QName.new(NsVim25, "SharesOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["sharesOption", "VSphereCloud::IntOption"],
      ["defaultLevel", "VSphereCloud::SharesLevel"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StorageIOAllocationInfo,
    :schema_type => XSD::QName.new(NsVim25, "StorageIOAllocationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["limit", "SOAP::SOAPLong", [0, 1]],
      ["shares", "VSphereCloud::SharesInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StorageIOAllocationOption,
    :schema_type => XSD::QName.new(NsVim25, "StorageIOAllocationOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["limitOption", "VSphereCloud::LongOption"],
      ["sharesOption", "VSphereCloud::SharesOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StorageIORMInfo,
    :schema_type => XSD::QName.new(NsVim25, "StorageIORMInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["congestionThreshold", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StorageIORMConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "StorageIORMConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["congestionThreshold", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StorageIORMConfigOption,
    :schema_type => XSD::QName.new(NsVim25, "StorageIORMConfigOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabledOption", "VSphereCloud::BoolOption"],
      ["congestionThresholdOption", "VSphereCloud::IntOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StringPolicy,
    :schema_type => XSD::QName.new(NsVim25, "StringPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["value", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::Tag,
    :schema_type => XSD::QName.new(NsVim25, "Tag"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfTag,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfTag"),
    :schema_element => [
      ["tag", ["VSphereCloud::Tag[]", XSD::QName.new(NsVim25, "Tag")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskDescription,
    :schema_type => XSD::QName.new(NsVim25, "TaskDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["methodInfo", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["state", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["reason", "VSphereCloud::TypeDescription[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskFilterSpecByEntity,
    :schema_type => XSD::QName.new(NsVim25, "TaskFilterSpecByEntity"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["recursion", "VSphereCloud::TaskFilterSpecRecursionOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskFilterSpecByTime,
    :schema_type => XSD::QName.new(NsVim25, "TaskFilterSpecByTime"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["timeType", "VSphereCloud::TaskFilterSpecTimeOption"],
      ["beginTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskFilterSpecByUsername,
    :schema_type => XSD::QName.new(NsVim25, "TaskFilterSpecByUsername"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["systemUser", "SOAP::SOAPBoolean"],
      ["userList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskFilterSpec,
    :schema_type => XSD::QName.new(NsVim25, "TaskFilterSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::TaskFilterSpecByEntity", [0, 1]],
      ["time", "VSphereCloud::TaskFilterSpecByTime", [0, 1]],
      ["userName", "VSphereCloud::TaskFilterSpecByUsername", [0, 1]],
      ["state", "VSphereCloud::TaskInfoState[]", [0, nil]],
      ["alarm", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["scheduledTask", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["eventChainId", "SOAP::SOAPInt[]", [0, nil]],
      ["tag", "SOAP::SOAPString[]", [0, nil]],
      ["parentTaskKey", "SOAP::SOAPString[]", [0, nil]],
      ["rootTaskKey", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfTaskInfoState,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfTaskInfoState"),
    :schema_element => [
      ["taskInfoState", ["VSphereCloud::TaskInfoState[]", XSD::QName.new(NsVim25, "TaskInfoState")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskInfo,
    :schema_type => XSD::QName.new(NsVim25, "TaskInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["task", "VSphereCloud::ManagedObjectReference"],
      ["description", "VSphereCloud::LocalizableMessage", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["descriptionId", "SOAP::SOAPString"],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["locked", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["state", "VSphereCloud::TaskInfoState"],
      ["cancelled", "SOAP::SOAPBoolean"],
      ["cancelable", "SOAP::SOAPBoolean"],
      ["error", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["result", nil, [0, 1]],
      ["progress", "SOAP::SOAPInt", [0, 1]],
      ["reason", "VSphereCloud::TaskReason"],
      ["queueTime", "SOAP::SOAPDateTime"],
      ["startTime", "SOAP::SOAPDateTime", [0, 1]],
      ["completeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["eventChainId", "SOAP::SOAPInt"],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parentTaskKey", "SOAP::SOAPString", [0, 1]],
      ["rootTaskKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfTaskInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfTaskInfo"),
    :schema_element => [
      ["taskInfo", ["VSphereCloud::TaskInfo[]", XSD::QName.new(NsVim25, "TaskInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskReason,
    :schema_type => XSD::QName.new(NsVim25, "TaskReason"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskReasonSystem,
    :schema_type => XSD::QName.new(NsVim25, "TaskReasonSystem"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskReason"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskReasonUser,
    :schema_type => XSD::QName.new(NsVim25, "TaskReasonUser"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskReason"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskReasonAlarm,
    :schema_type => XSD::QName.new(NsVim25, "TaskReasonAlarm"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskReason"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["alarmName", "SOAP::SOAPString"],
      ["alarm", "VSphereCloud::ManagedObjectReference"],
      ["entityName", "SOAP::SOAPString"],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskReasonSchedule,
    :schema_type => XSD::QName.new(NsVim25, "TaskReasonSchedule"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskReason"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["scheduledTask", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TypeDescription,
    :schema_type => XSD::QName.new(NsVim25, "TypeDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "Description"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfTypeDescription,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfTypeDescription"),
    :schema_element => [
      ["typeDescription", ["VSphereCloud::TypeDescription[]", XSD::QName.new(NsVim25, "TypeDescription")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateVirtualMachineFilesResultFailedVmFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "UpdateVirtualMachineFilesResultFailedVmFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmFile", "SOAP::SOAPString"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfUpdateVirtualMachineFilesResultFailedVmFileInfo"),
    :schema_element => [
      ["updateVirtualMachineFilesResultFailedVmFileInfo", ["VSphereCloud::UpdateVirtualMachineFilesResultFailedVmFileInfo[]", XSD::QName.new(NsVim25, "UpdateVirtualMachineFilesResultFailedVmFileInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateVirtualMachineFilesResult,
    :schema_type => XSD::QName.new(NsVim25, "UpdateVirtualMachineFilesResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["failedVmFile", "VSphereCloud::UpdateVirtualMachineFilesResultFailedVmFileInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UserSearchResult,
    :schema_type => XSD::QName.new(NsVim25, "UserSearchResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString", [0, 1]],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfUserSearchResult,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfUserSearchResult"),
    :schema_element => [
      ["userSearchResult", ["VSphereCloud::UserSearchResult[]", XSD::QName.new(NsVim25, "UserSearchResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualAppSummary,
    :schema_type => XSD::QName.new(NsVim25, "VirtualAppSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "ResourcePoolSummary"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["config", "VSphereCloud::ResourceConfigSpec"],
      ["runtime", "VSphereCloud::ResourcePoolRuntimeInfo"],
      ["quickStats", "VSphereCloud::ResourcePoolQuickStats", [0, 1]],
      ["configuredMemoryMB", "SOAP::SOAPInt", [0, 1]],
      ["product", "VSphereCloud::VAppProductInfo", [0, 1]],
      ["vAppState", "VSphereCloud::VirtualAppVAppState", [0, 1]],
      ["suspended", "SOAP::SOAPBoolean", [0, 1]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualAppLinkInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualAppLinkInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["destroyWithParent", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualAppLinkInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualAppLinkInfo"),
    :schema_element => [
      ["virtualAppLinkInfo", ["VSphereCloud::VirtualAppLinkInfo[]", XSD::QName.new(NsVim25, "VirtualAppLinkInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString"],
      ["adapterType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileBackedVirtualDiskSpec,
    :schema_type => XSD::QName.new(NsVim25, "FileBackedVirtualDiskSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDiskSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString"],
      ["adapterType", "SOAP::SOAPString"],
      ["capacityKb", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceBackedVirtualDiskSpec,
    :schema_type => XSD::QName.new(NsVim25, "DeviceBackedVirtualDiskSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDiskSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString"],
      ["adapterType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineTicket,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineTicket"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ticket", "SOAP::SOAPString"],
      ["cfgFile", "SOAP::SOAPString"],
      ["host", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineMksTicket,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineMksTicket"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ticket", "SOAP::SOAPString"],
      ["cfgFile", "SOAP::SOAPString"],
      ["host", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineDisplayTopology,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDisplayTopology"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["x", "SOAP::SOAPInt"],
      ["y", "SOAP::SOAPInt"],
      ["width", "SOAP::SOAPInt"],
      ["height", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineDisplayTopology,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineDisplayTopology"),
    :schema_element => [
      ["virtualMachineDisplayTopology", ["VSphereCloud::VirtualMachineDisplayTopology[]", XSD::QName.new(NsVim25, "VirtualMachineDisplayTopology")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DiskChangeExtent,
    :schema_type => XSD::QName.new(NsVim25, "DiskChangeExtent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["start", "SOAP::SOAPLong"],
      ["length", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDiskChangeExtent,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDiskChangeExtent"),
    :schema_element => [
      ["diskChangeExtent", ["VSphereCloud::DiskChangeExtent[]", XSD::QName.new(NsVim25, "DiskChangeExtent")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DiskChangeInfo,
    :schema_type => XSD::QName.new(NsVim25, "DiskChangeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["startOffset", "SOAP::SOAPLong"],
      ["length", "SOAP::SOAPLong"],
      ["changedArea", "VSphereCloud::DiskChangeExtent[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::Action,
    :schema_type => XSD::QName.new(NsVim25, "Action"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MethodActionArgument,
    :schema_type => XSD::QName.new(NsVim25, "MethodActionArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["value", nil, [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfMethodActionArgument,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfMethodActionArgument"),
    :schema_element => [
      ["methodActionArgument", ["VSphereCloud::MethodActionArgument[]", XSD::QName.new(NsVim25, "MethodActionArgument")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MethodAction,
    :schema_type => XSD::QName.new(NsVim25, "MethodAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "Action"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["argument", "VSphereCloud::MethodActionArgument[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SendEmailAction,
    :schema_type => XSD::QName.new(NsVim25, "SendEmailAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "Action"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["toList", "SOAP::SOAPString"],
      ["ccList", "SOAP::SOAPString"],
      ["subject", "SOAP::SOAPString"],
      ["body", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SendSNMPAction,
    :schema_type => XSD::QName.new(NsVim25, "SendSNMPAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "Action"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RunScriptAction,
    :schema_type => XSD::QName.new(NsVim25, "RunScriptAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "Action"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["script", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateTaskAction,
    :schema_type => XSD::QName.new(NsVim25, "CreateTaskAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "Action"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["taskTypeId", "SOAP::SOAPString"],
      ["cancelable", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmAction,
    :schema_type => XSD::QName.new(NsVim25, "AlarmAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfAlarmAction,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAlarmAction"),
    :schema_element => [
      ["alarmAction", ["VSphereCloud::AlarmAction[]", XSD::QName.new(NsVim25, "AlarmAction")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmTriggeringActionTransitionSpec,
    :schema_type => XSD::QName.new(NsVim25, "AlarmTriggeringActionTransitionSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["startState", "VSphereCloud::ManagedEntityStatus"],
      ["finalState", "VSphereCloud::ManagedEntityStatus"],
      ["repeats", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfAlarmTriggeringActionTransitionSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAlarmTriggeringActionTransitionSpec"),
    :schema_element => [
      ["alarmTriggeringActionTransitionSpec", ["VSphereCloud::AlarmTriggeringActionTransitionSpec[]", XSD::QName.new(NsVim25, "AlarmTriggeringActionTransitionSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmTriggeringAction,
    :schema_type => XSD::QName.new(NsVim25, "AlarmTriggeringAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmAction"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["action", "VSphereCloud::Action"],
      ["transitionSpecs", "VSphereCloud::AlarmTriggeringActionTransitionSpec[]", [0, nil]],
      ["green2yellow", "SOAP::SOAPBoolean"],
      ["yellow2red", "SOAP::SOAPBoolean"],
      ["red2yellow", "SOAP::SOAPBoolean"],
      ["yellow2green", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GroupAlarmAction,
    :schema_type => XSD::QName.new(NsVim25, "GroupAlarmAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmAction"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["action", "VSphereCloud::AlarmAction[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmDescription,
    :schema_type => XSD::QName.new(NsVim25, "AlarmDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["expr", "VSphereCloud::TypeDescription[]", [1, nil]],
      ["stateOperator", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["metricOperator", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["hostSystemConnectionState", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["virtualMachinePowerState", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["datastoreConnectionState", "VSphereCloud::ElementDescription[]", [0, nil]],
      ["hostSystemPowerState", "VSphereCloud::ElementDescription[]", [0, nil]],
      ["virtualMachineGuestHeartbeatStatus", "VSphereCloud::ElementDescription[]", [0, nil]],
      ["entityStatus", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["action", "VSphereCloud::TypeDescription[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmExpression,
    :schema_type => XSD::QName.new(NsVim25, "AlarmExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfAlarmExpression,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAlarmExpression"),
    :schema_element => [
      ["alarmExpression", ["VSphereCloud::AlarmExpression[]", XSD::QName.new(NsVim25, "AlarmExpression")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AndAlarmExpression,
    :schema_type => XSD::QName.new(NsVim25, "AndAlarmExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmExpression"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["expression", "VSphereCloud::AlarmExpression[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OrAlarmExpression,
    :schema_type => XSD::QName.new(NsVim25, "OrAlarmExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmExpression"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["expression", "VSphereCloud::AlarmExpression[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StateAlarmExpression,
    :schema_type => XSD::QName.new(NsVim25, "StateAlarmExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmExpression"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operator", "VSphereCloud::StateAlarmOperator"],
      ["type", "SOAP::SOAPString"],
      ["statePath", "SOAP::SOAPString"],
      ["yellow", "SOAP::SOAPString", [0, 1]],
      ["red", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EventAlarmExpressionComparison,
    :schema_type => XSD::QName.new(NsVim25, "EventAlarmExpressionComparison"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["attributeName", "SOAP::SOAPString"],
      ["operator", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfEventAlarmExpressionComparison,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfEventAlarmExpressionComparison"),
    :schema_element => [
      ["eventAlarmExpressionComparison", ["VSphereCloud::EventAlarmExpressionComparison[]", XSD::QName.new(NsVim25, "EventAlarmExpressionComparison")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EventAlarmExpression,
    :schema_type => XSD::QName.new(NsVim25, "EventAlarmExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmExpression"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["comparisons", "VSphereCloud::EventAlarmExpressionComparison[]", [0, nil]],
      ["eventType", "SOAP::SOAPString"],
      ["eventTypeId", "SOAP::SOAPString", [0, 1]],
      ["objectType", "SOAP::SOAPString", [0, 1]],
      ["status", "VSphereCloud::ManagedEntityStatus", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MetricAlarmExpression,
    :schema_type => XSD::QName.new(NsVim25, "MetricAlarmExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmExpression"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operator", "VSphereCloud::MetricAlarmOperator"],
      ["type", "SOAP::SOAPString"],
      ["metric", "VSphereCloud::PerfMetricId"],
      ["yellow", "SOAP::SOAPInt", [0, 1]],
      ["yellowInterval", "SOAP::SOAPInt", [0, 1]],
      ["red", "SOAP::SOAPInt", [0, 1]],
      ["redInterval", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmInfo,
    :schema_type => XSD::QName.new(NsVim25, "AlarmInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["expression", "VSphereCloud::AlarmExpression"],
      ["action", "VSphereCloud::AlarmAction", [0, 1]],
      ["actionFrequency", "SOAP::SOAPInt", [0, 1]],
      ["setting", "VSphereCloud::AlarmSetting", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["alarm", "VSphereCloud::ManagedObjectReference"],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["lastModifiedTime", "SOAP::SOAPDateTime"],
      ["lastModifiedUser", "SOAP::SOAPString"],
      ["creationEventId", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmSetting,
    :schema_type => XSD::QName.new(NsVim25, "AlarmSetting"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["toleranceRange", "SOAP::SOAPInt"],
      ["reportingFrequency", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmSpec,
    :schema_type => XSD::QName.new(NsVim25, "AlarmSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["expression", "VSphereCloud::AlarmExpression"],
      ["action", "VSphereCloud::AlarmAction", [0, 1]],
      ["actionFrequency", "SOAP::SOAPInt", [0, 1]],
      ["setting", "VSphereCloud::AlarmSetting", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmState,
    :schema_type => XSD::QName.new(NsVim25, "AlarmState"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["alarm", "VSphereCloud::ManagedObjectReference"],
      ["overallStatus", "VSphereCloud::ManagedEntityStatus"],
      ["time", "SOAP::SOAPDateTime"],
      ["acknowledged", "SOAP::SOAPBoolean", [0, 1]],
      ["acknowledgedByUser", "SOAP::SOAPString", [0, 1]],
      ["acknowledgedTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfAlarmState,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAlarmState"),
    :schema_element => [
      ["alarmState", ["VSphereCloud::AlarmState[]", XSD::QName.new(NsVim25, "AlarmState")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterAction,
    :schema_type => XSD::QName.new(NsVim25, "ClusterAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterAction,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterAction"),
    :schema_element => [
      ["clusterAction", ["VSphereCloud::ClusterAction[]", XSD::QName.new(NsVim25, "ClusterAction")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterActionHistory,
    :schema_type => XSD::QName.new(NsVim25, "ClusterActionHistory"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["action", "VSphereCloud::ClusterAction"],
      ["time", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterActionHistory,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterActionHistory"),
    :schema_element => [
      ["clusterActionHistory", ["VSphereCloud::ClusterActionHistory[]", XSD::QName.new(NsVim25, "ClusterActionHistory")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterAffinityRuleSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterAffinityRuleSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterRuleInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "VSphereCloud::ManagedEntityStatus", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterAntiAffinityRuleSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterAntiAffinityRuleSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterRuleInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "VSphereCloud::ManagedEntityStatus", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterAttemptedVmInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterAttemptedVmInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["task", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterAttemptedVmInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterAttemptedVmInfo"),
    :schema_element => [
      ["clusterAttemptedVmInfo", ["VSphereCloud::ClusterAttemptedVmInfo[]", XSD::QName.new(NsVim25, "ClusterAttemptedVmInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dasConfig", "VSphereCloud::ClusterDasConfigInfo"],
      ["dasVmConfig", "VSphereCloud::ClusterDasVmConfigInfo[]", [0, nil]],
      ["drsConfig", "VSphereCloud::ClusterDrsConfigInfo"],
      ["drsVmConfig", "VSphereCloud::ClusterDrsVmConfigInfo[]", [0, nil]],
      ["rule", "VSphereCloud::ClusterRuleInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDrsConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDrsConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["enableVmBehaviorOverrides", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultVmBehavior", "VSphereCloud::DrsBehavior", [0, 1]],
      ["vmotionRate", "SOAP::SOAPInt", [0, 1]],
      ["option", "VSphereCloud::OptionValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDrsVmConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDrsVmConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["behavior", "VSphereCloud::DrsBehavior", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDrsVmConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDrsVmConfigInfo"),
    :schema_element => [
      ["clusterDrsVmConfigInfo", ["VSphereCloud::ClusterDrsVmConfigInfo[]", XSD::QName.new(NsVim25, "ClusterDrsVmConfigInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterConfigInfoEx,
    :schema_type => XSD::QName.new(NsVim25, "ClusterConfigInfoEx"),
    :schema_basetype => XSD::QName.new(NsVim25, "ComputeResourceConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString"],
      ["dasConfig", "VSphereCloud::ClusterDasConfigInfo"],
      ["dasVmConfig", "VSphereCloud::ClusterDasVmConfigInfo[]", [0, nil]],
      ["drsConfig", "VSphereCloud::ClusterDrsConfigInfo"],
      ["drsVmConfig", "VSphereCloud::ClusterDrsVmConfigInfo[]", [0, nil]],
      ["rule", "VSphereCloud::ClusterRuleInfo[]", [0, nil]],
      ["dpmConfigInfo", "VSphereCloud::ClusterDpmConfigInfo", [0, 1]],
      ["dpmHostConfig", "VSphereCloud::ClusterDpmHostConfigInfo[]", [0, nil]],
      ["group", "VSphereCloud::ClusterGroupInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDpmConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDpmConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultDpmBehavior", "VSphereCloud::DpmBehavior", [0, 1]],
      ["hostPowerActionRate", "SOAP::SOAPInt", [0, 1]],
      ["option", "VSphereCloud::OptionValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDpmHostConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDpmHostConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["behavior", "VSphereCloud::DpmBehavior", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDpmHostConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDpmHostConfigInfo"),
    :schema_element => [
      ["clusterDpmHostConfigInfo", ["VSphereCloud::ClusterDpmHostConfigInfo[]", XSD::QName.new(NsVim25, "ClusterDpmHostConfigInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dasConfig", "VSphereCloud::ClusterDasConfigInfo", [0, 1]],
      ["dasVmConfigSpec", "VSphereCloud::ClusterDasVmConfigSpec[]", [0, nil]],
      ["drsConfig", "VSphereCloud::ClusterDrsConfigInfo", [0, 1]],
      ["drsVmConfigSpec", "VSphereCloud::ClusterDrsVmConfigSpec[]", [0, nil]],
      ["rulesSpec", "VSphereCloud::ClusterRuleSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasVmConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasVmConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::ClusterDasVmConfigInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDasVmConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDasVmConfigSpec"),
    :schema_element => [
      ["clusterDasVmConfigSpec", ["VSphereCloud::ClusterDasVmConfigSpec[]", XSD::QName.new(NsVim25, "ClusterDasVmConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDrsVmConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDrsVmConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::ClusterDrsVmConfigInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDrsVmConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDrsVmConfigSpec"),
    :schema_element => [
      ["clusterDrsVmConfigSpec", ["VSphereCloud::ClusterDrsVmConfigSpec[]", XSD::QName.new(NsVim25, "ClusterDrsVmConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterRuleSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterRuleSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::ClusterRuleInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterRuleSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterRuleSpec"),
    :schema_element => [
      ["clusterRuleSpec", ["VSphereCloud::ClusterRuleSpec[]", XSD::QName.new(NsVim25, "ClusterRuleSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterConfigSpecEx,
    :schema_type => XSD::QName.new(NsVim25, "ClusterConfigSpecEx"),
    :schema_basetype => XSD::QName.new(NsVim25, "ComputeResourceConfigSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmSwapPlacement", "SOAP::SOAPString", [0, 1]],
      ["dasConfig", "VSphereCloud::ClusterDasConfigInfo", [0, 1]],
      ["dasVmConfigSpec", "VSphereCloud::ClusterDasVmConfigSpec[]", [0, nil]],
      ["drsConfig", "VSphereCloud::ClusterDrsConfigInfo", [0, 1]],
      ["drsVmConfigSpec", "VSphereCloud::ClusterDrsVmConfigSpec[]", [0, nil]],
      ["rulesSpec", "VSphereCloud::ClusterRuleSpec[]", [0, nil]],
      ["dpmConfig", "VSphereCloud::ClusterDpmConfigInfo", [0, 1]],
      ["dpmHostConfigSpec", "VSphereCloud::ClusterDpmHostConfigSpec[]", [0, nil]],
      ["groupSpec", "VSphereCloud::ClusterGroupSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDpmHostConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDpmHostConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::ClusterDpmHostConfigInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDpmHostConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDpmHostConfigSpec"),
    :schema_element => [
      ["clusterDpmHostConfigSpec", ["VSphereCloud::ClusterDpmHostConfigSpec[]", XSD::QName.new(NsVim25, "ClusterDpmHostConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterGroupSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterGroupSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::ClusterGroupInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterGroupSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterGroupSpec"),
    :schema_element => [
      ["clusterGroupSpec", ["VSphereCloud::ClusterGroupSpec[]", XSD::QName.new(NsVim25, "ClusterGroupSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasAamHostInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasAamHostInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasHostInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["hostDasState", "VSphereCloud::ClusterDasAamNodeState[]", [0, nil]],
      ["primaryHosts", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasAamNodeState,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasAamNodeState"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"],
      ["configState", "SOAP::SOAPString"],
      ["runtimeState", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDasAamNodeState,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDasAamNodeState"),
    :schema_element => [
      ["clusterDasAamNodeState", ["VSphereCloud::ClusterDasAamNodeState[]", XSD::QName.new(NsVim25, "ClusterDasAamNodeState")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasAdmissionControlInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasAdmissionControlPolicy,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasAdvancedRuntimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasAdvancedRuntimeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dasHostInfo", "VSphereCloud::ClusterDasHostInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["vmMonitoring", "SOAP::SOAPString", [0, 1]],
      ["hostMonitoring", "SOAP::SOAPString", [0, 1]],
      ["failoverLevel", "SOAP::SOAPInt", [0, 1]],
      ["admissionControlPolicy", "VSphereCloud::ClusterDasAdmissionControlPolicy", [0, 1]],
      ["admissionControlEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultVmSettings", "VSphereCloud::ClusterDasVmSettings", [0, 1]],
      ["option", "VSphereCloud::OptionValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["numVcpus", "SOAP::SOAPInt"],
      ["cpuMHz", "SOAP::SOAPInt"],
      ["memoryMB", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["slots", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots"),
    :schema_element => [
      ["clusterDasFailoverLevelAdvancedRuntimeInfoHostSlots", ["VSphereCloud::ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots[]", XSD::QName.new(NsVim25, "ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasFailoverLevelAdvancedRuntimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasFailoverLevelAdvancedRuntimeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasAdvancedRuntimeInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dasHostInfo", "VSphereCloud::ClusterDasHostInfo", [0, 1]],
      ["slotInfo", "VSphereCloud::ClusterDasFailoverLevelAdvancedRuntimeInfoSlotInfo"],
      ["totalSlots", "SOAP::SOAPInt"],
      ["usedSlots", "SOAP::SOAPInt"],
      ["unreservedSlots", "SOAP::SOAPInt"],
      ["totalVms", "SOAP::SOAPInt"],
      ["totalHosts", "SOAP::SOAPInt"],
      ["totalGoodHosts", "SOAP::SOAPInt"],
      ["hostSlots", "VSphereCloud::ClusterDasFailoverLevelAdvancedRuntimeInfoHostSlots[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasHostInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasHostInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasHostRecommendation,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasHostRecommendation"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["drsRating", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasVmConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasVmConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["restartPriority", "VSphereCloud::DasVmPriority", [0, 1]],
      ["powerOffOnIsolation", "SOAP::SOAPBoolean", [0, 1]],
      ["dasSettings", "VSphereCloud::ClusterDasVmSettings", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDasVmConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDasVmConfigInfo"),
    :schema_element => [
      ["clusterDasVmConfigInfo", ["VSphereCloud::ClusterDasVmConfigInfo[]", XSD::QName.new(NsVim25, "ClusterDasVmConfigInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasVmSettings,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasVmSettings"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["restartPriority", "SOAP::SOAPString", [0, 1]],
      ["isolationResponse", "SOAP::SOAPString", [0, 1]],
      ["vmToolsMonitoringSettings", "VSphereCloud::ClusterVmToolsMonitoringSettings", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDrsFaultsFaultsByVm,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDrsFaultsFaultsByVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["fault", "VSphereCloud::LocalizedMethodFault[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDrsFaultsFaultsByVm,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDrsFaultsFaultsByVm"),
    :schema_element => [
      ["clusterDrsFaultsFaultsByVm", ["VSphereCloud::ClusterDrsFaultsFaultsByVm[]", XSD::QName.new(NsVim25, "ClusterDrsFaultsFaultsByVm")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDrsFaults,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDrsFaults"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["reason", "SOAP::SOAPString"],
      ["faultsByVm", "VSphereCloud::ClusterDrsFaultsFaultsByVm[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDrsFaults,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDrsFaults"),
    :schema_element => [
      ["clusterDrsFaults", ["VSphereCloud::ClusterDrsFaults[]", XSD::QName.new(NsVim25, "ClusterDrsFaults")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDrsMigration,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDrsMigration"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["time", "SOAP::SOAPDateTime"],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["cpuLoad", "SOAP::SOAPInt", [0, 1]],
      ["memoryLoad", "SOAP::SOAPLong", [0, 1]],
      ["source", "VSphereCloud::ManagedObjectReference"],
      ["sourceCpuLoad", "SOAP::SOAPInt", [0, 1]],
      ["sourceMemoryLoad", "SOAP::SOAPLong", [0, 1]],
      ["destination", "VSphereCloud::ManagedObjectReference"],
      ["destinationCpuLoad", "SOAP::SOAPInt", [0, 1]],
      ["destinationMemoryLoad", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDrsMigration,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDrsMigration"),
    :schema_element => [
      ["clusterDrsMigration", ["VSphereCloud::ClusterDrsMigration[]", XSD::QName.new(NsVim25, "ClusterDrsMigration")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDrsRecommendation,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDrsRecommendation"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["rating", "SOAP::SOAPInt"],
      ["reason", "SOAP::SOAPString"],
      ["reasonText", "SOAP::SOAPString"],
      ["migrationList", "VSphereCloud::ClusterDrsMigration[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterDrsRecommendation,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterDrsRecommendation"),
    :schema_element => [
      ["clusterDrsRecommendation", ["VSphereCloud::ClusterDrsRecommendation[]", XSD::QName.new(NsVim25, "ClusterDrsRecommendation")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterFailoverHostAdmissionControlInfoHostStatus,
    :schema_type => XSD::QName.new(NsVim25, "ClusterFailoverHostAdmissionControlInfoHostStatus"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["status", "VSphereCloud::ManagedEntityStatus"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterFailoverHostAdmissionControlInfoHostStatus"),
    :schema_element => [
      ["clusterFailoverHostAdmissionControlInfoHostStatus", ["VSphereCloud::ClusterFailoverHostAdmissionControlInfoHostStatus[]", XSD::QName.new(NsVim25, "ClusterFailoverHostAdmissionControlInfoHostStatus")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterFailoverHostAdmissionControlInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterFailoverHostAdmissionControlInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["hostStatus", "VSphereCloud::ClusterFailoverHostAdmissionControlInfoHostStatus[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterFailoverHostAdmissionControlPolicy,
    :schema_type => XSD::QName.new(NsVim25, "ClusterFailoverHostAdmissionControlPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlPolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["failoverHosts", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterFailoverLevelAdmissionControlInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterFailoverLevelAdmissionControlInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["currentFailoverLevel", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterFailoverLevelAdmissionControlPolicy,
    :schema_type => XSD::QName.new(NsVim25, "ClusterFailoverLevelAdmissionControlPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlPolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["failoverLevel", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterFailoverResourcesAdmissionControlInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterFailoverResourcesAdmissionControlInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["currentCpuFailoverResourcesPercent", "SOAP::SOAPInt"],
      ["currentMemoryFailoverResourcesPercent", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterFailoverResourcesAdmissionControlPolicy,
    :schema_type => XSD::QName.new(NsVim25, "ClusterFailoverResourcesAdmissionControlPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterDasAdmissionControlPolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["cpuFailoverResourcesPercent", "SOAP::SOAPInt"],
      ["memoryFailoverResourcesPercent", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterGroupInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterGroupInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterGroupInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterGroupInfo"),
    :schema_element => [
      ["clusterGroupInfo", ["VSphereCloud::ClusterGroupInfo[]", XSD::QName.new(NsVim25, "ClusterGroupInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterHostGroup,
    :schema_type => XSD::QName.new(NsVim25, "ClusterHostGroup"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterGroupInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterHostPowerAction,
    :schema_type => XSD::QName.new(NsVim25, "ClusterHostPowerAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterAction"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["operationType", "VSphereCloud::HostPowerOperationType"],
      ["powerConsumptionWatt", "SOAP::SOAPInt", [0, 1]],
      ["cpuCapacityMHz", "SOAP::SOAPInt", [0, 1]],
      ["memCapacityMB", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterHostRecommendation,
    :schema_type => XSD::QName.new(NsVim25, "ClusterHostRecommendation"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["rating", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterHostRecommendation,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterHostRecommendation"),
    :schema_element => [
      ["clusterHostRecommendation", ["VSphereCloud::ClusterHostRecommendation[]", XSD::QName.new(NsVim25, "ClusterHostRecommendation")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterInitialPlacementAction,
    :schema_type => XSD::QName.new(NsVim25, "ClusterInitialPlacementAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterAction"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["targetHost", "VSphereCloud::ManagedObjectReference"],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterMigrationAction,
    :schema_type => XSD::QName.new(NsVim25, "ClusterMigrationAction"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterAction"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["target", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["drsMigration", "VSphereCloud::ClusterDrsMigration", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterNotAttemptedVmInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterNotAttemptedVmInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterNotAttemptedVmInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterNotAttemptedVmInfo"),
    :schema_element => [
      ["clusterNotAttemptedVmInfo", ["VSphereCloud::ClusterNotAttemptedVmInfo[]", XSD::QName.new(NsVim25, "ClusterNotAttemptedVmInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterPowerOnVmResult,
    :schema_type => XSD::QName.new(NsVim25, "ClusterPowerOnVmResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["attempted", "VSphereCloud::ClusterAttemptedVmInfo[]", [0, nil]],
      ["notAttempted", "VSphereCloud::ClusterNotAttemptedVmInfo[]", [0, nil]],
      ["recommendations", "VSphereCloud::ClusterRecommendation[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterRecommendation,
    :schema_type => XSD::QName.new(NsVim25, "ClusterRecommendation"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["time", "SOAP::SOAPDateTime"],
      ["rating", "SOAP::SOAPInt"],
      ["reason", "SOAP::SOAPString"],
      ["reasonText", "SOAP::SOAPString"],
      ["prerequisite", "SOAP::SOAPString[]", [0, nil]],
      ["action", "VSphereCloud::ClusterAction[]", [0, nil]],
      ["target", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterRecommendation,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterRecommendation"),
    :schema_element => [
      ["clusterRecommendation", ["VSphereCloud::ClusterRecommendation[]", XSD::QName.new(NsVim25, "ClusterRecommendation")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterRuleInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterRuleInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "VSphereCloud::ManagedEntityStatus", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfClusterRuleInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfClusterRuleInfo"),
    :schema_element => [
      ["clusterRuleInfo", ["VSphereCloud::ClusterRuleInfo[]", XSD::QName.new(NsVim25, "ClusterRuleInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterVmGroup,
    :schema_type => XSD::QName.new(NsVim25, "ClusterVmGroup"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterGroupInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterVmHostRuleInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterVmHostRuleInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterRuleInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["status", "VSphereCloud::ManagedEntityStatus", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["mandatory", "SOAP::SOAPBoolean", [0, 1]],
      ["userCreated", "SOAP::SOAPBoolean", [0, 1]],
      ["inCompliance", "SOAP::SOAPBoolean", [0, 1]],
      ["vmGroupName", "SOAP::SOAPString", [0, 1]],
      ["affineHostGroupName", "SOAP::SOAPString", [0, 1]],
      ["antiAffineHostGroupName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterVmToolsMonitoringSettings,
    :schema_type => XSD::QName.new(NsVim25, "ClusterVmToolsMonitoringSettings"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["vmMonitoring", "SOAP::SOAPString", [0, 1]],
      ["clusterSettings", "SOAP::SOAPBoolean", [0, 1]],
      ["failureInterval", "SOAP::SOAPInt", [0, 1]],
      ["minUpTime", "SOAP::SOAPInt", [0, 1]],
      ["maxFailures", "SOAP::SOAPInt", [0, 1]],
      ["maxFailureWindow", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "DVPortConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["scope", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["setting", "VSphereCloud::DVPortSetting", [0, 1]],
      ["configVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDVPortConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDVPortConfigSpec"),
    :schema_element => [
      ["dVPortConfigSpec", ["VSphereCloud::DVPortConfigSpec[]", XSD::QName.new(NsVim25, "DVPortConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "DVPortConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["scope", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["setting", "VSphereCloud::DVPortSetting", [0, 1]],
      ["configVersion", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSTrafficShapingPolicy,
    :schema_type => XSD::QName.new(NsVim25, "DVSTrafficShapingPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["enabled", "VSphereCloud::BoolPolicy", [0, 1]],
      ["averageBandwidth", "VSphereCloud::LongPolicy", [0, 1]],
      ["peakBandwidth", "VSphereCloud::LongPolicy", [0, 1]],
      ["burstSize", "VSphereCloud::LongPolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSVendorSpecificConfig,
    :schema_type => XSD::QName.new(NsVim25, "DVSVendorSpecificConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["keyValue", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortSetting,
    :schema_type => XSD::QName.new(NsVim25, "DVPortSetting"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["blocked", "VSphereCloud::BoolPolicy", [0, 1]],
      ["vmDirectPathGen2Allowed", "VSphereCloud::BoolPolicy", [0, 1]],
      ["inShapingPolicy", "VSphereCloud::DVSTrafficShapingPolicy", [0, 1]],
      ["outShapingPolicy", "VSphereCloud::DVSTrafficShapingPolicy", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DVSVendorSpecificConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortStatus,
    :schema_type => XSD::QName.new(NsVim25, "DVPortStatus"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["linkUp", "SOAP::SOAPBoolean"],
      ["blocked", "SOAP::SOAPBoolean"],
      ["vlanIds", "VSphereCloud::NumericRange[]", [0, nil]],
      ["trunkingMode", "SOAP::SOAPBoolean", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["linkPeer", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["statusDetail", "SOAP::SOAPString", [0, 1]],
      ["vmDirectPathGen2Active", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2InactiveReasonNetwork", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonOther", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonExtended", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortState,
    :schema_type => XSD::QName.new(NsVim25, "DVPortState"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["runtimeInfo", "VSphereCloud::DVPortStatus", [0, 1]],
      ["stats", "VSphereCloud::DistributedVirtualSwitchPortStatistics"],
      ["vendorSpecificState", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualPort,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualPort"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["config", "VSphereCloud::DVPortConfigInfo"],
      ["dvsUuid", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString", [0, 1]],
      ["proxyHost", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["connectee", "VSphereCloud::DistributedVirtualSwitchPortConnectee", [0, 1]],
      ["conflict", "SOAP::SOAPBoolean"],
      ["conflictPortKey", "SOAP::SOAPString", [0, 1]],
      ["state", "VSphereCloud::DVPortState", [0, 1]],
      ["connectionCookie", "SOAP::SOAPInt", [0, 1]],
      ["lastStatusChange", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualPort,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualPort"),
    :schema_element => [
      ["distributedVirtualPort", ["VSphereCloud::DistributedVirtualPort[]", XSD::QName.new(NsVim25, "DistributedVirtualPort")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortgroupPolicy,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["blockOverrideAllowed", "SOAP::SOAPBoolean"],
      ["shapingOverrideAllowed", "SOAP::SOAPBoolean"],
      ["vendorConfigOverrideAllowed", "SOAP::SOAPBoolean"],
      ["livePortMovingAllowed", "SOAP::SOAPBoolean"],
      ["portConfigResetAtDisconnect", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortgroupConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["numPorts", "SOAP::SOAPInt", [0, 1]],
      ["portNameFormat", "SOAP::SOAPString", [0, 1]],
      ["defaultPortConfig", "VSphereCloud::DVPortSetting", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["scope", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["policy", "VSphereCloud::DVPortgroupPolicy", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDVPortgroupConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDVPortgroupConfigSpec"),
    :schema_element => [
      ["dVPortgroupConfigSpec", ["VSphereCloud::DVPortgroupConfigSpec[]", XSD::QName.new(NsVim25, "DVPortgroupConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortgroupConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["distributedVirtualSwitch", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["defaultPortConfig", "VSphereCloud::DVPortSetting", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString"],
      ["policy", "VSphereCloud::DVPortgroupPolicy"],
      ["portNameFormat", "SOAP::SOAPString", [0, 1]],
      ["scope", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualPortgroupInfo,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualPortgroupInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["switchName", "SOAP::SOAPString"],
      ["switchUuid", "SOAP::SOAPString"],
      ["portgroupName", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString"],
      ["portgroupType", "SOAP::SOAPString"],
      ["uplinkPortgroup", "SOAP::SOAPBoolean"],
      ["portgroup", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualPortgroupInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualPortgroupInfo"),
    :schema_element => [
      ["distributedVirtualPortgroupInfo", ["VSphereCloud::DistributedVirtualPortgroupInfo[]", XSD::QName.new(NsVim25, "DistributedVirtualPortgroupInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchInfo,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["switchName", "SOAP::SOAPString"],
      ["switchUuid", "SOAP::SOAPString"],
      ["distributedVirtualSwitch", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchInfo"),
    :schema_element => [
      ["distributedVirtualSwitchInfo", ["VSphereCloud::DistributedVirtualSwitchInfo[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSManagerDvsConfigTarget,
    :schema_type => XSD::QName.new(NsVim25, "DVSManagerDvsConfigTarget"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["distributedVirtualPortgroup", "VSphereCloud::DistributedVirtualPortgroupInfo[]", [0, nil]],
      ["distributedVirtualSwitch", "VSphereCloud::DistributedVirtualSwitchInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchManagerCompatibilityResult,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerCompatibilityResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchManagerCompatibilityResult,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchManagerCompatibilityResult"),
    :schema_element => [
      ["distributedVirtualSwitchManagerCompatibilityResult", ["VSphereCloud::DistributedVirtualSwitchManagerCompatibilityResult[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerCompatibilityResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchManagerHostContainer,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostContainer"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["container", "VSphereCloud::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchManagerHostDvsFilterSpec,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostDvsFilterSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchManagerHostDvsFilterSpec"),
    :schema_element => [
      ["distributedVirtualSwitchManagerHostDvsFilterSpec", ["VSphereCloud::DistributedVirtualSwitchManagerHostDvsFilterSpec[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostDvsFilterSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchManagerHostArrayFilter,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostArrayFilter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostDvsFilterSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"],
      ["host", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchManagerHostContainerFilter,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostContainerFilter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostDvsFilterSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"],
      ["hostContainer", "VSphereCloud::DistributedVirtualSwitchManagerHostContainer"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchManagerHostDvsMembershipFilter,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostDvsMembershipFilter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerHostDvsFilterSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inclusive", "SOAP::SOAPBoolean"],
      ["distributedVirtualSwitch", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchManagerDvsProductSpec,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchManagerDvsProductSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["newSwitchProductSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["distributedVirtualSwitch", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostMemberConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["backing", "VSphereCloud::DistributedVirtualSwitchHostMemberBacking", [0, 1]],
      ["maxProxySwitchPorts", "SOAP::SOAPInt", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchHostMemberConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchHostMemberConfigSpec"),
    :schema_element => [
      ["distributedVirtualSwitchHostMemberConfigSpec", ["VSphereCloud::DistributedVirtualSwitchHostMemberConfigSpec[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostMemberPnicSpec,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberPnicSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["pnicDevice", "SOAP::SOAPString"],
      ["uplinkPortKey", "SOAP::SOAPString", [0, 1]],
      ["uplinkPortgroupKey", "SOAP::SOAPString", [0, 1]],
      ["connectionCookie", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchHostMemberPnicSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchHostMemberPnicSpec"),
    :schema_element => [
      ["distributedVirtualSwitchHostMemberPnicSpec", ["VSphereCloud::DistributedVirtualSwitchHostMemberPnicSpec[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberPnicSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostMemberBacking,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberBacking"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostMemberPnicBacking,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberPnicBacking"),
    :schema_basetype => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberBacking"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["pnicSpec", "VSphereCloud::DistributedVirtualSwitchHostMemberPnicSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostMemberConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["maxProxySwitchPorts", "SOAP::SOAPInt"],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["backing", "VSphereCloud::DistributedVirtualSwitchHostMemberBacking"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostMember,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMember"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["config", "VSphereCloud::DistributedVirtualSwitchHostMemberConfigInfo"],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["uplinkPortKey", "SOAP::SOAPString[]", [0, nil]],
      ["status", "SOAP::SOAPString"],
      ["statusDetail", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchHostMember,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchHostMember"),
    :schema_element => [
      ["distributedVirtualSwitchHostMember", ["VSphereCloud::DistributedVirtualSwitchHostMember[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMember")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostProductSpec,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostProductSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["productLineId", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchHostProductSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchHostProductSpec"),
    :schema_element => [
      ["distributedVirtualSwitchHostProductSpec", ["VSphereCloud::DistributedVirtualSwitchHostProductSpec[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostProductSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchKeyedOpaqueBlob"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["opaqueData", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchKeyedOpaqueBlob"),
    :schema_element => [
      ["distributedVirtualSwitchKeyedOpaqueBlob", ["VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchKeyedOpaqueBlob")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSNetworkResourcePoolAllocationInfo,
    :schema_type => XSD::QName.new(NsVim25, "DVSNetworkResourcePoolAllocationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["limit", "SOAP::SOAPLong", [0, 1]],
      ["shares", "VSphereCloud::SharesInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSNetworkResourcePoolConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "DVSNetworkResourcePoolConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["allocationInfo", "VSphereCloud::DVSNetworkResourcePoolAllocationInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDVSNetworkResourcePoolConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDVSNetworkResourcePoolConfigSpec"),
    :schema_element => [
      ["dVSNetworkResourcePoolConfigSpec", ["VSphereCloud::DVSNetworkResourcePoolConfigSpec[]", XSD::QName.new(NsVim25, "DVSNetworkResourcePoolConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSNetworkResourcePool,
    :schema_type => XSD::QName.new(NsVim25, "DVSNetworkResourcePool"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPString"],
      ["allocationInfo", "VSphereCloud::DVSNetworkResourcePoolAllocationInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDVSNetworkResourcePool,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDVSNetworkResourcePool"),
    :schema_element => [
      ["dVSNetworkResourcePool", ["VSphereCloud::DVSNetworkResourcePool[]", XSD::QName.new(NsVim25, "DVSNetworkResourcePool")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchPortConnectee,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchPortConnectee"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["connectedEntity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["nicKey", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["addressHint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchPortConnection,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchPortConnection"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["switchUuid", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString", [0, 1]],
      ["connectionCookie", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchPortCriteria,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchPortCriteria"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["connected", "SOAP::SOAPBoolean", [0, 1]],
      ["active", "SOAP::SOAPBoolean", [0, 1]],
      ["uplinkPort", "SOAP::SOAPBoolean", [0, 1]],
      ["scope", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["portgroupKey", "SOAP::SOAPString[]", [0, nil]],
      ["inside", "SOAP::SOAPBoolean", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchPortStatistics,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchPortStatistics"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["packetsInMulticast", "SOAP::SOAPLong"],
      ["packetsOutMulticast", "SOAP::SOAPLong"],
      ["bytesInMulticast", "SOAP::SOAPLong"],
      ["bytesOutMulticast", "SOAP::SOAPLong"],
      ["packetsInUnicast", "SOAP::SOAPLong"],
      ["packetsOutUnicast", "SOAP::SOAPLong"],
      ["bytesInUnicast", "SOAP::SOAPLong"],
      ["bytesOutUnicast", "SOAP::SOAPLong"],
      ["packetsInBroadcast", "SOAP::SOAPLong"],
      ["packetsOutBroadcast", "SOAP::SOAPLong"],
      ["bytesInBroadcast", "SOAP::SOAPLong"],
      ["bytesOutBroadcast", "SOAP::SOAPLong"],
      ["packetsInDropped", "SOAP::SOAPLong"],
      ["packetsOutDropped", "SOAP::SOAPLong"],
      ["packetsInException", "SOAP::SOAPLong"],
      ["packetsOutException", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchProductSpec,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchProductSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["build", "SOAP::SOAPString", [0, 1]],
      ["forwardingClass", "SOAP::SOAPString", [0, 1]],
      ["bundleId", "SOAP::SOAPString", [0, 1]],
      ["bundleUrl", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDistributedVirtualSwitchProductSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDistributedVirtualSwitchProductSpec"),
    :schema_element => [
      ["distributedVirtualSwitchProductSpec", ["VSphereCloud::DistributedVirtualSwitchProductSpec[]", XSD::QName.new(NsVim25, "DistributedVirtualSwitchProductSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMwareDVSFeatureCapability,
    :schema_type => XSD::QName.new(NsVim25, "VMwareDVSFeatureCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVSFeatureCapability"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["networkResourceManagementSupported", "SOAP::SOAPBoolean"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean"],
      ["nicTeamingPolicy", "SOAP::SOAPString[]", [0, nil]],
      ["networkResourcePoolHighShareValue", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMwareDVSConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "VMwareDVSConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVSConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["numStandalonePorts", "SOAP::SOAPInt"],
      ["numPorts", "SOAP::SOAPInt"],
      ["maxPorts", "SOAP::SOAPInt"],
      ["uplinkPortPolicy", "VSphereCloud::DVSUplinkPortPolicy"],
      ["uplinkPortgroup", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VSphereCloud::DVPortSetting"],
      ["host", "VSphereCloud::DistributedVirtualSwitchHostMember[]", [0, nil]],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec"],
      ["targetInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["policy", "VSphereCloud::DVSPolicy", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPString"],
      ["contact", "VSphereCloud::DVSContactInfo"],
      ["createTime", "SOAP::SOAPDateTime"],
      ["networkResourceManagementEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["pvlanConfig", "VSphereCloud::VMwareDVSPvlanMapEntry[]", [0, nil]],
      ["maxMtu", "SOAP::SOAPInt"],
      ["linkDiscoveryProtocolConfig", "VSphereCloud::LinkDiscoveryProtocolConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMwareDVSConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "VMwareDVSConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVSConfigSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["numStandalonePorts", "SOAP::SOAPInt", [0, 1]],
      ["maxPorts", "SOAP::SOAPInt", [0, 1]],
      ["uplinkPortPolicy", "VSphereCloud::DVSUplinkPortPolicy", [0, 1]],
      ["uplinkPortgroup", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["defaultPortConfig", "VSphereCloud::DVPortSetting", [0, 1]],
      ["host", "VSphereCloud::DistributedVirtualSwitchHostMemberConfigSpec[]", [0, nil]],
      ["extensionKey", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["policy", "VSphereCloud::DVSPolicy", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DistributedVirtualSwitchKeyedOpaqueBlob[]", [0, nil]],
      ["contact", "VSphereCloud::DVSContactInfo", [0, 1]],
      ["pvlanConfigSpec", "VSphereCloud::VMwareDVSPvlanConfigSpec[]", [0, nil]],
      ["maxMtu", "SOAP::SOAPInt", [0, 1]],
      ["linkDiscoveryProtocolConfig", "VSphereCloud::LinkDiscoveryProtocolConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMwareUplinkPortOrderPolicy,
    :schema_type => XSD::QName.new(NsVim25, "VMwareUplinkPortOrderPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["activeUplinkPort", "SOAP::SOAPString[]", [0, nil]],
      ["standbyUplinkPort", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSFailureCriteria,
    :schema_type => XSD::QName.new(NsVim25, "DVSFailureCriteria"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["checkSpeed", "VSphereCloud::StringPolicy", [0, 1]],
      ["speed", "VSphereCloud::IntPolicy", [0, 1]],
      ["checkDuplex", "VSphereCloud::BoolPolicy", [0, 1]],
      ["fullDuplex", "VSphereCloud::BoolPolicy", [0, 1]],
      ["checkErrorPercent", "VSphereCloud::BoolPolicy", [0, 1]],
      ["percentage", "VSphereCloud::IntPolicy", [0, 1]],
      ["checkBeacon", "VSphereCloud::BoolPolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmwareUplinkPortTeamingPolicy,
    :schema_type => XSD::QName.new(NsVim25, "VmwareUplinkPortTeamingPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::StringPolicy", [0, 1]],
      ["reversePolicy", "VSphereCloud::BoolPolicy", [0, 1]],
      ["notifySwitches", "VSphereCloud::BoolPolicy", [0, 1]],
      ["rollingOrder", "VSphereCloud::BoolPolicy", [0, 1]],
      ["failureCriteria", "VSphereCloud::DVSFailureCriteria", [0, 1]],
      ["uplinkPortOrder", "VSphereCloud::VMwareUplinkPortOrderPolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmwareDistributedVirtualSwitchVlanSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchVlanSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmwareDistributedVirtualSwitchPvlanSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchPvlanSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchVlanSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["pvlanId", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmwareDistributedVirtualSwitchVlanIdSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchVlanIdSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchVlanSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["vlanId", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmwareDistributedVirtualSwitchTrunkVlanSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchTrunkVlanSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchVlanSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["vlanId", "VSphereCloud::NumericRange[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVSSecurityPolicy,
    :schema_type => XSD::QName.new(NsVim25, "DVSSecurityPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "InheritablePolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inherited", "SOAP::SOAPBoolean"],
      ["allowPromiscuous", "VSphereCloud::BoolPolicy", [0, 1]],
      ["macChanges", "VSphereCloud::BoolPolicy", [0, 1]],
      ["forgedTransmits", "VSphereCloud::BoolPolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMwareDVSPortSetting,
    :schema_type => XSD::QName.new(NsVim25, "VMwareDVSPortSetting"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVPortSetting"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["blocked", "VSphereCloud::BoolPolicy", [0, 1]],
      ["vmDirectPathGen2Allowed", "VSphereCloud::BoolPolicy", [0, 1]],
      ["inShapingPolicy", "VSphereCloud::DVSTrafficShapingPolicy", [0, 1]],
      ["outShapingPolicy", "VSphereCloud::DVSTrafficShapingPolicy", [0, 1]],
      ["vendorSpecificConfig", "VSphereCloud::DVSVendorSpecificConfig", [0, 1]],
      ["vlan", "VSphereCloud::VmwareDistributedVirtualSwitchVlanSpec", [0, 1]],
      ["qosTag", "VSphereCloud::IntPolicy", [0, 1]],
      ["uplinkTeamingPolicy", "VSphereCloud::VmwareUplinkPortTeamingPolicy", [0, 1]],
      ["securityPolicy", "VSphereCloud::DVSSecurityPolicy", [0, 1]],
      ["txUplink", "VSphereCloud::BoolPolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMwareDVSPortgroupPolicy,
    :schema_type => XSD::QName.new(NsVim25, "VMwareDVSPortgroupPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVPortgroupPolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["blockOverrideAllowed", "SOAP::SOAPBoolean"],
      ["shapingOverrideAllowed", "SOAP::SOAPBoolean"],
      ["vendorConfigOverrideAllowed", "SOAP::SOAPBoolean"],
      ["livePortMovingAllowed", "SOAP::SOAPBoolean"],
      ["portConfigResetAtDisconnect", "SOAP::SOAPBoolean"],
      ["vlanOverrideAllowed", "SOAP::SOAPBoolean"],
      ["uplinkTeamingOverrideAllowed", "SOAP::SOAPBoolean"],
      ["securityPolicyOverrideAllowed", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMwareDVSPvlanConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "VMwareDVSPvlanConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["pvlanEntry", "VSphereCloud::VMwareDVSPvlanMapEntry"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVMwareDVSPvlanConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVMwareDVSPvlanConfigSpec"),
    :schema_element => [
      ["vMwareDVSPvlanConfigSpec", ["VSphereCloud::VMwareDVSPvlanConfigSpec[]", XSD::QName.new(NsVim25, "VMwareDVSPvlanConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMwareDVSPvlanMapEntry,
    :schema_type => XSD::QName.new(NsVim25, "VMwareDVSPvlanMapEntry"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["primaryVlanId", "SOAP::SOAPInt"],
      ["secondaryVlanId", "SOAP::SOAPInt"],
      ["pvlanType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVMwareDVSPvlanMapEntry,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVMwareDVSPvlanMapEntry"),
    :schema_element => [
      ["vMwareDVSPvlanMapEntry", ["VSphereCloud::VMwareDVSPvlanMapEntry[]", XSD::QName.new(NsVim25, "VMwareDVSPvlanMapEntry")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::Event,
    :schema_type => XSD::QName.new(NsVim25, "Event"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfEvent,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfEvent"),
    :schema_element => [
      ["event", ["VSphereCloud::Event[]", XSD::QName.new(NsVim25, "Event")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EventEx,
    :schema_type => XSD::QName.new(NsVim25, "EventEx"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["eventTypeId", "SOAP::SOAPString"],
      ["severity", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString", [0, 1]],
      ["arguments", "VSphereCloud::KeyAnyValue[]", [0, nil]],
      ["objectId", "SOAP::SOAPString", [0, 1]],
      ["objectType", "SOAP::SOAPString", [0, 1]],
      ["objectName", "SOAP::SOAPString", [0, 1]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GeneralEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GeneralHostInfoEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralHostInfoEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GeneralHostWarningEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralHostWarningEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GeneralHostErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralHostErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GeneralVmInfoEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralVmInfoEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GeneralVmWarningEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralVmWarningEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GeneralVmErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralVmErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GeneralUserEvent,
    :schema_type => XSD::QName.new(NsVim25, "GeneralUserEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtendedEventPair,
    :schema_type => XSD::QName.new(NsVim25, "ExtendedEventPair"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfExtendedEventPair,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfExtendedEventPair"),
    :schema_element => [
      ["extendedEventPair", ["VSphereCloud::ExtendedEventPair[]", XSD::QName.new(NsVim25, "ExtendedEventPair")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtendedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ExtendedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "GeneralEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"],
      ["eventTypeId", "SOAP::SOAPString"],
      ["managedObject", "VSphereCloud::ManagedObjectReference"],
      ["data", "VSphereCloud::ExtendedEventPair[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HealthStatusChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HealthStatusChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["componentId", "SOAP::SOAPString"],
      ["oldStatus", "SOAP::SOAPString"],
      ["newStatus", "SOAP::SOAPString"],
      ["componentName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInventoryUnreadableEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostInventoryUnreadableEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatacenterEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatacenterEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatacenterCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatacenterCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatacenterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::FolderEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatacenterRenamedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatacenterRenamedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatacenterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SessionEvent,
    :schema_type => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ServerStartedSessionEvent,
    :schema_type => XSD::QName.new(NsVim25, "ServerStartedSessionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UserLoginSessionEvent,
    :schema_type => XSD::QName.new(NsVim25, "UserLoginSessionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString"],
      ["sessionId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UserLogoutSessionEvent,
    :schema_type => XSD::QName.new(NsVim25, "UserLogoutSessionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::BadUsernameSessionEvent,
    :schema_type => XSD::QName.new(NsVim25, "BadUsernameSessionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlreadyAuthenticatedSessionEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlreadyAuthenticatedSessionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoAccessUserEvent,
    :schema_type => XSD::QName.new(NsVim25, "NoAccessUserEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SessionTerminatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "SessionTerminatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["sessionId", "SOAP::SOAPString"],
      ["terminatedUsername", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GlobalMessageChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "GlobalMessageChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "SessionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpgradeEvent,
    :schema_type => XSD::QName.new(NsVim25, "UpgradeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InfoUpgradeEvent,
    :schema_type => XSD::QName.new(NsVim25, "InfoUpgradeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "UpgradeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WarningUpgradeEvent,
    :schema_type => XSD::QName.new(NsVim25, "WarningUpgradeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "UpgradeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ErrorUpgradeEvent,
    :schema_type => XSD::QName.new(NsVim25, "ErrorUpgradeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "UpgradeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UserUpgradeEvent,
    :schema_type => XSD::QName.new(NsVim25, "UserUpgradeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "UpgradeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDasEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostConnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDisconnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDisconnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostSyncFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostSyncFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConnectionLostEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostConnectionLostEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostReconnectionFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostReconnectionFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCnxFailedNoConnectionEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedNoConnectionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCnxFailedBadUsernameEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedBadUsernameEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCnxFailedBadVersionEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedBadVersionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCnxFailedAlreadyManagedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedAlreadyManagedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["serverName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCnxFailedNoLicenseEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedNoLicenseEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCnxFailedNetworkErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedNetworkErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCnxFailedCcagentUpgradeEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedCcagentUpgradeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCnxFailedBadCcagentEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedBadCcagentEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCnxFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCnxFailedAccountFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedAccountFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCnxFailedNoAccessEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedNoAccessEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostShutdownEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostShutdownEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCnxFailedNotFoundEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedNotFoundEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCnxFailedTimeoutEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCnxFailedTimeoutEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostUpgradeFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostUpgradeFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnteringMaintenanceModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "EnteringMaintenanceModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnteredMaintenanceModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "EnteredMaintenanceModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExitMaintenanceModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "ExitMaintenanceModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CanceledHostOperationEvent,
    :schema_type => XSD::QName.new(NsVim25, "CanceledHostOperationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TimedOutHostOperationEvent,
    :schema_type => XSD::QName.new(NsVim25, "TimedOutHostOperationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDasEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDasEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDasDisabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDasDisabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDasEnablingEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDasEnablingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDasDisablingEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDasDisablingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDasErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDasErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["message", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDasOkEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostDasOkEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VcAgentUpgradedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VcAgentUpgradedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VcAgentUninstalledEvent,
    :schema_type => XSD::QName.new(NsVim25, "VcAgentUninstalledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VcAgentUpgradeFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VcAgentUpgradeFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VcAgentUninstallFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VcAgentUninstallFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostAddedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostAddedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostAddFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostAddFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostname", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIpChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostIpChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldIP", "SOAP::SOAPString"],
      ["newIP", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnteringStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "EnteringStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsEnteringStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsEnteringStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "EnteringStandbyModeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnteredStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "EnteredStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsEnteredStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsEnteredStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "EnteredStandbyModeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExitingStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "ExitingStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsExitingStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsExitingStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ExitingStandbyModeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExitedStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "ExitedStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsExitedStandbyModeEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsExitedStandbyModeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ExitedStandbyModeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExitStandbyModeFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ExitStandbyModeFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsExitStandbyModeFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsExitStandbyModeFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ExitStandbyModeFailedEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdatedAgentBeingRestartedEvent,
    :schema_type => XSD::QName.new(NsVim25, "UpdatedAgentBeingRestartedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AccountCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AccountCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["spec", "VSphereCloud::HostAccountSpec"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AccountRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AccountRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["account", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UserPasswordChanged,
    :schema_type => XSD::QName.new(NsVim25, "UserPasswordChanged"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["userLogin", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AccountUpdatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AccountUpdatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["spec", "VSphereCloud::HostAccountSpec"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UserAssignedToGroup,
    :schema_type => XSD::QName.new(NsVim25, "UserAssignedToGroup"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["userLogin", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UserUnassignedFromGroup,
    :schema_type => XSD::QName.new(NsVim25, "UserUnassignedFromGroup"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["userLogin", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastorePrincipalConfigured,
    :schema_type => XSD::QName.new(NsVim25, "DatastorePrincipalConfigured"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastorePrincipal", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMFSDatastoreCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VMFSDatastoreCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NASDatastoreCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "NASDatastoreCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LocalDatastoreCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "LocalDatastoreCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMFSDatastoreExtendedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VMFSDatastoreExtendedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMFSDatastoreExpandedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VMFSDatastoreExpandedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreRemovedOnHostEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreRemovedOnHostEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreRenamedOnHostEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreRenamedOnHostEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DuplicateIpDetectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DuplicateIpDetectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["duplicateIP", "SOAP::SOAPString"],
      ["macAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreDiscoveredEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreDiscoveredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsResourceConfigureFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsResourceConfigureFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsResourceConfigureSyncedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsResourceConfigureSyncedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostGetShortNameFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostGetShortNameFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostShortNameToIpFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostShortNameToIpFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["shortName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIpToShortNameFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostIpToShortNameFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPrimaryAgentNotShortNameEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostPrimaryAgentNotShortNameEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["primaryAgent", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNotInClusterEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostNotInClusterEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIsolationIpPingFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostIsolationIpPingFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["isolationIp", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIpInconsistentEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostIpInconsistentEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString"],
      ["ipAddress2", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostUserWorldSwapNotEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostUserWorldSwapNotEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNonCompliantEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostNonCompliantEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCompliantEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostCompliantEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostComplianceCheckedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostComplianceCheckedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterComplianceCheckedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ClusterComplianceCheckedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileEvent,
    :schema_type => XSD::QName.new(NsVim25, "ProfileEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ProfileCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ProfileRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileAssociatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ProfileAssociatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileDissociatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ProfileDissociatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConfigAppliedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigAppliedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileReferenceHostChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ProfileReferenceHostChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"],
      ["referenceHost", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ProfileChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostProfileAppliedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostProfileAppliedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["profile", "VSphereCloud::ProfileEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostShortNameInconsistentEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostShortNameInconsistentEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["shortName", "SOAP::SOAPString"],
      ["shortName2", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNoRedundantManagementNetworkEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostNoRedundantManagementNetworkEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNoAvailableNetworksEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostNoAvailableNetworksEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ips", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostExtraNetworksEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostExtraNetworksEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ips", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNoHAEnabledPortGroupsEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostNoHAEnabledPortGroupsEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostMissingNetworksEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostMissingNetworksEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDasEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["ips", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VnicPortArgument,
    :schema_type => XSD::QName.new(NsVim25, "VnicPortArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vnic", "SOAP::SOAPString"],
      ["port", "VSphereCloud::DistributedVirtualSwitchPortConnection"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVnicPortArgument,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVnicPortArgument"),
    :schema_element => [
      ["vnicPortArgument", ["VSphereCloud::VnicPortArgument[]", XSD::QName.new(NsVim25, "VnicPortArgument")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVnicConnectedToCustomizedDVPortEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostVnicConnectedToCustomizedDVPortEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["vnic", "VSphereCloud::VnicPortArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GhostDvsProxySwitchDetectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "GhostDvsProxySwitchDetectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["switchUuid", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GhostDvsProxySwitchRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "GhostDvsProxySwitchRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["switchUuid", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmPoweredOffEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmPoweredOffEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmPoweredOnEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmPoweredOnEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmSuspendedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmSuspendedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmStartingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmStartingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmStoppingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmStoppingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmSuspendingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmSuspendingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmResumingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmResumingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDisconnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDisconnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmRemoteConsoleConnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRemoteConsoleConnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmRemoteConsoleDisconnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRemoteConsoleDisconnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDiscoveredEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDiscoveredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmOrphanedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmOrphanedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmBeingCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmBeingCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configSpec", "VSphereCloud::VirtualMachineConfigSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmStartRecordingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmStartRecordingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmEndRecordingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmEndRecordingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmStartReplayingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmStartReplayingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmEndReplayingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmEndReplayingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmRegisteredEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRegisteredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmAutoRenameEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmAutoRenameEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmBeingHotMigratedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmBeingHotMigratedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmResettingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmResettingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmStaticMacConflictEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmStaticMacConflictEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VSphereCloud::VmEventArgument"],
      ["mac", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmMacConflictEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmMacConflictEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VSphereCloud::VmEventArgument"],
      ["mac", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmBeingDeployedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmBeingDeployedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["srcTemplate", "VSphereCloud::VmEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDeployFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDeployFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destDatastore", "VSphereCloud::EntityEventArgument"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDeployedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDeployedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["srcTemplate", "VSphereCloud::VmEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmMacChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmMacChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["adapter", "SOAP::SOAPString"],
      ["oldMac", "SOAP::SOAPString"],
      ["newMac", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmMacAssignedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmMacAssignedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["adapter", "SOAP::SOAPString"],
      ["mac", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmUuidConflictEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmUuidConflictEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VSphereCloud::VmEventArgument"],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmInstanceUuidConflictEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmInstanceUuidConflictEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVm", "VSphereCloud::VmEventArgument"],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmBeingMigratedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmBeingMigratedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFailedMigrateEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedMigrateEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VSphereCloud::HostEventArgument"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmMigratedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmMigratedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmUnsupportedStartingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmUnsupportedStartingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmStartingEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["guestId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsVmMigratedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsVmMigratedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmMigratedEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsVmPoweredOnEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsVmPoweredOnEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmPoweredOnEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsRuleViolationEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsRuleViolationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsRuleComplianceEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsRuleComplianceEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmRelocateSpecEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRelocateSpecEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmBeingRelocatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmBeingRelocatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmRelocateSpecEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmRelocatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRelocatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmRelocateSpecEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmRelocateFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRelocateFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmRelocateSpecEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VSphereCloud::HostEventArgument"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmEmigratingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmEmigratingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmCloneEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmCloneEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmBeingClonedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmBeingClonedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmCloneEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destFolder", "VSphereCloud::FolderEventArgument"],
      ["destName", "SOAP::SOAPString"],
      ["destHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmBeingClonedNoFolderEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmBeingClonedNoFolderEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmCloneEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destName", "SOAP::SOAPString"],
      ["destHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmCloneFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmCloneFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmCloneEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destFolder", "VSphereCloud::FolderEventArgument"],
      ["destName", "SOAP::SOAPString"],
      ["destHost", "VSphereCloud::HostEventArgument"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmClonedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmClonedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmCloneEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceVm", "VSphereCloud::VmEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmResourceReallocatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmResourceReallocatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmRenamedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRenamedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDateRolledBackEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDateRolledBackEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmNoNetworkAccessEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmNoNetworkAccessEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["destHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDiskFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDiskFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["disk", "SOAP::SOAPString"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFailedToPowerOnEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedToPowerOnEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFailedToPowerOffEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedToPowerOffEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFailedToSuspendEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedToSuspendEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFailedToResetEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedToResetEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFailedToShutdownGuestEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedToShutdownGuestEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFailedToRebootGuestEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedToRebootGuestEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFailedToStandbyGuestEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedToStandbyGuestEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmGuestShutdownEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmGuestShutdownEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmGuestRebootEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmGuestRebootEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmGuestStandbyEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmGuestStandbyEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmUpgradingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmUpgradingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["version", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmUpgradeCompleteEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmUpgradeCompleteEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["version", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmUpgradeFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmUpgradeFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmRestartedOnAlternateHostEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRestartedOnAlternateHostEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmPoweredOnEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["sourceHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configSpec", "VSphereCloud::VirtualMachineConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmMessageEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmMessageEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["message", "SOAP::SOAPString"],
      ["messageInfo", "VSphereCloud::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmMessageWarningEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmMessageWarningEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["message", "SOAP::SOAPString"],
      ["messageInfo", "VSphereCloud::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmMessageErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmMessageErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["message", "SOAP::SOAPString"],
      ["messageInfo", "VSphereCloud::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmConfigMissingEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigMissingEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmPowerOffOnIsolationEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmPowerOffOnIsolationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmPoweredOffEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["isolatedHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmShutdownOnIsolationEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmShutdownOnIsolationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmPoweredOffEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["isolatedHost", "VSphereCloud::HostEventArgument"],
      ["shutdownResult", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFailoverFailed,
    :schema_type => XSD::QName.new(NsVim25, "VmFailoverFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDasBeingResetEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDasBeingResetEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDasResetFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDasResetFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmMaxRestartCountReached,
    :schema_type => XSD::QName.new(NsVim25, "VmMaxRestartCountReached"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmMaxFTRestartCountReached,
    :schema_type => XSD::QName.new(NsVim25, "VmMaxFTRestartCountReached"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDasBeingResetWithScreenshotEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDasBeingResetWithScreenshotEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmDasBeingResetEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["screenshotFilePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotEnoughResourcesToStartVmEvent,
    :schema_type => XSD::QName.new(NsVim25, "NotEnoughResourcesToStartVmEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmUuidAssignedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmUuidAssignedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmInstanceUuidAssignedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmInstanceUuidAssignedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmUuidChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmUuidChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldUuid", "SOAP::SOAPString"],
      ["newUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmInstanceUuidChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmInstanceUuidChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldInstanceUuid", "SOAP::SOAPString"],
      ["newInstanceUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmWwnConflictEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmWwnConflictEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["conflictedVms", "VSphereCloud::VmEventArgument[]", [0, nil]],
      ["conflictedHosts", "VSphereCloud::HostEventArgument[]", [0, nil]],
      ["wwn", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmAcquiredMksTicketEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmAcquiredMksTicketEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmAcquiredTicketEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmAcquiredTicketEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["ticketType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostWwnConflictEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostWwnConflictEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["conflictedVms", "VSphereCloud::VmEventArgument[]", [0, nil]],
      ["conflictedHosts", "VSphereCloud::HostEventArgument[]", [0, nil]],
      ["wwn", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmWwnAssignedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmWwnAssignedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["nodeWwns", "SOAP::SOAPLong[]", [1, nil]],
      ["portWwns", "SOAP::SOAPLong[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmWwnChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmWwnChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["oldPortWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newPortWwns", "SOAP::SOAPLong[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmSecondaryAddedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmSecondaryAddedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceTurnedOffEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceTurnedOffEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceStateChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceStateChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldState", "VSphereCloud::VirtualMachineFaultToleranceState"],
      ["newState", "VSphereCloud::VirtualMachineFaultToleranceState"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmSecondaryDisabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmSecondaryDisabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmSecondaryDisabledBySystemEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmSecondaryDisabledBySystemEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmSecondaryEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmSecondaryEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmStartingSecondaryEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmStartingSecondaryEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmSecondaryStartedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmSecondaryStartedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFailedUpdatingSecondaryConfig,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedUpdatingSecondaryConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFailedStartingSecondaryEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedStartingSecondaryEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmTimedoutStartingSecondaryEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmTimedoutStartingSecondaryEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["timeout", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmNoCompatibleHostForSecondaryEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmNoCompatibleHostForSecondaryEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmPrimaryFailoverEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmPrimaryFailoverEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceVmTerminatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceVmTerminatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostWwnChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostWwnChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["oldPortWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newNodeWwns", "SOAP::SOAPLong[]", [0, nil]],
      ["newPortWwns", "SOAP::SOAPLong[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostAdminDisableEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostAdminDisableEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostAdminEnableEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostAdminEnableEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostEnableAdminFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostEnableAdminFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["permissions", "VSphereCloud::Permission[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFailedRelayoutOnVmfs2DatastoreEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedRelayoutOnVmfs2DatastoreEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFailedRelayoutEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedRelayoutEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmRelayoutSuccessfulEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRelayoutSuccessfulEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmRelayoutUpToDateEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmRelayoutUpToDateEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmConnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmConnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmPoweringOnWithCustomizedDVPortEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmPoweringOnWithCustomizedDVPortEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["vnic", "VSphereCloud::VnicPortArgument[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDasUpdateErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDasUpdateErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoMaintenanceModeDrsRecommendationForVM,
    :schema_type => XSD::QName.new(NsVim25, "NoMaintenanceModeDrsRecommendationForVM"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDasUpdateOkEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmDasUpdateOkEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScheduledTaskEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScheduledTaskCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScheduledTaskStartedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskStartedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScheduledTaskRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScheduledTaskReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScheduledTaskCompletedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskCompletedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScheduledTaskFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScheduledTaskEmailCompletedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskEmailCompletedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScheduledTaskEmailFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskEmailFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ScheduledTaskEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmStatusChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmStatusChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["source", "VSphereCloud::ManagedEntityEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["from", "SOAP::SOAPString"],
      ["to", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmActionTriggeredEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmActionTriggeredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["source", "VSphereCloud::ManagedEntityEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmEmailCompletedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmEmailCompletedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmEmailFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmEmailFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["to", "SOAP::SOAPString"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmSnmpCompletedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmSnmpCompletedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmSnmpFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmSnmpFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmScriptCompleteEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmScriptCompleteEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["script", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmScriptFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmScriptFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["script", "SOAP::SOAPString"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "AlarmReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AlarmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["alarm", "VSphereCloud::AlarmEventArgument"],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomFieldEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomFieldDefEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldDefEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomFieldEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomFieldDefAddedEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldDefAddedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomFieldDefEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomFieldDefRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldDefRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomFieldDefEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomFieldDefRenamedEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldDefRenamedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomFieldDefEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomFieldValueChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomFieldValueChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomFieldEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["fieldKey", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AuthorizationEvent,
    :schema_type => XSD::QName.new(NsVim25, "AuthorizationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PermissionEvent,
    :schema_type => XSD::QName.new(NsVim25, "PermissionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AuthorizationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PermissionAddedEvent,
    :schema_type => XSD::QName.new(NsVim25, "PermissionAddedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "PermissionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"],
      ["role", "VSphereCloud::RoleEventArgument"],
      ["propagate", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PermissionUpdatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "PermissionUpdatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "PermissionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"],
      ["role", "VSphereCloud::RoleEventArgument"],
      ["propagate", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PermissionRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "PermissionRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "PermissionEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedEntityEventArgument"],
      ["principal", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RoleEvent,
    :schema_type => XSD::QName.new(NsVim25, "RoleEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "AuthorizationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VSphereCloud::RoleEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RoleAddedEvent,
    :schema_type => XSD::QName.new(NsVim25, "RoleAddedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "RoleEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VSphereCloud::RoleEventArgument"],
      ["privilegeList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RoleUpdatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "RoleUpdatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "RoleEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VSphereCloud::RoleEventArgument"],
      ["privilegeList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RoleRemovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "RoleRemovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "RoleEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["role", "VSphereCloud::RoleEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreDestroyedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreDestroyedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreRenamedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreRenamedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreCapacityIncreasedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreCapacityIncreasedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["oldCapacity", "SOAP::SOAPLong"],
      ["newCapacity", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreDuplicatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreDuplicatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreFileEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreFileEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreFileCopiedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreFileCopiedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreFileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"],
      ["sourceDatastore", "VSphereCloud::DatastoreEventArgument"],
      ["sourceFile", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreFileMovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreFileMovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreFileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"],
      ["sourceDatastore", "VSphereCloud::DatastoreEventArgument"],
      ["sourceFile", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreFileDeletedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreFileDeletedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreFileEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["targetFile", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NonVIWorkloadDetectedOnDatastoreEvent,
    :schema_type => XSD::QName.new(NsVim25, "NonVIWorkloadDetectedOnDatastoreEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreIORMReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreIORMReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskEvent,
    :schema_type => XSD::QName.new(NsVim25, "TaskEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["info", "VSphereCloud::TaskInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskTimeoutEvent,
    :schema_type => XSD::QName.new(NsVim25, "TaskTimeoutEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["info", "VSphereCloud::TaskInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseEvent,
    :schema_type => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ServerLicenseExpiredEvent,
    :schema_type => XSD::QName.new(NsVim25, "ServerLicenseExpiredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["product", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostLicenseExpiredEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostLicenseExpiredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionLicenseExpiredEvent,
    :schema_type => XSD::QName.new(NsVim25, "VMotionLicenseExpiredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoLicenseEvent,
    :schema_type => XSD::QName.new(NsVim25, "NoLicenseEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["feature", "VSphereCloud::LicenseFeatureInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseServerUnavailableEvent,
    :schema_type => XSD::QName.new(NsVim25, "LicenseServerUnavailableEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseServerAvailableEvent,
    :schema_type => XSD::QName.new(NsVim25, "LicenseServerAvailableEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseExpiredEvent,
    :schema_type => XSD::QName.new(NsVim25, "LicenseExpiredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["feature", "VSphereCloud::LicenseFeatureInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidEditionEvent,
    :schema_type => XSD::QName.new(NsVim25, "InvalidEditionEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["feature", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInventoryFullEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostInventoryFullEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["capacity", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseRestrictedEvent,
    :schema_type => XSD::QName.new(NsVim25, "LicenseRestrictedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IncorrectHostInformationEvent,
    :schema_type => XSD::QName.new(NsVim25, "IncorrectHostInformationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnlicensedVirtualMachinesEvent,
    :schema_type => XSD::QName.new(NsVim25, "UnlicensedVirtualMachinesEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["unlicensed", "SOAP::SOAPInt"],
      ["available", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnlicensedVirtualMachinesFoundEvent,
    :schema_type => XSD::QName.new(NsVim25, "UnlicensedVirtualMachinesFoundEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["available", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AllVirtualMachinesLicensedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AllVirtualMachinesLicensedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseNonComplianceEvent,
    :schema_type => XSD::QName.new(NsVim25, "LicenseNonComplianceEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "LicenseEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["url", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrationEvent,
    :schema_type => XSD::QName.new(NsVim25, "MigrationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrationWarningEvent,
    :schema_type => XSD::QName.new(NsVim25, "MigrationWarningEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrationErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "MigrationErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrationHostWarningEvent,
    :schema_type => XSD::QName.new(NsVim25, "MigrationHostWarningEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"],
      ["dstHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrationHostErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "MigrationHostErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"],
      ["dstHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrationResourceWarningEvent,
    :schema_type => XSD::QName.new(NsVim25, "MigrationResourceWarningEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"],
      ["dstPool", "VSphereCloud::ResourcePoolEventArgument"],
      ["dstHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrationResourceErrorEvent,
    :schema_type => XSD::QName.new(NsVim25, "MigrationResourceErrorEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"],
      ["dstPool", "VSphereCloud::ResourcePoolEventArgument"],
      ["dstHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterEvent,
    :schema_type => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DasEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DasDisabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasDisabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DasAdmissionControlDisabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasAdmissionControlDisabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DasAdmissionControlEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasAdmissionControlEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DasHostFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasHostFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["failedHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DasHostIsolatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasHostIsolatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["isolatedHost", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DasClusterIsolatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasClusterIsolatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DasAgentUnavailableEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasAgentUnavailableEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DasAgentFoundEvent,
    :schema_type => XSD::QName.new(NsVim25, "DasAgentFoundEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientFailoverResourcesEvent,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientFailoverResourcesEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FailoverLevelRestored,
    :schema_type => XSD::QName.new(NsVim25, "FailoverLevelRestored"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterOvercommittedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ClusterOvercommittedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostOvercommittedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostOvercommittedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterOvercommittedEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterStatusChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ClusterStatusChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldStatus", "SOAP::SOAPString"],
      ["newStatus", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostStatusChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostStatusChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterStatusChangedEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldStatus", "SOAP::SOAPString"],
      ["newStatus", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ClusterCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::FolderEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDestroyedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDestroyedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["behavior", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsDisabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsDisabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "ClusterReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostMonitoringStateChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "HostMonitoringStateChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["state", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmHealthMonitoringStateChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmHealthMonitoringStateChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["state", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourcePoolEvent,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VSphereCloud::ResourcePoolEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourcePoolCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ResourcePoolEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VSphereCloud::ResourcePoolEventArgument"],
      ["parent", "VSphereCloud::ResourcePoolEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourcePoolDestroyedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolDestroyedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ResourcePoolEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VSphereCloud::ResourcePoolEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourcePoolMovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolMovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ResourcePoolEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VSphereCloud::ResourcePoolEventArgument"],
      ["oldParent", "VSphereCloud::ResourcePoolEventArgument"],
      ["newParent", "VSphereCloud::ResourcePoolEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourcePoolReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ResourcePoolEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VSphereCloud::ResourcePoolEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourceViolatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "ResourceViolatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ResourcePoolEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["resourcePool", "VSphereCloud::ResourcePoolEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmResourcePoolMovedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmResourcePoolMovedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["oldParent", "VSphereCloud::ResourcePoolEventArgument"],
      ["newParent", "VSphereCloud::ResourcePoolEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TemplateUpgradeEvent,
    :schema_type => XSD::QName.new(NsVim25, "TemplateUpgradeEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TemplateBeingUpgradedEvent,
    :schema_type => XSD::QName.new(NsVim25, "TemplateBeingUpgradedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "TemplateUpgradeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TemplateUpgradeFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "TemplateUpgradeFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "TemplateUpgradeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TemplateUpgradedEvent,
    :schema_type => XSD::QName.new(NsVim25, "TemplateUpgradedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "TemplateUpgradeEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["legacyTemplate", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationStartedEvent,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationStartedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationSucceeded,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSucceeded"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationFailed,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationUnknownFailure,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationUnknownFailure"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationSysprepFailed,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSysprepFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]],
      ["sysprepVersion", "SOAP::SOAPString"],
      ["systemVersion", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationLinuxIdentityFailed,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationLinuxIdentityFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationNetworkSetupFailed,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationNetworkSetupFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["logLocation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LockerMisconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "LockerMisconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["datastore", "VSphereCloud::DatastoreEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LockerReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "LockerReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldDatastore", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["newDatastore", "VSphereCloud::DatastoreEventArgument", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoDatastoresConfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "NoDatastoresConfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AdminPasswordNotChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "AdminPasswordNotChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LocalTSMEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "LocalTSMEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoteTSMEnabledEvent,
    :schema_type => XSD::QName.new(NsVim25, "RemoteTSMEnabledEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VimAccountPasswordChangedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VimAccountPasswordChangedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IScsiBootFailureEvent,
    :schema_type => XSD::QName.new(NsVim25, "IScsiBootFailureEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::FolderEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsRenamedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsRenamedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["configSpec", "VSphereCloud::DVSConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsUpgradeAvailableEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsUpgradeAvailableEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsUpgradeInProgressEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsUpgradeInProgressEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsUpgradeRejectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsUpgradeRejectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsUpgradedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsUpgradedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["productInfo", "VSphereCloud::DistributedVirtualSwitchProductSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsHostJoinedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsHostJoinedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostJoined", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsHostLeftEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsHostLeftEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostLeft", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsOutOfSyncHostArgument,
    :schema_type => XSD::QName.new(NsVim25, "DvsOutOfSyncHostArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["outOfSyncHost", "VSphereCloud::HostEventArgument"],
      ["configParamters", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDvsOutOfSyncHostArgument,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDvsOutOfSyncHostArgument"),
    :schema_element => [
      ["dvsOutOfSyncHostArgument", ["VSphereCloud::DvsOutOfSyncHostArgument[]", XSD::QName.new(NsVim25, "DvsOutOfSyncHostArgument")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OutOfSyncDvsHost,
    :schema_type => XSD::QName.new(NsVim25, "OutOfSyncDvsHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostOutOfSync", "VSphereCloud::DvsOutOfSyncHostArgument[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsHostWentOutOfSyncEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsHostWentOutOfSyncEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostOutOfSync", "VSphereCloud::DvsOutOfSyncHostArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsHostBackInSyncEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsHostBackInSyncEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostBackInSync", "VSphereCloud::HostEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsHostStatusUpdated,
    :schema_type => XSD::QName.new(NsVim25, "DvsHostStatusUpdated"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["hostMember", "VSphereCloud::HostEventArgument"],
      ["oldStatus", "SOAP::SOAPString", [0, 1]],
      ["newStatus", "SOAP::SOAPString", [0, 1]],
      ["oldStatusDetail", "SOAP::SOAPString", [0, 1]],
      ["newStatusDetail", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsPortCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsPortReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsPortDeletedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortDeletedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsPortConnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortConnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["connectee", "VSphereCloud::DistributedVirtualSwitchPortConnectee", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsPortDisconnectedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortDisconnectedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["connectee", "VSphereCloud::DistributedVirtualSwitchPortConnectee", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsPortLinkUpEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortLinkUpEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsPortLinkDownEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortLinkDownEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsPortJoinPortgroupEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortJoinPortgroupEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString"],
      ["portgroupName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsPortLeavePortgroupEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortLeavePortgroupEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["portgroupKey", "SOAP::SOAPString"],
      ["portgroupName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsPortBlockedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortBlockedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"],
      ["statusDetail", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsPortUnblockedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortUnblockedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsPortEnteredPassthruEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortEnteredPassthruEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsPortExitedPassthruEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsPortExitedPassthruEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["portKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsDestroyedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsDestroyedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsMergedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DvsMergedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["sourceDvs", "VSphereCloud::DvsEventArgument"],
      ["destinationDvs", "VSphereCloud::DvsEventArgument"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortgroupEvent,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "Event"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortgroupCreatedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupCreatedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVPortgroupEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortgroupRenamedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupRenamedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVPortgroupEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["oldName", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortgroupReconfiguredEvent,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupReconfiguredEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVPortgroupEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["configSpec", "VSphereCloud::DVPortgroupConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortgroupDestroyedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DVPortgroupDestroyedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DVPortgroupEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsInvocationFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsInvocationFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsRecoveredFromFailureEvent,
    :schema_type => XSD::QName.new(NsVim25, "DrsRecoveredFromFailureEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmReloadFromPathEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmReloadFromPathEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmReloadFromPathFailedEvent,
    :schema_type => XSD::QName.new(NsVim25, "VmReloadFromPathFailedEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmEvent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chainId", "SOAP::SOAPInt"],
      ["createdTime", "SOAP::SOAPDateTime"],
      ["userName", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::DatacenterEventArgument", [0, 1]],
      ["computeResource", "VSphereCloud::ComputeResourceEventArgument", [0, 1]],
      ["host", "VSphereCloud::HostEventArgument", [0, 1]],
      ["vm", "VSphereCloud::VmEventArgument", [0, 1]],
      ["ds", "VSphereCloud::DatastoreEventArgument", [0, 1]],
      ["net", "VSphereCloud::NetworkEventArgument", [0, 1]],
      ["dvs", "VSphereCloud::DvsEventArgument", [0, 1]],
      ["fullFormattedMessage", "SOAP::SOAPString", [0, 1]],
      ["changeTag", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["configPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EventArgument,
    :schema_type => XSD::QName.new(NsVim25, "EventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RoleEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "RoleEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["roleId", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EntityEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ManagedEntityEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "ManagedEntityEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FolderEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "FolderEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["folder", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatacenterEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "DatacenterEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ComputeResourceEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "ComputeResourceEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["computeResource", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourcePoolEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "ResourcePoolEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["resourcePool", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "HostEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostEventArgument"),
    :schema_element => [
      ["hostEventArgument", ["VSphereCloud::HostEventArgument[]", XSD::QName.new(NsVim25, "HostEventArgument")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "VmEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["vm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVmEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVmEventArgument"),
    :schema_element => [
      ["vmEventArgument", ["VSphereCloud::VmEventArgument[]", XSD::QName.new(NsVim25, "VmEventArgument")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetworkEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "NetworkEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["network", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlarmEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "AlarmEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["alarm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScheduledTaskEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["scheduledTask", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "ProfileEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["profile", "VSphereCloud::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsEventArgument,
    :schema_type => XSD::QName.new(NsVim25, "DvsEventArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "EntityEventArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["dvs", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EventArgDesc,
    :schema_type => XSD::QName.new(NsVim25, "EventArgDesc"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["description", "VSphereCloud::ElementDescription", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfEventArgDesc,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfEventArgDesc"),
    :schema_element => [
      ["eventArgDesc", ["VSphereCloud::EventArgDesc[]", XSD::QName.new(NsVim25, "EventArgDesc")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EventDescriptionEventDetail,
    :schema_type => XSD::QName.new(NsVim25, "EventDescriptionEventDetail"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["category", "SOAP::SOAPString"],
      ["formatOnDatacenter", "SOAP::SOAPString"],
      ["formatOnComputeResource", "SOAP::SOAPString"],
      ["formatOnHost", "SOAP::SOAPString"],
      ["formatOnVm", "SOAP::SOAPString"],
      ["fullFormat", "SOAP::SOAPString"],
      ["longDescription", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfEventDescriptionEventDetail,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfEventDescriptionEventDetail"),
    :schema_element => [
      ["eventDescriptionEventDetail", ["VSphereCloud::EventDescriptionEventDetail[]", XSD::QName.new(NsVim25, "EventDescriptionEventDetail")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EventDescription,
    :schema_type => XSD::QName.new(NsVim25, "EventDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["category", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["eventInfo", "VSphereCloud::EventDescriptionEventDetail[]", [1, nil]],
      ["enumeratedTypes", "VSphereCloud::EnumDescription[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EventFilterSpecByEntity,
    :schema_type => XSD::QName.new(NsVim25, "EventFilterSpecByEntity"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["recursion", "VSphereCloud::EventFilterSpecRecursionOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EventFilterSpecByTime,
    :schema_type => XSD::QName.new(NsVim25, "EventFilterSpecByTime"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["beginTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EventFilterSpecByUsername,
    :schema_type => XSD::QName.new(NsVim25, "EventFilterSpecByUsername"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["systemUser", "SOAP::SOAPBoolean"],
      ["userList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EventFilterSpec,
    :schema_type => XSD::QName.new(NsVim25, "EventFilterSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::EventFilterSpecByEntity", [0, 1]],
      ["time", "VSphereCloud::EventFilterSpecByTime", [0, 1]],
      ["userName", "VSphereCloud::EventFilterSpecByUsername", [0, 1]],
      ["eventChainId", "SOAP::SOAPInt", [0, 1]],
      ["alarm", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["scheduledTask", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["disableFullMessage", "SOAP::SOAPBoolean", [0, 1]],
      ["category", "SOAP::SOAPString[]", [0, nil]],
      ["type", "SOAP::SOAPString[]", [0, nil]],
      ["tag", "SOAP::SOAPString[]", [0, nil]],
      ["eventTypeId", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ActiveDirectoryFault,
    :schema_type => XSD::QName.new(NsVim25, "ActiveDirectoryFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AdminDisabled,
    :schema_type => XSD::QName.new(NsVim25, "AdminDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AdminNotDisabled,
    :schema_type => XSD::QName.new(NsVim25, "AdminNotDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AffinityConfigured,
    :schema_type => XSD::QName.new(NsVim25, "AffinityConfigured"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["configuredAffinity", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AgentInstallFailed,
    :schema_type => XSD::QName.new(NsVim25, "AgentInstallFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["statusCode", "SOAP::SOAPInt", [0, 1]],
      ["installerOutput", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlreadyBeingManaged,
    :schema_type => XSD::QName.new(NsVim25, "AlreadyBeingManaged"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlreadyConnected,
    :schema_type => XSD::QName.new(NsVim25, "AlreadyConnected"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlreadyExists,
    :schema_type => XSD::QName.new(NsVim25, "AlreadyExists"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlreadyUpgraded,
    :schema_type => XSD::QName.new(NsVim25, "AlreadyUpgraded"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ApplicationQuiesceFault,
    :schema_type => XSD::QName.new(NsVim25, "ApplicationQuiesceFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AuthMinimumAdminPermission,
    :schema_type => XSD::QName.new(NsVim25, "AuthMinimumAdminPermission"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::BlockedByFirewall,
    :schema_type => XSD::QName.new(NsVim25, "BlockedByFirewall"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAccessFile,
    :schema_type => XSD::QName.new(NsVim25, "CannotAccessFile"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAccessLocalSource,
    :schema_type => XSD::QName.new(NsVim25, "CannotAccessLocalSource"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAccessNetwork,
    :schema_type => XSD::QName.new(NsVim25, "CannotAccessNetwork"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessVmDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAccessVmComponent,
    :schema_type => XSD::QName.new(NsVim25, "CannotAccessVmComponent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAccessVmConfig,
    :schema_type => XSD::QName.new(NsVim25, "CannotAccessVmConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessVmComponent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAccessVmDevice,
    :schema_type => XSD::QName.new(NsVim25, "CannotAccessVmDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessVmComponent"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAccessVmDisk,
    :schema_type => XSD::QName.new(NsVim25, "CannotAccessVmDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessVmDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAddHostWithFTVmAsStandalone,
    :schema_type => XSD::QName.new(NsVim25, "CannotAddHostWithFTVmAsStandalone"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAddHostWithFTVmToDifferentCluster,
    :schema_type => XSD::QName.new(NsVim25, "CannotAddHostWithFTVmToDifferentCluster"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAddHostWithFTVmToNonHACluster,
    :schema_type => XSD::QName.new(NsVim25, "CannotAddHostWithFTVmToNonHACluster"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotChangeDrsBehaviorForFtSecondary,
    :schema_type => XSD::QName.new(NsVim25, "CannotChangeDrsBehaviorForFtSecondary"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotChangeHaSettingsForFtSecondary,
    :schema_type => XSD::QName.new(NsVim25, "CannotChangeHaSettingsForFtSecondary"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotCreateFile,
    :schema_type => XSD::QName.new(NsVim25, "CannotCreateFile"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotDecryptPasswords,
    :schema_type => XSD::QName.new(NsVim25, "CannotDecryptPasswords"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotDeleteFile,
    :schema_type => XSD::QName.new(NsVim25, "CannotDeleteFile"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotDisableDrsOnClustersWithVApps,
    :schema_type => XSD::QName.new(NsVim25, "CannotDisableDrsOnClustersWithVApps"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotDisableSnapshot,
    :schema_type => XSD::QName.new(NsVim25, "CannotDisableSnapshot"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotDisconnectHostWithFaultToleranceVm,
    :schema_type => XSD::QName.new(NsVim25, "CannotDisconnectHostWithFaultToleranceVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotModifyConfigCpuRequirements,
    :schema_type => XSD::QName.new(NsVim25, "CannotModifyConfigCpuRequirements"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotMoveFaultToleranceVm,
    :schema_type => XSD::QName.new(NsVim25, "CannotMoveFaultToleranceVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["moveType", "SOAP::SOAPString"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotMoveHostWithFaultToleranceVm,
    :schema_type => XSD::QName.new(NsVim25, "CannotMoveHostWithFaultToleranceVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClockSkew,
    :schema_type => XSD::QName.new(NsVim25, "ClockSkew"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CloneFromSnapshotNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "CloneFromSnapshotNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConcurrentAccess,
    :schema_type => XSD::QName.new(NsVim25, "ConcurrentAccess"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConnectedIso,
    :schema_type => XSD::QName.new(NsVim25, "ConnectedIso"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["cdrom", "VSphereCloud::VirtualCdrom"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CpuCompatibilityUnknown,
    :schema_type => XSD::QName.new(NsVim25, "CpuCompatibilityUnknown"),
    :schema_basetype => XSD::QName.new(NsVim25, "CpuIncompatible"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CpuHotPlugNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "CpuHotPlugNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CpuIncompatible,
    :schema_type => XSD::QName.new(NsVim25, "CpuIncompatible"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CpuIncompatible1ECX,
    :schema_type => XSD::QName.new(NsVim25, "CpuIncompatible1ECX"),
    :schema_basetype => XSD::QName.new(NsVim25, "CpuIncompatible"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["sse3", "SOAP::SOAPBoolean"],
      ["ssse3", "SOAP::SOAPBoolean"],
      ["sse41", "SOAP::SOAPBoolean"],
      ["sse42", "SOAP::SOAPBoolean"],
      ["other", "SOAP::SOAPBoolean"],
      ["otherOnly", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CpuIncompatible81EDX,
    :schema_type => XSD::QName.new(NsVim25, "CpuIncompatible81EDX"),
    :schema_basetype => XSD::QName.new(NsVim25, "CpuIncompatible"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["nx", "SOAP::SOAPBoolean"],
      ["ffxsr", "SOAP::SOAPBoolean"],
      ["rdtscp", "SOAP::SOAPBoolean"],
      ["lm", "SOAP::SOAPBoolean"],
      ["other", "SOAP::SOAPBoolean"],
      ["otherOnly", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationFault,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationPending,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationPending"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DVPortNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceBackingNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DasConfigFault,
    :schema_type => XSD::QName.new(NsVim25, "DasConfigFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["output", "SOAP::SOAPString", [0, 1]],
      ["event", "VSphereCloud::Event[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatabaseError,
    :schema_type => XSD::QName.new(NsVim25, "DatabaseError"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatacenterMismatchArgument,
    :schema_type => XSD::QName.new(NsVim25, "DatacenterMismatchArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["inputDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDatacenterMismatchArgument,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDatacenterMismatchArgument"),
    :schema_element => [
      ["datacenterMismatchArgument", ["VSphereCloud::DatacenterMismatchArgument[]", XSD::QName.new(NsVim25, "DatacenterMismatchArgument")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatacenterMismatch,
    :schema_type => XSD::QName.new(NsVim25, "DatacenterMismatch"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidArgument", "VSphereCloud::DatacenterMismatchArgument[]", [1, nil]],
      ["expectedDatacenter", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreNotWritableOnHost,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreNotWritableOnHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDatastore"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestinationSwitchFull,
    :schema_type => XSD::QName.new(NsVim25, "DestinationSwitchFull"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessNetwork"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceBackingNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DeviceBackingNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceControllerNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DeviceControllerNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["controller", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceHotPlugNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DeviceHotPlugNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceNotFound,
    :schema_type => XSD::QName.new(NsVim25, "DeviceNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceUnsupportedForVmPlatform,
    :schema_type => XSD::QName.new(NsVim25, "DeviceUnsupportedForVmPlatform"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceUnsupportedForVmVersion,
    :schema_type => XSD::QName.new(NsVim25, "DeviceUnsupportedForVmVersion"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["currentVersion", "SOAP::SOAPString"],
      ["expectedVersion", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableAdminNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DisableAdminNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisallowedDiskModeChange,
    :schema_type => XSD::QName.new(NsVim25, "DisallowedDiskModeChange"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisallowedMigrationDeviceAttached,
    :schema_type => XSD::QName.new(NsVim25, "DisallowedMigrationDeviceAttached"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisallowedOperationOnFailoverHost,
    :schema_type => XSD::QName.new(NsVim25, "DisallowedOperationOnFailoverHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["hostname", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DiskMoveTypeNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DiskMoveTypeNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DiskNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "DiskNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["disk", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DomainNotFound,
    :schema_type => XSD::QName.new(NsVim25, "DomainNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "ActiveDirectoryFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]],
      ["domainName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsDisabledOnVm,
    :schema_type => XSD::QName.new(NsVim25, "DrsDisabledOnVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsVmotionIncompatibleFault,
    :schema_type => XSD::QName.new(NsVim25, "DrsVmotionIncompatibleFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DuplicateName,
    :schema_type => XSD::QName.new(NsVim25, "DuplicateName"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["object", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsFault,
    :schema_type => XSD::QName.new(NsVim25, "DvsFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsNotAuthorized,
    :schema_type => XSD::QName.new(NsVim25, "DvsNotAuthorized"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["sessionExtensionKey", "SOAP::SOAPString", [0, 1]],
      ["dvsExtensionKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsOperationBulkFaultFaultOnHost,
    :schema_type => XSD::QName.new(NsVim25, "DvsOperationBulkFaultFaultOnHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDvsOperationBulkFaultFaultOnHost,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDvsOperationBulkFaultFaultOnHost"),
    :schema_element => [
      ["dvsOperationBulkFaultFaultOnHost", ["VSphereCloud::DvsOperationBulkFaultFaultOnHost[]", XSD::QName.new(NsVim25, "DvsOperationBulkFaultFaultOnHost")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsOperationBulkFault,
    :schema_type => XSD::QName.new(NsVim25, "DvsOperationBulkFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostFault", "VSphereCloud::DvsOperationBulkFaultFaultOnHost[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsScopeViolated,
    :schema_type => XSD::QName.new(NsVim25, "DvsScopeViolated"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["scope", "VSphereCloud::ManagedObjectReference[]", [1, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailed,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotSupportedHostInCluster"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedCPUFeaturesForMode,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedCPUFeaturesForMode"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedCPUModel,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedCPUModel"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedCPUModelForMode,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedCPUModelForMode"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedCPUVendor,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedCPUVendor"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["clusterCPUVendor", "SOAP::SOAPString"],
      ["hostCPUVendor", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedCPUVendorUnknown,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedCPUVendorUnknown"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedHostDisconnected,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedHostDisconnected"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedHostSoftware,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedHostSoftware"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedHostSoftwareForMode,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedHostSoftwareForMode"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedVmActive,
    :schema_type => XSD::QName.new(NsVim25, "EVCAdmissionFailedVmActive"),
    :schema_basetype => XSD::QName.new(NsVim25, "EVCAdmissionFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EightHostLimitViolated,
    :schema_type => XSD::QName.new(NsVim25, "EightHostLimitViolated"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExpiredAddonLicense,
    :schema_type => XSD::QName.new(NsVim25, "ExpiredAddonLicense"),
    :schema_basetype => XSD::QName.new(NsVim25, "ExpiredFeatureLicense"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExpiredEditionLicense,
    :schema_type => XSD::QName.new(NsVim25, "ExpiredEditionLicense"),
    :schema_basetype => XSD::QName.new(NsVim25, "ExpiredFeatureLicense"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExpiredFeatureLicense,
    :schema_type => XSD::QName.new(NsVim25, "ExpiredFeatureLicense"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtendedFault,
    :schema_type => XSD::QName.new(NsVim25, "ExtendedFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["faultTypeId", "SOAP::SOAPString"],
      ["data", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FailToLockFaultToleranceVMs,
    :schema_type => XSD::QName.new(NsVim25, "FailToLockFaultToleranceVMs"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["alreadyLockedVm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultToleranceAntiAffinityViolated,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceAntiAffinityViolated"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultToleranceCannotEditMem,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceCannotEditMem"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["vm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultToleranceCpuIncompatible,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceCpuIncompatible"),
    :schema_basetype => XSD::QName.new(NsVim25, "CpuIncompatible"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["model", "SOAP::SOAPBoolean"],
      ["family", "SOAP::SOAPBoolean"],
      ["stepping", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultToleranceNeedsThickDisk,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceNeedsThickDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultToleranceNotLicensed,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceNotLicensed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultToleranceNotSameBuild,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceNotSameBuild"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["build", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultTolerancePrimaryPowerOnNotAttempted,
    :schema_type => XSD::QName.new(NsVim25, "FaultTolerancePrimaryPowerOnNotAttempted"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["secondaryVm", "VSphereCloud::ManagedObjectReference"],
      ["primaryVm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileAlreadyExists,
    :schema_type => XSD::QName.new(NsVim25, "FileAlreadyExists"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileBackedPortNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "FileBackedPortNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileFault,
    :schema_type => XSD::QName.new(NsVim25, "FileFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileLocked,
    :schema_type => XSD::QName.new(NsVim25, "FileLocked"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileNotFound,
    :schema_type => XSD::QName.new(NsVim25, "FileNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileNotWritable,
    :schema_type => XSD::QName.new(NsVim25, "FileNotWritable"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileTooLarge,
    :schema_type => XSD::QName.new(NsVim25, "FileTooLarge"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"],
      ["datastore", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FilesystemQuiesceFault,
    :schema_type => XSD::QName.new(NsVim25, "FilesystemQuiesceFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FtIssuesOnHost,
    :schema_type => XSD::QName.new(NsVim25, "FtIssuesOnHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["hostName", "SOAP::SOAPString"],
      ["errors", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FullStorageVMotionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "FullStorageVMotionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFeatureNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GenericDrsFault,
    :schema_type => XSD::QName.new(NsVim25, "GenericDrsFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostFaults", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GenericVmConfigFault,
    :schema_type => XSD::QName.new(NsVim25, "GenericVmConfigFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HAErrorsAtDest,
    :schema_type => XSD::QName.new(NsVim25, "HAErrorsAtDest"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConfigFailed,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["failure", "VSphereCloud::LocalizedMethodFault[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConfigFault,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConnectFault,
    :schema_type => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInDomain,
    :schema_type => XSD::QName.new(NsVim25, "HostInDomain"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIncompatibleForFaultTolerance,
    :schema_type => XSD::QName.new(NsVim25, "HostIncompatibleForFaultTolerance"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIncompatibleForRecordReplay,
    :schema_type => XSD::QName.new(NsVim25, "HostIncompatibleForRecordReplay"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInventoryFull,
    :schema_type => XSD::QName.new(NsVim25, "HostInventoryFull"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["capacity", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPowerOpFailed,
    :schema_type => XSD::QName.new(NsVim25, "HostPowerOpFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HotSnapshotMoveNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "HotSnapshotMoveNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotCopyNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IDEDiskNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "IDEDiskNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DiskNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["disk", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IORMNotSupportedHostOnDatastore,
    :schema_type => XSD::QName.new(NsVim25, "IORMNotSupportedHostOnDatastore"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["datastoreName", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InUseFeatureManipulationDisallowed,
    :schema_type => XSD::QName.new(NsVim25, "InUseFeatureManipulationDisallowed"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InaccessibleDatastore,
    :schema_type => XSD::QName.new(NsVim25, "InaccessibleDatastore"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDatastore"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IncompatibleDefaultDevice,
    :schema_type => XSD::QName.new(NsVim25, "IncompatibleDefaultDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IncompatibleHostForFtSecondary,
    :schema_type => XSD::QName.new(NsVim25, "IncompatibleHostForFtSecondary"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IncompatibleSetting,
    :schema_type => XSD::QName.new(NsVim25, "IncompatibleSetting"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["conflictingProperty", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IncorrectFileType,
    :schema_type => XSD::QName.new(NsVim25, "IncorrectFileType"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IncorrectHostInformation,
    :schema_type => XSD::QName.new(NsVim25, "IncorrectHostInformation"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IndependentDiskVMotionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "IndependentDiskVMotionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFeatureNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientCpuResourcesFault,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientCpuResourcesFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientFailoverResourcesFault,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientFailoverResourcesFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientHostCapacityFault,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientHostCapacityFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientHostCpuCapacityFault,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientHostCpuCapacityFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientHostCapacityFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientHostMemoryCapacityFault,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientHostMemoryCapacityFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientHostCapacityFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientMemoryResourcesFault,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientMemoryResourcesFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientPerCpuCapacity,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientPerCpuCapacity"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientHostCapacityFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientResourcesFault,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientStandbyCpuResource,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientStandbyCpuResource"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientStandbyResource"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["available", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientStandbyMemoryResource,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientStandbyMemoryResource"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientStandbyResource"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["available", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientStandbyResource,
    :schema_type => XSD::QName.new(NsVim25, "InsufficientStandbyResource"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidAffinitySettingFault,
    :schema_type => XSD::QName.new(NsVim25, "InvalidAffinitySettingFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidBmcRole,
    :schema_type => XSD::QName.new(NsVim25, "InvalidBmcRole"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidBundle,
    :schema_type => XSD::QName.new(NsVim25, "InvalidBundle"),
    :schema_basetype => XSD::QName.new(NsVim25, "PlatformConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidClientCertificate,
    :schema_type => XSD::QName.new(NsVim25, "InvalidClientCertificate"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidLogin"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidController,
    :schema_type => XSD::QName.new(NsVim25, "InvalidController"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["controllerKey", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDasRestartPriorityForFtVm,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDasRestartPriorityForFtVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDatastore,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDatastore"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDatastorePath,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDatastorePath"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDatastore"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["datastorePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDeviceBacking,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDeviceBacking"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDeviceOperation,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDeviceOperation"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["badOp", "VSphereCloud::VirtualDeviceConfigSpecOperation", [0, 1]],
      ["badFileOp", "VSphereCloud::VirtualDeviceConfigSpecFileOperation", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDeviceSpec,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidVmConfig"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDiskFormat,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDiskFormat"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidFormat"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDrsBehaviorForFtVm,
    :schema_type => XSD::QName.new(NsVim25, "InvalidDrsBehaviorForFtVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidEditionLicense,
    :schema_type => XSD::QName.new(NsVim25, "InvalidEditionLicense"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidEvent,
    :schema_type => XSD::QName.new(NsVim25, "InvalidEvent"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidFolder,
    :schema_type => XSD::QName.new(NsVim25, "InvalidFolder"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["target", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidFormat,
    :schema_type => XSD::QName.new(NsVim25, "InvalidFormat"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidHostName,
    :schema_type => XSD::QName.new(NsVim25, "InvalidHostName"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidHostState,
    :schema_type => XSD::QName.new(NsVim25, "InvalidHostState"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidState"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidIndexArgument,
    :schema_type => XSD::QName.new(NsVim25, "InvalidIndexArgument"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidArgument"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidIpmiLoginInfo,
    :schema_type => XSD::QName.new(NsVim25, "InvalidIpmiLoginInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidIpmiMacAddress,
    :schema_type => XSD::QName.new(NsVim25, "InvalidIpmiMacAddress"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["userProvidedMacAddress", "SOAP::SOAPString"],
      ["observedMacAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidLicense,
    :schema_type => XSD::QName.new(NsVim25, "InvalidLicense"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["licenseContent", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidLocale,
    :schema_type => XSD::QName.new(NsVim25, "InvalidLocale"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidLogin,
    :schema_type => XSD::QName.new(NsVim25, "InvalidLogin"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidName,
    :schema_type => XSD::QName.new(NsVim25, "InvalidName"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidNasCredentials,
    :schema_type => XSD::QName.new(NsVim25, "InvalidNasCredentials"),
    :schema_basetype => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidNetworkInType,
    :schema_type => XSD::QName.new(NsVim25, "InvalidNetworkInType"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidNetworkResource,
    :schema_type => XSD::QName.new(NsVim25, "InvalidNetworkResource"),
    :schema_basetype => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidOperationOnSecondaryVm,
    :schema_type => XSD::QName.new(NsVim25, "InvalidOperationOnSecondaryVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidPowerState,
    :schema_type => XSD::QName.new(NsVim25, "InvalidPowerState"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidState"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["requestedState", "VSphereCloud::VirtualMachinePowerState", [0, 1]],
      ["existingState", "VSphereCloud::VirtualMachinePowerState"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidPrivilege,
    :schema_type => XSD::QName.new(NsVim25, "InvalidPrivilege"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["privilege", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidPropertyType,
    :schema_type => XSD::QName.new(NsVim25, "InvalidPropertyType"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidPropertyValue,
    :schema_type => XSD::QName.new(NsVim25, "InvalidPropertyValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidResourcePoolStructureFault,
    :schema_type => XSD::QName.new(NsVim25, "InvalidResourcePoolStructureFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidSnapshotFormat,
    :schema_type => XSD::QName.new(NsVim25, "InvalidSnapshotFormat"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidFormat"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidState,
    :schema_type => XSD::QName.new(NsVim25, "InvalidState"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidVmConfig,
    :schema_type => XSD::QName.new(NsVim25, "InvalidVmConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InventoryHasStandardAloneHosts,
    :schema_type => XSD::QName.new(NsVim25, "InventoryHasStandardAloneHosts"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hosts", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IpHostnameGeneratorError,
    :schema_type => XSD::QName.new(NsVim25, "IpHostnameGeneratorError"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LegacyNetworkInterfaceInUse,
    :schema_type => XSD::QName.new(NsVim25, "LegacyNetworkInterfaceInUse"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessNetwork"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseAssignmentFailed,
    :schema_type => XSD::QName.new(NsVim25, "LicenseAssignmentFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseDowngradeDisallowed,
    :schema_type => XSD::QName.new(NsVim25, "LicenseDowngradeDisallowed"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["edition", "SOAP::SOAPString"],
      ["entityId", "SOAP::SOAPString"],
      ["features", "VSphereCloud::KeyAnyValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseEntityNotFound,
    :schema_type => XSD::QName.new(NsVim25, "LicenseEntityNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["entityId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseExpired,
    :schema_type => XSD::QName.new(NsVim25, "LicenseExpired"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseKeyEntityMismatch,
    :schema_type => XSD::QName.new(NsVim25, "LicenseKeyEntityMismatch"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseRestricted,
    :schema_type => XSD::QName.new(NsVim25, "LicenseRestricted"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseServerUnavailable,
    :schema_type => XSD::QName.new(NsVim25, "LicenseServerUnavailable"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseSourceUnavailable,
    :schema_type => XSD::QName.new(NsVim25, "LicenseSourceUnavailable"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["licenseSource", "VSphereCloud::LicenseSource"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LimitExceeded,
    :schema_type => XSD::QName.new(NsVim25, "LimitExceeded"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["limit", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LinuxVolumeNotClean,
    :schema_type => XSD::QName.new(NsVim25, "LinuxVolumeNotClean"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LogBundlingFailed,
    :schema_type => XSD::QName.new(NsVim25, "LogBundlingFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MaintenanceModeFileMove,
    :schema_type => XSD::QName.new(NsVim25, "MaintenanceModeFileMove"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MemoryHotPlugNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "MemoryHotPlugNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MemorySizeNotRecommended,
    :schema_type => XSD::QName.new(NsVim25, "MemorySizeNotRecommended"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["memorySizeMB", "SOAP::SOAPInt"],
      ["minMemorySizeMB", "SOAP::SOAPInt"],
      ["maxMemorySizeMB", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MemorySizeNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "MemorySizeNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["memorySizeMB", "SOAP::SOAPInt"],
      ["minMemorySizeMB", "SOAP::SOAPInt"],
      ["maxMemorySizeMB", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MemorySnapshotOnIndependentDisk,
    :schema_type => XSD::QName.new(NsVim25, "MemorySnapshotOnIndependentDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MethodAlreadyDisabledFault,
    :schema_type => XSD::QName.new(NsVim25, "MethodAlreadyDisabledFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["sourceId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MethodDisabled,
    :schema_type => XSD::QName.new(NsVim25, "MethodDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "RuntimeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["source", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrationDisabled,
    :schema_type => XSD::QName.new(NsVim25, "MigrationDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrationFault,
    :schema_type => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrationFeatureNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "MigrationFeatureNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrationNotReady,
    :schema_type => XSD::QName.new(NsVim25, "MigrationNotReady"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MismatchedBundle,
    :schema_type => XSD::QName.new(NsVim25, "MismatchedBundle"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["bundleUuid", "SOAP::SOAPString"],
      ["hostUuid", "SOAP::SOAPString"],
      ["bundleBuildNumber", "SOAP::SOAPInt"],
      ["hostBuildNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MismatchedNetworkPolicies,
    :schema_type => XSD::QName.new(NsVim25, "MismatchedNetworkPolicies"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MismatchedVMotionNetworkNames,
    :schema_type => XSD::QName.new(NsVim25, "MismatchedVMotionNetworkNames"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["sourceNetwork", "SOAP::SOAPString"],
      ["destNetwork", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingBmcSupport,
    :schema_type => XSD::QName.new(NsVim25, "MissingBmcSupport"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingController,
    :schema_type => XSD::QName.new(NsVim25, "MissingController"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidDeviceSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingLinuxCustResources,
    :schema_type => XSD::QName.new(NsVim25, "MissingLinuxCustResources"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingNetworkIpConfig,
    :schema_type => XSD::QName.new(NsVim25, "MissingNetworkIpConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingPowerOffConfiguration,
    :schema_type => XSD::QName.new(NsVim25, "MissingPowerOffConfiguration"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingPowerOnConfiguration,
    :schema_type => XSD::QName.new(NsVim25, "MissingPowerOnConfiguration"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingWindowsCustResources,
    :schema_type => XSD::QName.new(NsVim25, "MissingWindowsCustResources"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MountError,
    :schema_type => XSD::QName.new(NsVim25, "MountError"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["diskIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MultipleCertificatesVerifyFaultThumbprintData,
    :schema_type => XSD::QName.new(NsVim25, "MultipleCertificatesVerifyFaultThumbprintData"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["port", "SOAP::SOAPInt"],
      ["thumbprint", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfMultipleCertificatesVerifyFaultThumbprintData,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfMultipleCertificatesVerifyFaultThumbprintData"),
    :schema_element => [
      ["multipleCertificatesVerifyFaultThumbprintData", ["VSphereCloud::MultipleCertificatesVerifyFaultThumbprintData[]", XSD::QName.new(NsVim25, "MultipleCertificatesVerifyFaultThumbprintData")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MultipleCertificatesVerifyFault,
    :schema_type => XSD::QName.new(NsVim25, "MultipleCertificatesVerifyFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["thumbprintData", "VSphereCloud::MultipleCertificatesVerifyFaultThumbprintData[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MultipleSnapshotsNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "MultipleSnapshotsNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NasConfigFault,
    :schema_type => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NasConnectionLimitReached,
    :schema_type => XSD::QName.new(NsVim25, "NasConnectionLimitReached"),
    :schema_basetype => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NasSessionCredentialConflict,
    :schema_type => XSD::QName.new(NsVim25, "NasSessionCredentialConflict"),
    :schema_basetype => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NasVolumeNotMounted,
    :schema_type => XSD::QName.new(NsVim25, "NasVolumeNotMounted"),
    :schema_basetype => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetworkCopyFault,
    :schema_type => XSD::QName.new(NsVim25, "NetworkCopyFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetworkInaccessible,
    :schema_type => XSD::QName.new(NsVim25, "NetworkInaccessible"),
    :schema_basetype => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetworksMayNotBeTheSame,
    :schema_type => XSD::QName.new(NsVim25, "NetworksMayNotBeTheSame"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NicSettingMismatch,
    :schema_type => XSD::QName.new(NsVim25, "NicSettingMismatch"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["numberOfNicsInSpec", "SOAP::SOAPInt"],
      ["numberOfNicsInVM", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoActiveHostInCluster,
    :schema_type => XSD::QName.new(NsVim25, "NoActiveHostInCluster"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidState"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["computeResource", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoAvailableIp,
    :schema_type => XSD::QName.new(NsVim25, "NoAvailableIp"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["network", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoClientCertificate,
    :schema_type => XSD::QName.new(NsVim25, "NoClientCertificate"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoCompatibleHardAffinityHost,
    :schema_type => XSD::QName.new(NsVim25, "NoCompatibleHardAffinityHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoCompatibleHost,
    :schema_type => XSD::QName.new(NsVim25, "NoCompatibleHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoCompatibleHostWithAccessToDevice,
    :schema_type => XSD::QName.new(NsVim25, "NoCompatibleHostWithAccessToDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "NoCompatibleHost"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoCompatibleSoftAffinityHost,
    :schema_type => XSD::QName.new(NsVim25, "NoCompatibleSoftAffinityHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoDiskFound,
    :schema_type => XSD::QName.new(NsVim25, "NoDiskFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoDiskSpace,
    :schema_type => XSD::QName.new(NsVim25, "NoDiskSpace"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"],
      ["datastore", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoDisksToCustomize,
    :schema_type => XSD::QName.new(NsVim25, "NoDisksToCustomize"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoGateway,
    :schema_type => XSD::QName.new(NsVim25, "NoGateway"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoGuestHeartbeat,
    :schema_type => XSD::QName.new(NsVim25, "NoGuestHeartbeat"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoHost,
    :schema_type => XSD::QName.new(NsVim25, "NoHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoHostSuitableForFtSecondary,
    :schema_type => XSD::QName.new(NsVim25, "NoHostSuitableForFtSecondary"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoLicenseServerConfigured,
    :schema_type => XSD::QName.new(NsVim25, "NoLicenseServerConfigured"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoPeerHostFound,
    :schema_type => XSD::QName.new(NsVim25, "NoPeerHostFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostPowerOpFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoPermission,
    :schema_type => XSD::QName.new(NsVim25, "NoPermission"),
    :schema_basetype => XSD::QName.new(NsVim25, "SecurityError"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["object", "VSphereCloud::ManagedObjectReference"],
      ["privilegeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoPermissionOnAD,
    :schema_type => XSD::QName.new(NsVim25, "NoPermissionOnAD"),
    :schema_basetype => XSD::QName.new(NsVim25, "ActiveDirectoryFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoPermissionOnHost,
    :schema_type => XSD::QName.new(NsVim25, "NoPermissionOnHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoPermissionOnNasVolume,
    :schema_type => XSD::QName.new(NsVim25, "NoPermissionOnNasVolume"),
    :schema_basetype => XSD::QName.new(NsVim25, "NasConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoSubjectName,
    :schema_type => XSD::QName.new(NsVim25, "NoSubjectName"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoVcManagedIpConfigured,
    :schema_type => XSD::QName.new(NsVim25, "NoVcManagedIpConfigured"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoVirtualNic,
    :schema_type => XSD::QName.new(NsVim25, "NoVirtualNic"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoVmInVApp,
    :schema_type => XSD::QName.new(NsVim25, "NoVmInVApp"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NonADUserRequired,
    :schema_type => XSD::QName.new(NsVim25, "NonADUserRequired"),
    :schema_basetype => XSD::QName.new(NsVim25, "ActiveDirectoryFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NonHomeRDMVMotionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "NonHomeRDMVMotionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFeatureNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NonPersistentDisksNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "NonPersistentDisksNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotAuthenticated,
    :schema_type => XSD::QName.new(NsVim25, "NotAuthenticated"),
    :schema_basetype => XSD::QName.new(NsVim25, "NoPermission"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["object", "VSphereCloud::ManagedObjectReference"],
      ["privilegeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotEnoughCpus,
    :schema_type => XSD::QName.new(NsVim25, "NotEnoughCpus"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["numCpuDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotEnoughLogicalCpus,
    :schema_type => XSD::QName.new(NsVim25, "NotEnoughLogicalCpus"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughCpus"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["numCpuDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotFound,
    :schema_type => XSD::QName.new(NsVim25, "NotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotSupportedDeviceForFT,
    :schema_type => XSD::QName.new(NsVim25, "NotSupportedDeviceForFT"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString", [0, 1]],
      ["deviceType", "SOAP::SOAPString"],
      ["deviceLabel", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotSupportedHost,
    :schema_type => XSD::QName.new(NsVim25, "NotSupportedHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotSupportedHostInCluster,
    :schema_type => XSD::QName.new(NsVim25, "NotSupportedHostInCluster"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotSupportedHost"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotSupportedHostInDvs,
    :schema_type => XSD::QName.new(NsVim25, "NotSupportedHostInDvs"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotSupportedHost"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["switchProductSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotUserConfigurableProperty,
    :schema_type => XSD::QName.new(NsVim25, "NotUserConfigurableProperty"),
    :schema_basetype => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NumVirtualCpusExceedsLimit,
    :schema_type => XSD::QName.new(NsVim25, "NumVirtualCpusExceedsLimit"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["maxSupportedVcpus", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NumVirtualCpusIncompatible,
    :schema_type => XSD::QName.new(NsVim25, "NumVirtualCpusIncompatible"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"],
      ["numCpu", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NumVirtualCpusNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "NumVirtualCpusNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["maxSupportedVcpusDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OutOfBounds,
    :schema_type => XSD::QName.new(NsVim25, "OutOfBounds"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["argumentName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfAttribute,
    :schema_type => XSD::QName.new(NsVim25, "OvfAttribute"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfConnectedDevice,
    :schema_type => XSD::QName.new(NsVim25, "OvfConnectedDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfHardwareExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfConnectedDeviceFloppy,
    :schema_type => XSD::QName.new(NsVim25, "OvfConnectedDeviceFloppy"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfConnectedDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfConnectedDeviceIso,
    :schema_type => XSD::QName.new(NsVim25, "OvfConnectedDeviceIso"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfConnectedDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfConstraint,
    :schema_type => XSD::QName.new(NsVim25, "OvfConstraint"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfDiskMappingNotFound,
    :schema_type => XSD::QName.new(NsVim25, "OvfDiskMappingNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["diskName", "SOAP::SOAPString"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfDiskOrderConstraint,
    :schema_type => XSD::QName.new(NsVim25, "OvfDiskOrderConstraint"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfConstraint"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfDuplicateElement,
    :schema_type => XSD::QName.new(NsVim25, "OvfDuplicateElement"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfDuplicatedElementBoundary,
    :schema_type => XSD::QName.new(NsVim25, "OvfDuplicatedElementBoundary"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["boundary", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfElement,
    :schema_type => XSD::QName.new(NsVim25, "OvfElement"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfElementInvalidValue,
    :schema_type => XSD::QName.new(NsVim25, "OvfElementInvalidValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfExport,
    :schema_type => XSD::QName.new(NsVim25, "OvfExport"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfExportFailed,
    :schema_type => XSD::QName.new(NsVim25, "OvfExportFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfFault,
    :schema_type => XSD::QName.new(NsVim25, "OvfFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfHardwareCheck,
    :schema_type => XSD::QName.new(NsVim25, "OvfHardwareCheck"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfImport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfHardwareExport,
    :schema_type => XSD::QName.new(NsVim25, "OvfHardwareExport"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfHostResourceConstraint,
    :schema_type => XSD::QName.new(NsVim25, "OvfHostResourceConstraint"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfConstraint"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfHostValueNotParsed,
    :schema_type => XSD::QName.new(NsVim25, "OvfHostValueNotParsed"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfImport,
    :schema_type => XSD::QName.new(NsVim25, "OvfImport"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfImportFailed,
    :schema_type => XSD::QName.new(NsVim25, "OvfImportFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfImport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInternalError,
    :schema_type => XSD::QName.new(NsVim25, "OvfInternalError"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInvalidPackage,
    :schema_type => XSD::QName.new(NsVim25, "OvfInvalidPackage"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInvalidValue,
    :schema_type => XSD::QName.new(NsVim25, "OvfInvalidValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfAttribute"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInvalidValueConfiguration,
    :schema_type => XSD::QName.new(NsVim25, "OvfInvalidValueConfiguration"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidValue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInvalidValueEmpty,
    :schema_type => XSD::QName.new(NsVim25, "OvfInvalidValueEmpty"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidValue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInvalidValueFormatMalformed,
    :schema_type => XSD::QName.new(NsVim25, "OvfInvalidValueFormatMalformed"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidValue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInvalidValueReference,
    :schema_type => XSD::QName.new(NsVim25, "OvfInvalidValueReference"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidValue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInvalidVmName,
    :schema_type => XSD::QName.new(NsVim25, "OvfInvalidVmName"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfMappedOsId,
    :schema_type => XSD::QName.new(NsVim25, "OvfMappedOsId"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfImport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["ovfId", "SOAP::SOAPInt"],
      ["ovfDescription", "SOAP::SOAPString"],
      ["targetDescription", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfMissingAttribute,
    :schema_type => XSD::QName.new(NsVim25, "OvfMissingAttribute"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfAttribute"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfMissingElement,
    :schema_type => XSD::QName.new(NsVim25, "OvfMissingElement"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfMissingElementNormalBoundary,
    :schema_type => XSD::QName.new(NsVim25, "OvfMissingElementNormalBoundary"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfMissingElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["boundary", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfMissingHardware,
    :schema_type => XSD::QName.new(NsVim25, "OvfMissingHardware"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfImport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["resourceType", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfNoHostNic,
    :schema_type => XSD::QName.new(NsVim25, "OvfNoHostNic"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfNoSupportedHardwareFamily,
    :schema_type => XSD::QName.new(NsVim25, "OvfNoSupportedHardwareFamily"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["version", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfProperty,
    :schema_type => XSD::QName.new(NsVim25, "OvfProperty"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfPropertyExport,
    :schema_type => XSD::QName.new(NsVim25, "OvfPropertyExport"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfPropertyNetwork,
    :schema_type => XSD::QName.new(NsVim25, "OvfPropertyNetwork"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfProperty"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfPropertyQualifier,
    :schema_type => XSD::QName.new(NsVim25, "OvfPropertyQualifier"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfProperty"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfPropertyQualifierDuplicate,
    :schema_type => XSD::QName.new(NsVim25, "OvfPropertyQualifierDuplicate"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfProperty"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfPropertyQualifierIgnored,
    :schema_type => XSD::QName.new(NsVim25, "OvfPropertyQualifierIgnored"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfProperty"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfPropertyType,
    :schema_type => XSD::QName.new(NsVim25, "OvfPropertyType"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfProperty"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfPropertyValue,
    :schema_type => XSD::QName.new(NsVim25, "OvfPropertyValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfProperty"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfSystemFault,
    :schema_type => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfToXmlUnsupportedElement,
    :schema_type => XSD::QName.new(NsVim25, "OvfToXmlUnsupportedElement"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnableToExportDisk,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnableToExportDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfHardwareExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["diskName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnexpectedElement,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnexpectedElement"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnknownDevice,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnknownDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnknownDeviceBacking,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnknownDeviceBacking"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfHardwareExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnknownEntity,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnknownEntity"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedAttribute,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedAttribute"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedAttributeValue,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedAttributeValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedAttribute"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["elementName", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"],
      ["backingName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfSystemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["elementName", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"],
      ["backingName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedDeviceExport,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedDeviceExport"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfHardwareExport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedDiskProvisioning,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedDiskProvisioning"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfImport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["diskProvisioning", "SOAP::SOAPString"],
      ["supportedDiskProvisioning", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedElement,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedElement"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedElementValue,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedElementValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedPackage,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedSection,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedSection"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["info", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedSubType,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedSubType"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["instanceId", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPInt"],
      ["deviceSubType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedType,
    :schema_type => XSD::QName.new(NsVim25, "OvfUnsupportedType"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfUnsupportedPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["instanceId", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfWrongElement,
    :schema_type => XSD::QName.new(NsVim25, "OvfWrongElement"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfElement"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfWrongNamespace,
    :schema_type => XSD::QName.new(NsVim25, "OvfWrongNamespace"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["namespaceName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfXmlFormat,
    :schema_type => XSD::QName.new(NsVim25, "OvfXmlFormat"),
    :schema_basetype => XSD::QName.new(NsVim25, "OvfInvalidPackage"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchAlreadyInstalled,
    :schema_type => XSD::QName.new(NsVim25, "PatchAlreadyInstalled"),
    :schema_basetype => XSD::QName.new(NsVim25, "PatchNotApplicable"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchBinariesNotFound,
    :schema_type => XSD::QName.new(NsVim25, "PatchBinariesNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["binary", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchInstallFailed,
    :schema_type => XSD::QName.new(NsVim25, "PatchInstallFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "PlatformConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"],
      ["rolledBack", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchIntegrityError,
    :schema_type => XSD::QName.new(NsVim25, "PatchIntegrityError"),
    :schema_basetype => XSD::QName.new(NsVim25, "PlatformConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchMetadataCorrupted,
    :schema_type => XSD::QName.new(NsVim25, "PatchMetadataCorrupted"),
    :schema_basetype => XSD::QName.new(NsVim25, "PatchMetadataInvalid"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchMetadataInvalid,
    :schema_type => XSD::QName.new(NsVim25, "PatchMetadataInvalid"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchMetadataNotFound,
    :schema_type => XSD::QName.new(NsVim25, "PatchMetadataNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "PatchMetadataInvalid"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchMissingDependencies,
    :schema_type => XSD::QName.new(NsVim25, "PatchMissingDependencies"),
    :schema_basetype => XSD::QName.new(NsVim25, "PatchNotApplicable"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["prerequisitePatch", "SOAP::SOAPString[]", [0, nil]],
      ["prerequisiteLib", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchNotApplicable,
    :schema_type => XSD::QName.new(NsVim25, "PatchNotApplicable"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchSuperseded,
    :schema_type => XSD::QName.new(NsVim25, "PatchSuperseded"),
    :schema_basetype => XSD::QName.new(NsVim25, "PatchNotApplicable"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["supersede", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PhysCompatRDMNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "PhysCompatRDMNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "RDMNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PlatformConfigFault,
    :schema_type => XSD::QName.new(NsVim25, "PlatformConfigFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOnFtSecondaryFailed,
    :schema_type => XSD::QName.new(NsVim25, "PowerOnFtSecondaryFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"],
      ["hostSelectionBy", "VSphereCloud::FtIssuesOnHostHostSelectionType"],
      ["hostErrors", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["rootCause", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOnFtSecondaryTimedout,
    :schema_type => XSD::QName.new(NsVim25, "PowerOnFtSecondaryTimedout"),
    :schema_basetype => XSD::QName.new(NsVim25, "Timedout"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"],
      ["timeout", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileUpdateFailedUpdateFailure,
    :schema_type => XSD::QName.new(NsVim25, "ProfileUpdateFailedUpdateFailure"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["profilePath", "VSphereCloud::ProfilePropertyPath"],
      ["errMsg", "VSphereCloud::LocalizableMessage"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfProfileUpdateFailedUpdateFailure,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileUpdateFailedUpdateFailure"),
    :schema_element => [
      ["profileUpdateFailedUpdateFailure", ["VSphereCloud::ProfileUpdateFailedUpdateFailure[]", XSD::QName.new(NsVim25, "ProfileUpdateFailedUpdateFailure")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileUpdateFailed,
    :schema_type => XSD::QName.new(NsVim25, "ProfileUpdateFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["failure", "VSphereCloud::ProfileUpdateFailedUpdateFailure[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QuestionPending,
    :schema_type => XSD::QName.new(NsVim25, "QuestionPending"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidState"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RDMConversionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "RDMConversionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RDMNotPreserved,
    :schema_type => XSD::QName.new(NsVim25, "RDMNotPreserved"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RDMNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "RDMNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RDMNotSupportedOnDatastore,
    :schema_type => XSD::QName.new(NsVim25, "RDMNotSupportedOnDatastore"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["datastoreName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RDMPointsToInaccessibleDisk,
    :schema_type => XSD::QName.new(NsVim25, "RDMPointsToInaccessibleDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessVmDisk"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RawDiskNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "RawDiskNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReadOnlyDisksWithLegacyDestination,
    :schema_type => XSD::QName.new(NsVim25, "ReadOnlyDisksWithLegacyDestination"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["roDiskCount", "SOAP::SOAPInt"],
      ["timeoutDanger", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RebootRequired,
    :schema_type => XSD::QName.new(NsVim25, "RebootRequired"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patch", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RecordReplayDisabled,
    :schema_type => XSD::QName.new(NsVim25, "RecordReplayDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoteDeviceNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "RemoteDeviceNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveFailed,
    :schema_type => XSD::QName.new(NsVim25, "RemoveFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourceInUse,
    :schema_type => XSD::QName.new(NsVim25, "ResourceInUse"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourceNotAvailable,
    :schema_type => XSD::QName.new(NsVim25, "ResourceNotAvailable"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["containerType", "SOAP::SOAPString", [0, 1]],
      ["containerName", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RestrictedVersion,
    :schema_type => XSD::QName.new(NsVim25, "RestrictedVersion"),
    :schema_basetype => XSD::QName.new(NsVim25, "SecurityError"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RuleViolation,
    :schema_type => XSD::QName.new(NsVim25, "RuleViolation"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["rule", "VSphereCloud::ClusterRuleInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SSLDisabledFault,
    :schema_type => XSD::QName.new(NsVim25, "SSLDisabledFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SSLVerifyFault,
    :schema_type => XSD::QName.new(NsVim25, "SSLVerifyFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["selfSigned", "SOAP::SOAPBoolean"],
      ["thumbprint", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SSPIChallenge,
    :schema_type => XSD::QName.new(NsVim25, "SSPIChallenge"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["base64Token", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SecondaryVmAlreadyDisabled,
    :schema_type => XSD::QName.new(NsVim25, "SecondaryVmAlreadyDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SecondaryVmAlreadyEnabled,
    :schema_type => XSD::QName.new(NsVim25, "SecondaryVmAlreadyEnabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SecondaryVmAlreadyRegistered,
    :schema_type => XSD::QName.new(NsVim25, "SecondaryVmAlreadyRegistered"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SecondaryVmNotRegistered,
    :schema_type => XSD::QName.new(NsVim25, "SecondaryVmNotRegistered"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SharedBusControllerNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SharedBusControllerNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotCloneNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotCloneNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotCopyNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotCopyNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotCopyNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotDisabled,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotFault,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotIncompatibleDeviceInVm,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotIncompatibleDeviceInVm"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotLocked,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotLocked"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotMoveFromNonHomeNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotMoveFromNonHomeNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotCopyNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotMoveNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotMoveNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotCopyNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotMoveToNonHomeNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotMoveToNonHomeNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotCopyNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotNoChange,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotNoChange"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotRevertIssue,
    :schema_type => XSD::QName.new(NsVim25, "SnapshotRevertIssue"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["snapshotName", "SOAP::SOAPString", [0, 1]],
      ["event", "VSphereCloud::Event[]", [0, nil]],
      ["errors", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SoftRuleVioCorrectionDisallowed,
    :schema_type => XSD::QName.new(NsVim25, "SoftRuleVioCorrectionDisallowed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SoftRuleVioCorrectionImpact,
    :schema_type => XSD::QName.new(NsVim25, "SoftRuleVioCorrectionImpact"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StorageVMotionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "StorageVMotionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFeatureNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SuspendedRelocateNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SuspendedRelocateNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SwapDatastoreNotWritableOnHost,
    :schema_type => XSD::QName.new(NsVim25, "SwapDatastoreNotWritableOnHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreNotWritableOnHost"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SwapDatastoreUnset,
    :schema_type => XSD::QName.new(NsVim25, "SwapDatastoreUnset"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SwapPlacementOverrideNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "SwapPlacementOverrideNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidVmConfig"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SwitchNotInUpgradeMode,
    :schema_type => XSD::QName.new(NsVim25, "SwitchNotInUpgradeMode"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskInProgress,
    :schema_type => XSD::QName.new(NsVim25, "TaskInProgress"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["task", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::Timedout,
    :schema_type => XSD::QName.new(NsVim25, "Timedout"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TooManyConsecutiveOverrides,
    :schema_type => XSD::QName.new(NsVim25, "TooManyConsecutiveOverrides"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TooManyDevices,
    :schema_type => XSD::QName.new(NsVim25, "TooManyDevices"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidVmConfig"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TooManyDisksOnLegacyHost,
    :schema_type => XSD::QName.new(NsVim25, "TooManyDisksOnLegacyHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["diskCount", "SOAP::SOAPInt"],
      ["timeoutDanger", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TooManyHosts,
    :schema_type => XSD::QName.new(NsVim25, "TooManyHosts"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TooManySnapshotLevels,
    :schema_type => XSD::QName.new(NsVim25, "TooManySnapshotLevels"),
    :schema_basetype => XSD::QName.new(NsVim25, "SnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ToolsAlreadyUpgraded,
    :schema_type => XSD::QName.new(NsVim25, "ToolsAlreadyUpgraded"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmToolsUpgradeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ToolsAutoUpgradeNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "ToolsAutoUpgradeNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmToolsUpgradeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ToolsImageNotAvailable,
    :schema_type => XSD::QName.new(NsVim25, "ToolsImageNotAvailable"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmToolsUpgradeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ToolsImageSignatureCheckFailed,
    :schema_type => XSD::QName.new(NsVim25, "ToolsImageSignatureCheckFailed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmToolsUpgradeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ToolsInstallationInProgress,
    :schema_type => XSD::QName.new(NsVim25, "ToolsInstallationInProgress"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ToolsUnavailable,
    :schema_type => XSD::QName.new(NsVim25, "ToolsUnavailable"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ToolsUpgradeCancelled,
    :schema_type => XSD::QName.new(NsVim25, "ToolsUpgradeCancelled"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmToolsUpgradeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UncommittedUndoableDisk,
    :schema_type => XSD::QName.new(NsVim25, "UncommittedUndoableDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnconfiguredPropertyValue,
    :schema_type => XSD::QName.new(NsVim25, "UnconfiguredPropertyValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidPropertyValue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UncustomizableGuest,
    :schema_type => XSD::QName.new(NsVim25, "UncustomizableGuest"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["uncustomizableGuestOS", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnexpectedCustomizationFault,
    :schema_type => XSD::QName.new(NsVim25, "UnexpectedCustomizationFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnrecognizedHost,
    :schema_type => XSD::QName.new(NsVim25, "UnrecognizedHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnsharedSwapVMotionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "UnsharedSwapVMotionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFeatureNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnsupportedDatastore,
    :schema_type => XSD::QName.new(NsVim25, "UnsupportedDatastore"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnsupportedGuest,
    :schema_type => XSD::QName.new(NsVim25, "UnsupportedGuest"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidVmConfig"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["unsupportedGuestOS", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnsupportedVimApiVersion,
    :schema_type => XSD::QName.new(NsVim25, "UnsupportedVimApiVersion"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnsupportedVmxLocation,
    :schema_type => XSD::QName.new(NsVim25, "UnsupportedVmxLocation"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnusedVirtualDiskBlocksNotScrubbed,
    :schema_type => XSD::QName.new(NsVim25, "UnusedVirtualDiskBlocksNotScrubbed"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceBackingNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UserNotFound,
    :schema_type => XSD::QName.new(NsVim25, "UserNotFound"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["unresolved", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppConfigFault,
    :schema_type => XSD::QName.new(NsVim25, "VAppConfigFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppNotRunning,
    :schema_type => XSD::QName.new(NsVim25, "VAppNotRunning"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppPropertyFault,
    :schema_type => XSD::QName.new(NsVim25, "VAppPropertyFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppTaskInProgress,
    :schema_type => XSD::QName.new(NsVim25, "VAppTaskInProgress"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskInProgress"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["task", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMINotSupported,
    :schema_type => XSD::QName.new(NsVim25, "VMINotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMOnConflictDVPort,
    :schema_type => XSD::QName.new(NsVim25, "VMOnConflictDVPort"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessNetwork"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMOnVirtualIntranet,
    :schema_type => XSD::QName.new(NsVim25, "VMOnVirtualIntranet"),
    :schema_basetype => XSD::QName.new(NsVim25, "CannotAccessNetwork"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionInterfaceIssue,
    :schema_type => XSD::QName.new(NsVim25, "VMotionInterfaceIssue"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionLinkCapacityLow,
    :schema_type => XSD::QName.new(NsVim25, "VMotionLinkCapacityLow"),
    :schema_basetype => XSD::QName.new(NsVim25, "VMotionInterfaceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionLinkDown,
    :schema_type => XSD::QName.new(NsVim25, "VMotionLinkDown"),
    :schema_basetype => XSD::QName.new(NsVim25, "VMotionInterfaceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionNotConfigured,
    :schema_type => XSD::QName.new(NsVim25, "VMotionNotConfigured"),
    :schema_basetype => XSD::QName.new(NsVim25, "VMotionInterfaceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionNotLicensed,
    :schema_type => XSD::QName.new(NsVim25, "VMotionNotLicensed"),
    :schema_basetype => XSD::QName.new(NsVim25, "VMotionInterfaceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "VMotionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VMotionInterfaceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionProtocolIncompatible,
    :schema_type => XSD::QName.new(NsVim25, "VMotionProtocolIncompatible"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VimFault,
    :schema_type => XSD::QName.new(NsVim25, "VimFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "MethodFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskBlocksNotFullyProvisioned,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskBlocksNotFullyProvisioned"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceBackingNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskModeNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskModeNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["mode", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "DeviceNotSupported"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualHardwareCompatibilityIssue,
    :schema_type => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualHardwareVersionNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "VirtualHardwareVersionNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmAlreadyExistsInDatacenter,
    :schema_type => XSD::QName.new(NsVim25, "VmAlreadyExistsInDatacenter"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidFolder"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["target", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["hostname", "SOAP::SOAPString"],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmConfigFault,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmConfigIncompatibleForFaultTolerance,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigIncompatibleForFaultTolerance"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmConfigIncompatibleForRecordReplay,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigIncompatibleForRecordReplay"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceConfigIssue,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceConfigIssue"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceConfigIssueWrapper,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceConfigIssueWrapper"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["error", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceInvalidFileBacking,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceInvalidFileBacking"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["backingType", "SOAP::SOAPString", [0, 1]],
      ["backingFilename", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceIssue,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceOpIssuesList,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceOpIssuesList"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmFaultToleranceIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["errors", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["warnings", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceTooManyVMsOnHost,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceTooManyVMsOnHost"),
    :schema_basetype => XSD::QName.new(NsVim25, "InsufficientResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["maxNumFtVms", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmHostAffinityRuleViolation,
    :schema_type => XSD::QName.new(NsVim25, "VmHostAffinityRuleViolation"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmLimitLicense,
    :schema_type => XSD::QName.new(NsVim25, "VmLimitLicense"),
    :schema_basetype => XSD::QName.new(NsVim25, "NotEnoughLicenses"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["limit", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmMonitorIncompatibleForFaultTolerance,
    :schema_type => XSD::QName.new(NsVim25, "VmMonitorIncompatibleForFaultTolerance"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmPowerOnDisabled,
    :schema_type => XSD::QName.new(NsVim25, "VmPowerOnDisabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidState"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmToolsUpgradeFault,
    :schema_type => XSD::QName.new(NsVim25, "VmToolsUpgradeFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmValidateMaxDevice,
    :schema_type => XSD::QName.new(NsVim25, "VmValidateMaxDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "VimFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["max", "SOAP::SOAPInt"],
      ["count", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmWwnConflict,
    :schema_type => XSD::QName.new(NsVim25, "VmWwnConflict"),
    :schema_basetype => XSD::QName.new(NsVim25, "InvalidVmConfig"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["wwn", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsAlreadyMounted,
    :schema_type => XSD::QName.new(NsVim25, "VmfsAlreadyMounted"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsMountFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsAmbiguousMount,
    :schema_type => XSD::QName.new(NsVim25, "VmfsAmbiguousMount"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsMountFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsMountFault,
    :schema_type => XSD::QName.new(NsVim25, "VmfsMountFault"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmotionInterfaceNotEnabled,
    :schema_type => XSD::QName.new(NsVim25, "VmotionInterfaceNotEnabled"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostPowerOpFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VolumeEditorError,
    :schema_type => XSD::QName.new(NsVim25, "VolumeEditorError"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WakeOnLanNotSupported,
    :schema_type => XSD::QName.new(NsVim25, "WakeOnLanNotSupported"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WakeOnLanNotSupportedByVmotionNIC,
    :schema_type => XSD::QName.new(NsVim25, "WakeOnLanNotSupportedByVmotionNIC"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostPowerOpFailed"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WillModifyConfigCpuRequirements,
    :schema_type => XSD::QName.new(NsVim25, "WillModifyConfigCpuRequirements"),
    :schema_basetype => XSD::QName.new(NsVim25, "MigrationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostActiveDirectoryInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostActiveDirectoryInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDirectoryStoreInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["joinedDomain", "SOAP::SOAPString", [0, 1]],
      ["trustedDomain", "SOAP::SOAPString[]", [0, nil]],
      ["domainMembershipStatus", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostActiveDirectorySpec,
    :schema_type => XSD::QName.new(NsVim25, "HostActiveDirectorySpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["domainName", "SOAP::SOAPString", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostActiveDirectory,
    :schema_type => XSD::QName.new(NsVim25, "HostActiveDirectory"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostActiveDirectorySpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostActiveDirectory,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostActiveDirectory"),
    :schema_element => [
      ["hostActiveDirectory", ["VSphereCloud::HostActiveDirectory[]", XSD::QName.new(NsVim25, "HostActiveDirectory")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostAuthenticationManagerInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostAuthenticationManagerInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["authConfig", "VSphereCloud::HostAuthenticationStoreInfo[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostAuthenticationStoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostAuthenticationStoreInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostAuthenticationStoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostAuthenticationStoreInfo"),
    :schema_element => [
      ["hostAuthenticationStoreInfo", ["VSphereCloud::HostAuthenticationStoreInfo[]", XSD::QName.new(NsVim25, "HostAuthenticationStoreInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AutoStartDefaults,
    :schema_type => XSD::QName.new(NsVim25, "AutoStartDefaults"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["startDelay", "SOAP::SOAPInt", [0, 1]],
      ["stopDelay", "SOAP::SOAPInt", [0, 1]],
      ["waitForHeartbeat", "SOAP::SOAPBoolean", [0, 1]],
      ["stopAction", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AutoStartPowerInfo,
    :schema_type => XSD::QName.new(NsVim25, "AutoStartPowerInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["startOrder", "SOAP::SOAPInt"],
      ["startDelay", "SOAP::SOAPInt"],
      ["waitForHeartbeat", "VSphereCloud::AutoStartWaitHeartbeatSetting"],
      ["startAction", "SOAP::SOAPString"],
      ["stopDelay", "SOAP::SOAPInt"],
      ["stopAction", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfAutoStartPowerInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfAutoStartPowerInfo"),
    :schema_element => [
      ["autoStartPowerInfo", ["VSphereCloud::AutoStartPowerInfo[]", XSD::QName.new(NsVim25, "AutoStartPowerInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostAutoStartManagerConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostAutoStartManagerConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["defaults", "VSphereCloud::AutoStartDefaults", [0, 1]],
      ["powerInfo", "VSphereCloud::AutoStartPowerInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostBootDeviceInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostBootDeviceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["bootDevices", "VSphereCloud::HostBootDevice[]", [0, nil]],
      ["currentBootDeviceKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostBootDevice,
    :schema_type => XSD::QName.new(NsVim25, "HostBootDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostBootDevice,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostBootDevice"),
    :schema_element => [
      ["hostBootDevice", ["VSphereCloud::HostBootDevice[]", XSD::QName.new(NsVim25, "HostBootDevice")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCapability,
    :schema_type => XSD::QName.new(NsVim25, "HostCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["recursiveResourcePoolsSupported", "SOAP::SOAPBoolean"],
      ["cpuMemoryResourceConfigurationSupported", "SOAP::SOAPBoolean"],
      ["rebootSupported", "SOAP::SOAPBoolean"],
      ["shutdownSupported", "SOAP::SOAPBoolean"],
      ["vmotionSupported", "SOAP::SOAPBoolean"],
      ["standbySupported", "SOAP::SOAPBoolean"],
      ["ipmiSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["maxSupportedVMs", "SOAP::SOAPInt", [0, 1]],
      ["maxRunningVMs", "SOAP::SOAPInt", [0, 1]],
      ["maxSupportedVcpus", "SOAP::SOAPInt", [0, 1]],
      ["datastorePrincipalSupported", "SOAP::SOAPBoolean"],
      ["sanSupported", "SOAP::SOAPBoolean"],
      ["nfsSupported", "SOAP::SOAPBoolean"],
      ["iscsiSupported", "SOAP::SOAPBoolean"],
      ["vlanTaggingSupported", "SOAP::SOAPBoolean"],
      ["nicTeamingSupported", "SOAP::SOAPBoolean"],
      ["highGuestMemSupported", "SOAP::SOAPBoolean"],
      ["maintenanceModeSupported", "SOAP::SOAPBoolean"],
      ["suspendedRelocateSupported", "SOAP::SOAPBoolean"],
      ["restrictedSnapshotRelocateSupported", "SOAP::SOAPBoolean"],
      ["perVmSwapFiles", "SOAP::SOAPBoolean"],
      ["localSwapDatastoreSupported", "SOAP::SOAPBoolean"],
      ["unsharedSwapVMotionSupported", "SOAP::SOAPBoolean"],
      ["backgroundSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["preAssignedPCIUnitNumbersSupported", "SOAP::SOAPBoolean"],
      ["screenshotSupported", "SOAP::SOAPBoolean"],
      ["scaledScreenshotSupported", "SOAP::SOAPBoolean"],
      ["storageVMotionSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmotionWithStorageVMotionSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["recordReplaySupported", "SOAP::SOAPBoolean", [0, 1]],
      ["ftSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["replayUnsupportedReason", "SOAP::SOAPString", [0, 1]],
      ["replayCompatibilityIssues", "SOAP::SOAPString[]", [0, nil]],
      ["ftCompatibilityIssues", "SOAP::SOAPString[]", [0, nil]],
      ["loginBySSLThumbprintSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["cloneFromSnapshotSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["deltaDiskBackingsSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["perVMNetworkTrafficShapingSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["tpmSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedCpuFeature", "VSphereCloud::HostCpuIdInfo[]", [0, nil]],
      ["virtualExecUsageSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["storageIORMSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2UnsupportedReason", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2UnsupportedReasonExtended", "SOAP::SOAPString", [0, 1]],
      ["vStorageCapable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConfigChange,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigChange"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["product", "VSphereCloud::AboutInfo"],
      ["hyperThread", "VSphereCloud::HostHyperThreadScheduleInfo", [0, 1]],
      ["consoleReservation", "VSphereCloud::ServiceConsoleReservationInfo", [0, 1]],
      ["virtualMachineReservation", "VSphereCloud::VirtualMachineMemoryReservationInfo", [0, 1]],
      ["storageDevice", "VSphereCloud::HostStorageDeviceInfo", [0, 1]],
      ["multipathState", "VSphereCloud::HostMultipathStateInfo", [0, 1]],
      ["fileSystemVolume", "VSphereCloud::HostFileSystemVolumeInfo", [0, 1]],
      ["systemFile", "SOAP::SOAPString[]", [0, nil]],
      ["network", "VSphereCloud::HostNetworkInfo", [0, 1]],
      ["vmotion", "VSphereCloud::HostVMotionInfo", [0, 1]],
      ["virtualNicManagerInfo", "VSphereCloud::HostVirtualNicManagerInfo", [0, 1]],
      ["capabilities", "VSphereCloud::HostNetCapabilities", [0, 1]],
      ["datastoreCapabilities", "VSphereCloud::HostDatastoreSystemCapabilities", [0, 1]],
      ["offloadCapabilities", "VSphereCloud::HostNetOffloadCapabilities", [0, 1]],
      ["service", "VSphereCloud::HostServiceInfo", [0, 1]],
      ["firewall", "VSphereCloud::HostFirewallInfo", [0, 1]],
      ["autoStart", "VSphereCloud::HostAutoStartManagerConfig", [0, 1]],
      ["activeDiagnosticPartition", "VSphereCloud::HostDiagnosticPartition", [0, 1]],
      ["option", "VSphereCloud::OptionValue[]", [0, nil]],
      ["optionDef", "VSphereCloud::OptionDef[]", [0, nil]],
      ["datastorePrincipal", "SOAP::SOAPString", [0, 1]],
      ["localSwapDatastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["systemResources", "VSphereCloud::HostSystemResourceInfo", [0, 1]],
      ["dateTimeInfo", "VSphereCloud::HostDateTimeInfo", [0, 1]],
      ["flags", "VSphereCloud::HostFlagInfo", [0, 1]],
      ["adminDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["ipmi", "VSphereCloud::HostIpmiInfo", [0, 1]],
      ["sslThumbprintInfo", "VSphereCloud::HostSslThumbprintInfo", [0, 1]],
      ["pciPassthruInfo", "VSphereCloud::HostPciPassthruInfo[]", [0, nil]],
      ["authenticationManagerInfo", "VSphereCloud::HostAuthenticationManagerInfo", [0, 1]],
      ["featureVersion", "VSphereCloud::HostFeatureVersionInfo[]", [0, nil]],
      ["powerSystemCapability", "VSphereCloud::PowerSystemCapability", [0, 1]],
      ["powerSystemInfo", "VSphereCloud::PowerSystemInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConfigManager,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigManager"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["cpuScheduler", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["datastoreSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["memoryManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["storageSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["networkSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["vmotionSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["virtualNicManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["serviceSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["firewallSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["advancedOption", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["diagnosticSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["autoStartManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["snmpSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["dateTimeSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["patchManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["bootDeviceSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["firmwareSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["healthStatusSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["pciPassthruSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["licenseManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["kernelModuleSystem", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["authenticationManager", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["powerSystem", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["nasDatastore", "VSphereCloud::HostNasVolumeConfig[]", [0, nil]],
      ["network", "VSphereCloud::HostNetworkConfig", [0, 1]],
      ["nicTypeSelection", "VSphereCloud::HostVirtualNicManagerNicTypeSelection[]", [0, nil]],
      ["service", "VSphereCloud::HostServiceConfig[]", [0, nil]],
      ["firewall", "VSphereCloud::HostFirewallConfig", [0, 1]],
      ["option", "VSphereCloud::OptionValue[]", [0, nil]],
      ["datastorePrincipal", "SOAP::SOAPString", [0, 1]],
      ["datastorePrincipalPasswd", "SOAP::SOAPString", [0, 1]],
      ["datetime", "VSphereCloud::HostDateTimeConfig", [0, 1]],
      ["storageDevice", "VSphereCloud::HostStorageDeviceInfo", [0, 1]],
      ["license", "VSphereCloud::HostLicenseSpec", [0, 1]],
      ["security", "VSphereCloud::HostSecuritySpec", [0, 1]],
      ["userAccount", "VSphereCloud::HostAccountSpec[]", [0, nil]],
      ["usergroupAccount", "VSphereCloud::HostAccountSpec[]", [0, nil]],
      ["memory", "VSphereCloud::HostMemorySpec", [0, 1]],
      ["activeDirectory", "VSphereCloud::HostActiveDirectory[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConnectInfoNetworkInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostConnectInfoNetworkInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["summary", "VSphereCloud::NetworkSummary"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostConnectInfoNetworkInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostConnectInfoNetworkInfo"),
    :schema_element => [
      ["hostConnectInfoNetworkInfo", ["VSphereCloud::HostConnectInfoNetworkInfo[]", XSD::QName.new(NsVim25, "HostConnectInfoNetworkInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNewNetworkConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostNewNetworkConnectInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostConnectInfoNetworkInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["summary", "VSphereCloud::NetworkSummary"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDatastoreConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDatastoreConnectInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["summary", "VSphereCloud::DatastoreSummary"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostDatastoreConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDatastoreConnectInfo"),
    :schema_element => [
      ["hostDatastoreConnectInfo", ["VSphereCloud::HostDatastoreConnectInfo[]", XSD::QName.new(NsVim25, "HostDatastoreConnectInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDatastoreExistsConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDatastoreExistsConnectInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDatastoreConnectInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["summary", "VSphereCloud::DatastoreSummary"],
      ["newDatastoreName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDatastoreNameConflictConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDatastoreNameConflictConnectInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDatastoreConnectInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["summary", "VSphereCloud::DatastoreSummary"],
      ["newDatastoreName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostLicenseConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostLicenseConnectInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["license", "VSphereCloud::LicenseManagerLicenseInfo"],
      ["evaluation", "VSphereCloud::LicenseManagerEvaluationInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostConnectInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["serverIp", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::HostListSummary"],
      ["vm", "VSphereCloud::VirtualMachineSummary[]", [0, nil]],
      ["vimAccountNameRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["clusterSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["network", "VSphereCloud::HostConnectInfoNetworkInfo[]", [0, nil]],
      ["datastore", "VSphereCloud::HostDatastoreConnectInfo[]", [0, nil]],
      ["license", "VSphereCloud::HostLicenseConnectInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConnectSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostConnectSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["vmFolder", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean"],
      ["vimAccountName", "SOAP::SOAPString", [0, 1]],
      ["vimAccountPassword", "SOAP::SOAPString", [0, 1]],
      ["managementIp", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCpuIdInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostCpuIdInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["eax", "SOAP::SOAPString", [0, 1]],
      ["ebx", "SOAP::SOAPString", [0, 1]],
      ["ecx", "SOAP::SOAPString", [0, 1]],
      ["edx", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostCpuIdInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostCpuIdInfo"),
    :schema_element => [
      ["hostCpuIdInfo", ["VSphereCloud::HostCpuIdInfo[]", XSD::QName.new(NsVim25, "HostCpuIdInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostHyperThreadScheduleInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostHyperThreadScheduleInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["available", "SOAP::SOAPBoolean"],
      ["active", "SOAP::SOAPBoolean"],
      ["config", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileQueryFlags,
    :schema_type => XSD::QName.new(NsVim25, "FileQueryFlags"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileType", "SOAP::SOAPBoolean"],
      ["fileSize", "SOAP::SOAPBoolean"],
      ["modification", "SOAP::SOAPBoolean"],
      ["fileOwner", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileInfo,
    :schema_type => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfFileInfo"),
    :schema_element => [
      ["fileInfo", ["VSphereCloud::FileInfo[]", XSD::QName.new(NsVim25, "FileInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileQuery,
    :schema_type => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfFileQuery"),
    :schema_element => [
      ["fileQuery", ["VSphereCloud::FileQuery[]", XSD::QName.new(NsVim25, "FileQuery")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmConfigFileQueryFilter,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigFileQueryFilter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["matchConfigVersion", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmConfigFileQueryFlags,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigFileQueryFlags"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["configVersion", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmConfigFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["filter", "VSphereCloud::VmConfigFileQueryFilter", [0, 1]],
      ["details", "VSphereCloud::VmConfigFileQueryFlags", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TemplateConfigFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "TemplateConfigFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["filter", "VSphereCloud::VmConfigFileQueryFilter", [0, 1]],
      ["details", "VSphereCloud::VmConfigFileQueryFlags", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDiskFileQueryFilter,
    :schema_type => XSD::QName.new(NsVim25, "VmDiskFileQueryFilter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPString[]", [0, nil]],
      ["matchHardwareVersion", "SOAP::SOAPInt[]", [0, nil]],
      ["controllerType", "SOAP::SOAPString[]", [0, nil]],
      ["thin", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDiskFileQueryFlags,
    :schema_type => XSD::QName.new(NsVim25, "VmDiskFileQueryFlags"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskType", "SOAP::SOAPBoolean"],
      ["capacityKb", "SOAP::SOAPBoolean"],
      ["hardwareVersion", "SOAP::SOAPBoolean"],
      ["controllerType", "SOAP::SOAPBoolean", [0, 1]],
      ["diskExtents", "SOAP::SOAPBoolean", [0, 1]],
      ["thin", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDiskFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "VmDiskFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["filter", "VSphereCloud::VmDiskFileQueryFilter", [0, 1]],
      ["details", "VSphereCloud::VmDiskFileQueryFlags", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FolderFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "FolderFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmSnapshotFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "VmSnapshotFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IsoImageFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "IsoImageFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FloppyImageFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "FloppyImageFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmNvramFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "VmNvramFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmLogFileQuery,
    :schema_type => XSD::QName.new(NsVim25, "VmLogFileQuery"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileQuery"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmConfigFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TemplateConfigFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "TemplateConfigFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigFileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]],
      ["configVersion", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDiskFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "VmDiskFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]],
      ["diskType", "SOAP::SOAPString", [0, 1]],
      ["capacityKb", "SOAP::SOAPLong", [0, 1]],
      ["hardwareVersion", "SOAP::SOAPInt", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["diskExtents", "SOAP::SOAPString[]", [0, nil]],
      ["thin", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FolderFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "FolderFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmSnapshotFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "VmSnapshotFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IsoImageFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "IsoImageFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FloppyImageFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "FloppyImageFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmNvramFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "VmNvramFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmLogFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "VmLogFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FileInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong", [0, 1]],
      ["modification", "SOAP::SOAPDateTime", [0, 1]],
      ["owner", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDatastoreBrowserSearchSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostDatastoreBrowserSearchSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["query", "VSphereCloud::FileQuery[]", [0, nil]],
      ["details", "VSphereCloud::FileQueryFlags", [0, 1]],
      ["searchCaseInsensitive", "SOAP::SOAPBoolean", [0, 1]],
      ["matchPattern", "SOAP::SOAPString[]", [0, nil]],
      ["sortFoldersFirst", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDatastoreBrowserSearchResults,
    :schema_type => XSD::QName.new(NsVim25, "HostDatastoreBrowserSearchResults"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["folderPath", "SOAP::SOAPString", [0, 1]],
      ["file", "VSphereCloud::FileInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostDatastoreBrowserSearchResults,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDatastoreBrowserSearchResults"),
    :schema_element => [
      ["hostDatastoreBrowserSearchResults", ["VSphereCloud::HostDatastoreBrowserSearchResults[]", XSD::QName.new(NsVim25, "HostDatastoreBrowserSearchResults")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDatastoreSystemCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "HostDatastoreSystemCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["nfsMountCreationRequired", "SOAP::SOAPBoolean"],
      ["nfsMountCreationSupported", "SOAP::SOAPBoolean"],
      ["localDatastoreSupported", "SOAP::SOAPBoolean"],
      ["vmfsExtentExpansionSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsDatastoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]],
      ["vmfs", "VSphereCloud::HostVmfsVolume", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NasDatastoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "NasDatastoreInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]],
      ["nas", "VSphereCloud::HostNasVolume", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LocalDatastoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "LocalDatastoreInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DatastoreInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"],
      ["freeSpace", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime", [0, 1]],
      ["path", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsDatastoreSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsDatastoreCreateSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreCreateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsDatastoreSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"],
      ["partition", "VSphereCloud::HostDiskPartitionSpec"],
      ["vmfs", "VSphereCloud::HostVmfsSpec"],
      ["extent", "VSphereCloud::HostScsiDiskPartition[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsDatastoreExtendSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreExtendSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsDatastoreSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"],
      ["partition", "VSphereCloud::HostDiskPartitionSpec"],
      ["extent", "VSphereCloud::HostScsiDiskPartition[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsDatastoreExpandSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreExpandSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsDatastoreSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskUuid", "SOAP::SOAPString"],
      ["partition", "VSphereCloud::HostDiskPartitionSpec"],
      ["extent", "VSphereCloud::HostScsiDiskPartition"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsDatastoreBaseOption,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreBaseOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["layout", "VSphereCloud::HostDiskPartitionLayout"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsDatastoreSingleExtentOption,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreSingleExtentOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsDatastoreBaseOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["layout", "VSphereCloud::HostDiskPartitionLayout"],
      ["vmfsExtent", "VSphereCloud::HostDiskPartitionBlockRange"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsDatastoreAllExtentOption,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreAllExtentOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsDatastoreSingleExtentOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["layout", "VSphereCloud::HostDiskPartitionLayout"],
      ["vmfsExtent", "VSphereCloud::HostDiskPartitionBlockRange"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsDatastoreMultipleExtentOption,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreMultipleExtentOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmfsDatastoreBaseOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["layout", "VSphereCloud::HostDiskPartitionLayout"],
      ["vmfsExtent", "VSphereCloud::HostDiskPartitionBlockRange[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsDatastoreOption,
    :schema_type => XSD::QName.new(NsVim25, "VmfsDatastoreOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["info", "VSphereCloud::VmfsDatastoreBaseOption"],
      ["spec", "VSphereCloud::VmfsDatastoreSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVmfsDatastoreOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVmfsDatastoreOption"),
    :schema_element => [
      ["vmfsDatastoreOption", ["VSphereCloud::VmfsDatastoreOption[]", XSD::QName.new(NsVim25, "VmfsDatastoreOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDateTimeConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostDateTimeConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["timeZone", "SOAP::SOAPString", [0, 1]],
      ["ntpConfig", "VSphereCloud::HostNtpConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDateTimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDateTimeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["timeZone", "VSphereCloud::HostDateTimeSystemTimeZone"],
      ["ntpConfig", "VSphereCloud::HostNtpConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDateTimeSystemTimeZone,
    :schema_type => XSD::QName.new(NsVim25, "HostDateTimeSystemTimeZone"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["gmtOffset", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostDateTimeSystemTimeZone,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDateTimeSystemTimeZone"),
    :schema_element => [
      ["hostDateTimeSystemTimeZone", ["VSphereCloud::HostDateTimeSystemTimeZone[]", XSD::QName.new(NsVim25, "HostDateTimeSystemTimeZone")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDevice,
    :schema_type => XSD::QName.new(NsVim25, "HostDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDhcpServiceSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostDhcpServiceSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["virtualSwitch", "SOAP::SOAPString"],
      ["defaultLeaseDuration", "SOAP::SOAPInt"],
      ["leaseBeginIp", "SOAP::SOAPString"],
      ["leaseEndIp", "SOAP::SOAPString"],
      ["maxLeaseDuration", "SOAP::SOAPInt"],
      ["unlimitedLease", "SOAP::SOAPBoolean"],
      ["ipSubnetAddr", "SOAP::SOAPString"],
      ["ipSubnetMask", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDhcpServiceConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostDhcpServiceConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostDhcpServiceSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostDhcpServiceConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDhcpServiceConfig"),
    :schema_element => [
      ["hostDhcpServiceConfig", ["VSphereCloud::HostDhcpServiceConfig[]", XSD::QName.new(NsVim25, "HostDhcpServiceConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDhcpService,
    :schema_type => XSD::QName.new(NsVim25, "HostDhcpService"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostDhcpServiceSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostDhcpService,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDhcpService"),
    :schema_element => [
      ["hostDhcpService", ["VSphereCloud::HostDhcpService[]", XSD::QName.new(NsVim25, "HostDhcpService")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiagnosticPartitionCreateOption,
    :schema_type => XSD::QName.new(NsVim25, "HostDiagnosticPartitionCreateOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"],
      ["disk", "VSphereCloud::HostScsiDisk"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostDiagnosticPartitionCreateOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDiagnosticPartitionCreateOption"),
    :schema_element => [
      ["hostDiagnosticPartitionCreateOption", ["VSphereCloud::HostDiagnosticPartitionCreateOption[]", XSD::QName.new(NsVim25, "HostDiagnosticPartitionCreateOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiagnosticPartitionCreateSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostDiagnosticPartitionCreateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"],
      ["id", "VSphereCloud::HostScsiDiskPartition"],
      ["partition", "VSphereCloud::HostDiskPartitionSpec"],
      ["active", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiagnosticPartitionCreateDescription,
    :schema_type => XSD::QName.new(NsVim25, "HostDiagnosticPartitionCreateDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["layout", "VSphereCloud::HostDiskPartitionLayout"],
      ["diskUuid", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostDiagnosticPartitionCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiagnosticPartition,
    :schema_type => XSD::QName.new(NsVim25, "HostDiagnosticPartition"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"],
      ["slots", "SOAP::SOAPInt"],
      ["id", "VSphereCloud::HostScsiDiskPartition"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostDiagnosticPartition,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDiagnosticPartition"),
    :schema_element => [
      ["hostDiagnosticPartition", ["VSphereCloud::HostDiagnosticPartition[]", XSD::QName.new(NsVim25, "HostDiagnosticPartition")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDirectoryStoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDirectoryStoreInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostAuthenticationStoreInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiskDimensionsChs,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskDimensionsChs"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["cylinder", "SOAP::SOAPLong"],
      ["head", "SOAP::SOAPInt"],
      ["sector", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiskDimensionsLba,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskDimensionsLba"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["blockSize", "SOAP::SOAPInt"],
      ["block", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiskDimensions,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskDimensions"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiskPartitionAttributes,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskPartitionAttributes"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["partition", "SOAP::SOAPInt"],
      ["startSector", "SOAP::SOAPLong"],
      ["endSector", "SOAP::SOAPLong"],
      ["type", "SOAP::SOAPString"],
      ["logical", "SOAP::SOAPBoolean"],
      ["attributes", "SOAP::SOAPByte"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostDiskPartitionAttributes,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDiskPartitionAttributes"),
    :schema_element => [
      ["hostDiskPartitionAttributes", ["VSphereCloud::HostDiskPartitionAttributes[]", XSD::QName.new(NsVim25, "HostDiskPartitionAttributes")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiskPartitionBlockRange,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskPartitionBlockRange"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["partition", "SOAP::SOAPInt", [0, 1]],
      ["type", "SOAP::SOAPString"],
      ["start", "VSphereCloud::HostDiskDimensionsLba"],
      ["v_end", ["VSphereCloud::HostDiskDimensionsLba", XSD::QName.new(NsVim25, "end")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostDiskPartitionBlockRange,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDiskPartitionBlockRange"),
    :schema_element => [
      ["hostDiskPartitionBlockRange", ["VSphereCloud::HostDiskPartitionBlockRange[]", XSD::QName.new(NsVim25, "HostDiskPartitionBlockRange")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiskPartitionSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskPartitionSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["chs", "VSphereCloud::HostDiskDimensionsChs", [0, 1]],
      ["totalSectors", "SOAP::SOAPLong", [0, 1]],
      ["partition", "VSphereCloud::HostDiskPartitionAttributes[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiskPartitionLayout,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskPartitionLayout"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["total", "VSphereCloud::HostDiskDimensionsLba", [0, 1]],
      ["partition", "VSphereCloud::HostDiskPartitionBlockRange[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiskPartitionInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskPartitionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostDiskPartitionSpec"],
      ["layout", "VSphereCloud::HostDiskPartitionLayout"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostDiskPartitionInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDiskPartitionInfo"),
    :schema_element => [
      ["hostDiskPartitionInfo", ["VSphereCloud::HostDiskPartitionInfo[]", XSD::QName.new(NsVim25, "HostDiskPartitionInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDnsConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostDnsConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["virtualNicDevice", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString"],
      ["domainName", "SOAP::SOAPString"],
      ["address", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDnsConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostDnsConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDnsConfig"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["virtualNicDevice", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString"],
      ["domainName", "SOAP::SOAPString"],
      ["address", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]],
      ["virtualNicConnection", "VSphereCloud::HostVirtualNicConnection", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFeatureVersionInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostFeatureVersionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostFeatureVersionInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostFeatureVersionInfo"),
    :schema_element => [
      ["hostFeatureVersionInfo", ["VSphereCloud::HostFeatureVersionInfo[]", XSD::QName.new(NsVim25, "HostFeatureVersionInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ModeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ModeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["browse", "SOAP::SOAPString", [0, 1]],
      ["read", "SOAP::SOAPString"],
      ["modify", "SOAP::SOAPString"],
      ["use", "SOAP::SOAPString"],
      ["admin", "SOAP::SOAPString", [0, 1]],
      ["full", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFileAccess,
    :schema_type => XSD::QName.new(NsVim25, "HostFileAccess"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["who", "SOAP::SOAPString"],
      ["what", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFileSystemVolumeInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostFileSystemVolumeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["volumeTypeList", "SOAP::SOAPString[]", [0, nil]],
      ["mountInfo", "VSphereCloud::HostFileSystemMountInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFileSystemMountInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostFileSystemMountInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["mountInfo", "VSphereCloud::HostMountInfo"],
      ["volume", "VSphereCloud::HostFileSystemVolume"],
      ["vStorageSupport", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostFileSystemMountInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostFileSystemMountInfo"),
    :schema_element => [
      ["hostFileSystemMountInfo", ["VSphereCloud::HostFileSystemMountInfo[]", XSD::QName.new(NsVim25, "HostFileSystemMountInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFileSystemVolume,
    :schema_type => XSD::QName.new(NsVim25, "HostFileSystemVolume"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNasVolumeSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostNasVolumeSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"],
      ["localPath", "SOAP::SOAPString"],
      ["accessMode", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNasVolumeConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostNasVolumeConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["spec", "VSphereCloud::HostNasVolumeSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostNasVolumeConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostNasVolumeConfig"),
    :schema_element => [
      ["hostNasVolumeConfig", ["VSphereCloud::HostNasVolumeConfig[]", XSD::QName.new(NsVim25, "HostNasVolumeConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNasVolume,
    :schema_type => XSD::QName.new(NsVim25, "HostNasVolume"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostFileSystemVolume"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostLocalFileSystemVolumeSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostLocalFileSystemVolumeSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["localPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostLocalFileSystemVolume,
    :schema_type => XSD::QName.new(NsVim25, "HostLocalFileSystemVolume"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostFileSystemVolume"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFirewallConfigRuleSetConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallConfigRuleSetConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["rulesetId", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostFirewallConfigRuleSetConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostFirewallConfigRuleSetConfig"),
    :schema_element => [
      ["hostFirewallConfigRuleSetConfig", ["VSphereCloud::HostFirewallConfigRuleSetConfig[]", XSD::QName.new(NsVim25, "HostFirewallConfigRuleSetConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFirewallConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["rule", "VSphereCloud::HostFirewallConfigRuleSetConfig[]", [0, nil]],
      ["defaultBlockingPolicy", "VSphereCloud::HostFirewallDefaultPolicy"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFirewallDefaultPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallDefaultPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["incomingBlocked", "SOAP::SOAPBoolean", [0, 1]],
      ["outgoingBlocked", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFirewallInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["defaultPolicy", "VSphereCloud::HostFirewallDefaultPolicy"],
      ["ruleset", "VSphereCloud::HostFirewallRuleset[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFlagInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostFlagInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["backgroundSnapshotsEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostForceMountedInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostForceMountedInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["persist", "SOAP::SOAPBoolean"],
      ["mounted", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostHardwareInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostHardwareInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["systemInfo", "VSphereCloud::HostSystemInfo"],
      ["cpuPowerManagementInfo", "VSphereCloud::HostCpuPowerManagementInfo", [0, 1]],
      ["cpuInfo", "VSphereCloud::HostCpuInfo"],
      ["cpuPkg", "VSphereCloud::HostCpuPackage[]", [1, nil]],
      ["memorySize", "SOAP::SOAPLong"],
      ["numaInfo", "VSphereCloud::HostNumaInfo", [0, 1]],
      ["pciDevice", "VSphereCloud::HostPciDevice[]", [0, nil]],
      ["cpuFeature", "VSphereCloud::HostCpuIdInfo[]", [0, nil]],
      ["biosInfo", "VSphereCloud::HostBIOSInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostSystemInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostSystemInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vendor", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["otherIdentifyingInfo", "VSphereCloud::HostSystemIdentificationInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCpuPowerManagementInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostCpuPowerManagementInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["currentPolicy", "SOAP::SOAPString", [0, 1]],
      ["hardwareSupport", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCpuInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostCpuInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["numCpuPackages", "SOAP::SOAPShort"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["hz", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCpuPackage,
    :schema_type => XSD::QName.new(NsVim25, "HostCpuPackage"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["index", "SOAP::SOAPShort"],
      ["vendor", "SOAP::SOAPString"],
      ["hz", "SOAP::SOAPLong"],
      ["busHz", "SOAP::SOAPLong"],
      ["description", "SOAP::SOAPString"],
      ["threadId", "SOAP::SOAPShort[]", [1, nil]],
      ["cpuFeature", "VSphereCloud::HostCpuIdInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostCpuPackage,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostCpuPackage"),
    :schema_element => [
      ["hostCpuPackage", ["VSphereCloud::HostCpuPackage[]", XSD::QName.new(NsVim25, "HostCpuPackage")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNumaInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostNumaInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["numNodes", "SOAP::SOAPInt"],
      ["numaNode", "VSphereCloud::HostNumaNode[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNumaNode,
    :schema_type => XSD::QName.new(NsVim25, "HostNumaNode"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["typeId", "SOAP::SOAPByte"],
      ["cpuID", "SOAP::SOAPShort[]", [1, nil]],
      ["memoryRangeBegin", "SOAP::SOAPLong"],
      ["memoryRangeLength", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostNumaNode,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostNumaNode"),
    :schema_element => [
      ["hostNumaNode", ["VSphereCloud::HostNumaNode[]", XSD::QName.new(NsVim25, "HostNumaNode")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostBIOSInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostBIOSInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["biosVersion", "SOAP::SOAPString", [0, 1]],
      ["releaseDate", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostHardwareElementInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostHardwareElementInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["status", "VSphereCloud::ElementDescription"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostHardwareElementInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostHardwareElementInfo"),
    :schema_element => [
      ["hostHardwareElementInfo", ["VSphereCloud::HostHardwareElementInfo[]", XSD::QName.new(NsVim25, "HostHardwareElementInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostStorageOperationalInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostStorageOperationalInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["property", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostStorageOperationalInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostStorageOperationalInfo"),
    :schema_element => [
      ["hostStorageOperationalInfo", ["VSphereCloud::HostStorageOperationalInfo[]", XSD::QName.new(NsVim25, "HostStorageOperationalInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostStorageElementInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostStorageElementInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostHardwareElementInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["status", "VSphereCloud::ElementDescription"],
      ["operationalInfo", "VSphereCloud::HostStorageOperationalInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostStorageElementInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostStorageElementInfo"),
    :schema_element => [
      ["hostStorageElementInfo", ["VSphereCloud::HostStorageElementInfo[]", XSD::QName.new(NsVim25, "HostStorageElementInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostHardwareStatusInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostHardwareStatusInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["memoryStatusInfo", "VSphereCloud::HostHardwareElementInfo[]", [0, nil]],
      ["cpuStatusInfo", "VSphereCloud::HostHardwareElementInfo[]", [0, nil]],
      ["storageStatusInfo", "VSphereCloud::HostStorageElementInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HealthSystemRuntime,
    :schema_type => XSD::QName.new(NsVim25, "HealthSystemRuntime"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["systemHealthInfo", "VSphereCloud::HostSystemHealthInfo", [0, 1]],
      ["hardwareStatusInfo", "VSphereCloud::HostHardwareStatusInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostHostBusAdapter,
    :schema_type => XSD::QName.new(NsVim25, "HostHostBusAdapter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostHostBusAdapter,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostHostBusAdapter"),
    :schema_element => [
      ["hostHostBusAdapter", ["VSphereCloud::HostHostBusAdapter[]", XSD::QName.new(NsVim25, "HostHostBusAdapter")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostParallelScsiHba,
    :schema_type => XSD::QName.new(NsVim25, "HostParallelScsiHba"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostHostBusAdapter"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostBlockHba,
    :schema_type => XSD::QName.new(NsVim25, "HostBlockHba"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostHostBusAdapter"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFibreChannelHba,
    :schema_type => XSD::QName.new(NsVim25, "HostFibreChannelHba"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostHostBusAdapter"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]],
      ["portWorldWideName", "SOAP::SOAPLong"],
      ["nodeWorldWideName", "SOAP::SOAPLong"],
      ["portType", "VSphereCloud::FibreChannelPortType"],
      ["speed", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaParamValue,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaParamValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "OptionValue"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", nil, [0, 1]],
      ["isInherited", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostInternetScsiHbaParamValue,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostInternetScsiHbaParamValue"),
    :schema_element => [
      ["hostInternetScsiHbaParamValue", ["VSphereCloud::HostInternetScsiHbaParamValue[]", XSD::QName.new(NsVim25, "HostInternetScsiHbaParamValue")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaDiscoveryCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaDiscoveryCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["iSnsDiscoverySettable", "SOAP::SOAPBoolean"],
      ["slpDiscoverySettable", "SOAP::SOAPBoolean"],
      ["staticTargetDiscoverySettable", "SOAP::SOAPBoolean"],
      ["sendTargetsDiscoverySettable", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaDiscoveryProperties,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaDiscoveryProperties"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["iSnsDiscoveryEnabled", "SOAP::SOAPBoolean"],
      ["iSnsDiscoveryMethod", "SOAP::SOAPString", [0, 1]],
      ["iSnsHost", "SOAP::SOAPString", [0, 1]],
      ["slpDiscoveryEnabled", "SOAP::SOAPBoolean"],
      ["slpDiscoveryMethod", "SOAP::SOAPString", [0, 1]],
      ["slpHost", "SOAP::SOAPString", [0, 1]],
      ["staticTargetDiscoveryEnabled", "SOAP::SOAPBoolean"],
      ["sendTargetsDiscoveryEnabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaAuthenticationCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaAuthenticationCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["chapAuthSettable", "SOAP::SOAPBoolean"],
      ["krb5AuthSettable", "SOAP::SOAPBoolean"],
      ["srpAuthSettable", "SOAP::SOAPBoolean"],
      ["spkmAuthSettable", "SOAP::SOAPBoolean"],
      ["mutualChapSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetChapSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetMutualChapSettable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaAuthenticationProperties,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaAuthenticationProperties"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["chapAuthEnabled", "SOAP::SOAPBoolean"],
      ["chapName", "SOAP::SOAPString", [0, 1]],
      ["chapSecret", "SOAP::SOAPString", [0, 1]],
      ["chapAuthenticationType", "SOAP::SOAPString", [0, 1]],
      ["chapInherited", "SOAP::SOAPBoolean", [0, 1]],
      ["mutualChapName", "SOAP::SOAPString", [0, 1]],
      ["mutualChapSecret", "SOAP::SOAPString", [0, 1]],
      ["mutualChapAuthenticationType", "SOAP::SOAPString", [0, 1]],
      ["mutualChapInherited", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaDigestCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaDigestCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["headerDigestSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["dataDigestSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetHeaderDigestSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["targetDataDigestSettable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaDigestProperties,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaDigestProperties"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["headerDigestType", "SOAP::SOAPString", [0, 1]],
      ["headerDigestInherited", "SOAP::SOAPBoolean", [0, 1]],
      ["dataDigestType", "SOAP::SOAPString", [0, 1]],
      ["dataDigestInherited", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaIPCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaIPCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["addressSettable", "SOAP::SOAPBoolean"],
      ["ipConfigurationMethodSettable", "SOAP::SOAPBoolean"],
      ["subnetMaskSettable", "SOAP::SOAPBoolean"],
      ["defaultGatewaySettable", "SOAP::SOAPBoolean"],
      ["primaryDnsServerAddressSettable", "SOAP::SOAPBoolean"],
      ["alternateDnsServerAddressSettable", "SOAP::SOAPBoolean"],
      ["ipv6Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["arpRedirectSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["mtuSettable", "SOAP::SOAPBoolean", [0, 1]],
      ["hostNameAsTargetAddress", "SOAP::SOAPBoolean", [0, 1]],
      ["nameAliasSettable", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaIPProperties,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaIPProperties"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["mac", "SOAP::SOAPString", [0, 1]],
      ["address", "SOAP::SOAPString", [0, 1]],
      ["dhcpConfigurationEnabled", "SOAP::SOAPBoolean"],
      ["subnetMask", "SOAP::SOAPString", [0, 1]],
      ["defaultGateway", "SOAP::SOAPString", [0, 1]],
      ["primaryDnsServerAddress", "SOAP::SOAPString", [0, 1]],
      ["alternateDnsServerAddress", "SOAP::SOAPString", [0, 1]],
      ["ipv6Address", "SOAP::SOAPString", [0, 1]],
      ["ipv6SubnetMask", "SOAP::SOAPString", [0, 1]],
      ["ipv6DefaultGateway", "SOAP::SOAPString", [0, 1]],
      ["arpRedirectEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["jumboFramesEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaSendTarget,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaSendTarget"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["address", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["authenticationProperties", "VSphereCloud::HostInternetScsiHbaAuthenticationProperties", [0, 1]],
      ["digestProperties", "VSphereCloud::HostInternetScsiHbaDigestProperties", [0, 1]],
      ["supportedAdvancedOptions", "VSphereCloud::OptionDef[]", [0, nil]],
      ["advancedOptions", "VSphereCloud::HostInternetScsiHbaParamValue[]", [0, nil]],
      ["parent", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostInternetScsiHbaSendTarget,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostInternetScsiHbaSendTarget"),
    :schema_element => [
      ["hostInternetScsiHbaSendTarget", ["VSphereCloud::HostInternetScsiHbaSendTarget[]", XSD::QName.new(NsVim25, "HostInternetScsiHbaSendTarget")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaStaticTarget,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaStaticTarget"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["address", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["iScsiName", "SOAP::SOAPString"],
      ["authenticationProperties", "VSphereCloud::HostInternetScsiHbaAuthenticationProperties", [0, 1]],
      ["digestProperties", "VSphereCloud::HostInternetScsiHbaDigestProperties", [0, 1]],
      ["supportedAdvancedOptions", "VSphereCloud::OptionDef[]", [0, nil]],
      ["advancedOptions", "VSphereCloud::HostInternetScsiHbaParamValue[]", [0, nil]],
      ["parent", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostInternetScsiHbaStaticTarget,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostInternetScsiHbaStaticTarget"),
    :schema_element => [
      ["hostInternetScsiHbaStaticTarget", ["VSphereCloud::HostInternetScsiHbaStaticTarget[]", XSD::QName.new(NsVim25, "HostInternetScsiHbaStaticTarget")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaTargetSet,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaTargetSet"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["staticTargets", "VSphereCloud::HostInternetScsiHbaStaticTarget[]", [0, nil]],
      ["sendTargets", "VSphereCloud::HostInternetScsiHbaSendTarget[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiHba,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHba"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostHostBusAdapter"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["bus", "SOAP::SOAPInt"],
      ["status", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["pci", "SOAP::SOAPString", [0, 1]],
      ["isSoftwareBased", "SOAP::SOAPBoolean"],
      ["discoveryCapabilities", "VSphereCloud::HostInternetScsiHbaDiscoveryCapabilities"],
      ["discoveryProperties", "VSphereCloud::HostInternetScsiHbaDiscoveryProperties"],
      ["authenticationCapabilities", "VSphereCloud::HostInternetScsiHbaAuthenticationCapabilities"],
      ["authenticationProperties", "VSphereCloud::HostInternetScsiHbaAuthenticationProperties"],
      ["digestCapabilities", "VSphereCloud::HostInternetScsiHbaDigestCapabilities", [0, 1]],
      ["digestProperties", "VSphereCloud::HostInternetScsiHbaDigestProperties", [0, 1]],
      ["ipCapabilities", "VSphereCloud::HostInternetScsiHbaIPCapabilities"],
      ["ipProperties", "VSphereCloud::HostInternetScsiHbaIPProperties"],
      ["supportedAdvancedOptions", "VSphereCloud::OptionDef[]", [0, nil]],
      ["advancedOptions", "VSphereCloud::HostInternetScsiHbaParamValue[]", [0, nil]],
      ["iScsiName", "SOAP::SOAPString"],
      ["iScsiAlias", "SOAP::SOAPString", [0, 1]],
      ["configuredSendTarget", "VSphereCloud::HostInternetScsiHbaSendTarget[]", [0, nil]],
      ["configuredStaticTarget", "VSphereCloud::HostInternetScsiHbaStaticTarget[]", [0, nil]],
      ["maxSpeedMb", "SOAP::SOAPInt", [0, 1]],
      ["currentSpeedMb", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostProxySwitchSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostProxySwitchSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["backing", "VSphereCloud::DistributedVirtualSwitchHostMemberBacking", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostProxySwitchConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostProxySwitchConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostProxySwitchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostProxySwitchConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostProxySwitchConfig"),
    :schema_element => [
      ["hostProxySwitchConfig", ["VSphereCloud::HostProxySwitchConfig[]", XSD::QName.new(NsVim25, "HostProxySwitchConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostProxySwitch,
    :schema_type => XSD::QName.new(NsVim25, "HostProxySwitch"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dvsUuid", "SOAP::SOAPString"],
      ["dvsName", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["numPortsAvailable", "SOAP::SOAPInt"],
      ["uplinkPort", "VSphereCloud::KeyValue[]", [0, nil]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["pnic", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostProxySwitchSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostProxySwitch,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostProxySwitch"),
    :schema_element => [
      ["hostProxySwitch", ["VSphereCloud::HostProxySwitch[]", XSD::QName.new(NsVim25, "HostProxySwitch")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIpConfigIpV6Address,
    :schema_type => XSD::QName.new(NsVim25, "HostIpConfigIpV6Address"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["origin", "SOAP::SOAPString", [0, 1]],
      ["dadState", "SOAP::SOAPString", [0, 1]],
      ["lifetime", "SOAP::SOAPDateTime", [0, 1]],
      ["operation", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostIpConfigIpV6Address,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostIpConfigIpV6Address"),
    :schema_element => [
      ["hostIpConfigIpV6Address", ["VSphereCloud::HostIpConfigIpV6Address[]", XSD::QName.new(NsVim25, "HostIpConfigIpV6Address")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIpConfigIpV6AddressConfiguration,
    :schema_type => XSD::QName.new(NsVim25, "HostIpConfigIpV6AddressConfiguration"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipV6Address", "VSphereCloud::HostIpConfigIpV6Address[]", [0, nil]],
      ["autoConfigurationEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["dhcpV6Enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIpConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostIpConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["subnetMask", "SOAP::SOAPString", [0, 1]],
      ["ipV6Config", "VSphereCloud::HostIpConfigIpV6AddressConfiguration", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIpRouteConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostIpRouteConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["defaultGateway", "SOAP::SOAPString", [0, 1]],
      ["gatewayDevice", "SOAP::SOAPString", [0, 1]],
      ["ipV6DefaultGateway", "SOAP::SOAPString", [0, 1]],
      ["ipV6GatewayDevice", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIpRouteConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostIpRouteConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostIpRouteConfig"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["defaultGateway", "SOAP::SOAPString", [0, 1]],
      ["gatewayDevice", "SOAP::SOAPString", [0, 1]],
      ["ipV6DefaultGateway", "SOAP::SOAPString", [0, 1]],
      ["ipV6GatewayDevice", "SOAP::SOAPString", [0, 1]],
      ["gatewayDeviceConnection", "VSphereCloud::HostVirtualNicConnection", [0, 1]],
      ["ipV6GatewayDeviceConnection", "VSphereCloud::HostVirtualNicConnection", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIpRouteEntry,
    :schema_type => XSD::QName.new(NsVim25, "HostIpRouteEntry"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["gateway", "SOAP::SOAPString"],
      ["deviceName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostIpRouteEntry,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostIpRouteEntry"),
    :schema_element => [
      ["hostIpRouteEntry", ["VSphereCloud::HostIpRouteEntry[]", XSD::QName.new(NsVim25, "HostIpRouteEntry")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIpRouteOp,
    :schema_type => XSD::QName.new(NsVim25, "HostIpRouteOp"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString"],
      ["route", "VSphereCloud::HostIpRouteEntry"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostIpRouteOp,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostIpRouteOp"),
    :schema_element => [
      ["hostIpRouteOp", ["VSphereCloud::HostIpRouteOp[]", XSD::QName.new(NsVim25, "HostIpRouteOp")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIpRouteTableConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostIpRouteTableConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VSphereCloud::HostIpRouteOp[]", [0, nil]],
      ["ipv6Route", "VSphereCloud::HostIpRouteOp[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIpRouteTableInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostIpRouteTableInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VSphereCloud::HostIpRouteEntry[]", [0, nil]],
      ["ipv6Route", "VSphereCloud::HostIpRouteEntry[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIpmiInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostIpmiInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["bmcIpAddress", "SOAP::SOAPString", [0, 1]],
      ["bmcMacAddress", "SOAP::SOAPString", [0, 1]],
      ["login", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::KernelModuleSectionInfo,
    :schema_type => XSD::QName.new(NsVim25, "KernelModuleSectionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["address", "SOAP::SOAPLong"],
      ["length", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::KernelModuleInfo,
    :schema_type => XSD::QName.new(NsVim25, "KernelModuleInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"],
      ["optionString", "SOAP::SOAPString"],
      ["loaded", "SOAP::SOAPBoolean"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["useCount", "SOAP::SOAPInt"],
      ["readOnlySection", "VSphereCloud::KernelModuleSectionInfo"],
      ["writableSection", "VSphereCloud::KernelModuleSectionInfo"],
      ["textSection", "VSphereCloud::KernelModuleSectionInfo"],
      ["dataSection", "VSphereCloud::KernelModuleSectionInfo"],
      ["bssSection", "VSphereCloud::KernelModuleSectionInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfKernelModuleInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfKernelModuleInfo"),
    :schema_element => [
      ["kernelModuleInfo", ["VSphereCloud::KernelModuleInfo[]", XSD::QName.new(NsVim25, "KernelModuleInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostLicenseSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostLicenseSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["source", "VSphereCloud::LicenseSource", [0, 1]],
      ["editionKey", "SOAP::SOAPString", [0, 1]],
      ["disabledFeatureKey", "SOAP::SOAPString[]", [0, nil]],
      ["enabledFeatureKey", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LinkDiscoveryProtocolConfig,
    :schema_type => XSD::QName.new(NsVim25, "LinkDiscoveryProtocolConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["protocol", "SOAP::SOAPString"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostAccountSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostAccountSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostAccountSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostAccountSpec"),
    :schema_element => [
      ["hostAccountSpec", ["VSphereCloud::HostAccountSpec[]", XSD::QName.new(NsVim25, "HostAccountSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPosixAccountSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostPosixAccountSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostAccountSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["posixId", "SOAP::SOAPInt", [0, 1]],
      ["shellAccess", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostLocalAuthenticationInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostLocalAuthenticationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostAuthenticationStoreInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ServiceConsoleReservationInfo,
    :schema_type => XSD::QName.new(NsVim25, "ServiceConsoleReservationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["serviceConsoleReservedCfg", "SOAP::SOAPLong"],
      ["serviceConsoleReserved", "SOAP::SOAPLong"],
      ["unreserved", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineMemoryReservationInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineMemoryReservationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["virtualMachineMin", "SOAP::SOAPLong"],
      ["virtualMachineMax", "SOAP::SOAPLong"],
      ["virtualMachineReserved", "SOAP::SOAPLong"],
      ["allocationPolicy", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineMemoryReservationSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineMemoryReservationSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["virtualMachineReserved", "SOAP::SOAPLong", [0, 1]],
      ["allocationPolicy", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostMemorySpec,
    :schema_type => XSD::QName.new(NsVim25, "HostMemorySpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["serviceConsoleReservation", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostMountInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostMountInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "SOAP::SOAPString", [0, 1]],
      ["accessMode", "SOAP::SOAPString"],
      ["accessible", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostMultipathInfoLogicalUnitPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathInfoLogicalUnitPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostMultipathInfoLogicalUnitStorageArrayTypePolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathInfoLogicalUnitStorageArrayTypePolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostMultipathInfoFixedLogicalUnitPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathInfoFixedLogicalUnitPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostMultipathInfoLogicalUnitPolicy"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString"],
      ["prefer", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostMultipathInfoLogicalUnit,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathInfoLogicalUnit"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["id", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPString"],
      ["path", "VSphereCloud::HostMultipathInfoPath[]", [1, nil]],
      ["policy", "VSphereCloud::HostMultipathInfoLogicalUnitPolicy"],
      ["storageArrayTypePolicy", "VSphereCloud::HostMultipathInfoLogicalUnitStorageArrayTypePolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostMultipathInfoLogicalUnit,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostMultipathInfoLogicalUnit"),
    :schema_element => [
      ["hostMultipathInfoLogicalUnit", ["VSphereCloud::HostMultipathInfoLogicalUnit[]", XSD::QName.new(NsVim25, "HostMultipathInfoLogicalUnit")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostMultipathInfoPath,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathInfoPath"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["pathState", "SOAP::SOAPString"],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["isWorkingPath", "SOAP::SOAPBoolean", [0, 1]],
      ["adapter", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPString"],
      ["transport", "VSphereCloud::HostTargetTransport", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostMultipathInfoPath,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostMultipathInfoPath"),
    :schema_element => [
      ["hostMultipathInfoPath", ["VSphereCloud::HostMultipathInfoPath[]", XSD::QName.new(NsVim25, "HostMultipathInfoPath")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostMultipathInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["lun", "VSphereCloud::HostMultipathInfoLogicalUnit[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostMultipathStateInfoPath,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathStateInfoPath"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["pathState", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostMultipathStateInfoPath,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostMultipathStateInfoPath"),
    :schema_element => [
      ["hostMultipathStateInfoPath", ["VSphereCloud::HostMultipathStateInfoPath[]", XSD::QName.new(NsVim25, "HostMultipathStateInfoPath")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostMultipathStateInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostMultipathStateInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "VSphereCloud::HostMultipathStateInfoPath[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNatServicePortForwardSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostNatServicePortForwardSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["hostPort", "SOAP::SOAPInt"],
      ["guestPort", "SOAP::SOAPInt"],
      ["guestIpAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostNatServicePortForwardSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostNatServicePortForwardSpec"),
    :schema_element => [
      ["hostNatServicePortForwardSpec", ["VSphereCloud::HostNatServicePortForwardSpec[]", XSD::QName.new(NsVim25, "HostNatServicePortForwardSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNatServiceNameServiceSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostNatServiceNameServiceSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dnsAutoDetect", "SOAP::SOAPBoolean"],
      ["dnsPolicy", "SOAP::SOAPString"],
      ["dnsRetries", "SOAP::SOAPInt"],
      ["dnsTimeout", "SOAP::SOAPInt"],
      ["dnsNameServer", "SOAP::SOAPString[]", [0, nil]],
      ["nbdsTimeout", "SOAP::SOAPInt"],
      ["nbnsRetries", "SOAP::SOAPInt"],
      ["nbnsTimeout", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNatServiceSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostNatServiceSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["virtualSwitch", "SOAP::SOAPString"],
      ["activeFtp", "SOAP::SOAPBoolean"],
      ["allowAnyOui", "SOAP::SOAPBoolean"],
      ["configPort", "SOAP::SOAPBoolean"],
      ["ipGatewayAddress", "SOAP::SOAPString"],
      ["udpTimeout", "SOAP::SOAPInt"],
      ["portForward", "VSphereCloud::HostNatServicePortForwardSpec[]", [0, nil]],
      ["nameService", "VSphereCloud::HostNatServiceNameServiceSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNatServiceConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostNatServiceConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostNatServiceSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostNatServiceConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostNatServiceConfig"),
    :schema_element => [
      ["hostNatServiceConfig", ["VSphereCloud::HostNatServiceConfig[]", XSD::QName.new(NsVim25, "HostNatServiceConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNatService,
    :schema_type => XSD::QName.new(NsVim25, "HostNatService"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostNatServiceSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostNatService,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostNatService"),
    :schema_element => [
      ["hostNatService", ["VSphereCloud::HostNatService[]", XSD::QName.new(NsVim25, "HostNatService")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNetCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "HostNetCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["canSetPhysicalNicLinkSpeed", "SOAP::SOAPBoolean"],
      ["supportsNicTeaming", "SOAP::SOAPBoolean"],
      ["nicTeamingPolicy", "SOAP::SOAPString[]", [0, nil]],
      ["supportsVlan", "SOAP::SOAPBoolean"],
      ["usesServiceConsoleNic", "SOAP::SOAPBoolean"],
      ["supportsNetworkHints", "SOAP::SOAPBoolean"],
      ["maxPortGroupsPerVswitch", "SOAP::SOAPInt", [0, 1]],
      ["vswitchConfigSupported", "SOAP::SOAPBoolean"],
      ["vnicConfigSupported", "SOAP::SOAPBoolean"],
      ["ipRouteConfigSupported", "SOAP::SOAPBoolean"],
      ["dnsConfigSupported", "SOAP::SOAPBoolean"],
      ["dhcpOnVnicSupported", "SOAP::SOAPBoolean"],
      ["ipV6Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNetOffloadCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "HostNetOffloadCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["csumOffload", "SOAP::SOAPBoolean", [0, 1]],
      ["tcpSegmentation", "SOAP::SOAPBoolean", [0, 1]],
      ["zeroCopyXmit", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNetworkConfigResult,
    :schema_type => XSD::QName.new(NsVim25, "HostNetworkConfigResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vnicDevice", "SOAP::SOAPString[]", [0, nil]],
      ["consoleVnicDevice", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNetworkConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostNetworkConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vswitch", "VSphereCloud::HostVirtualSwitchConfig[]", [0, nil]],
      ["proxySwitch", "VSphereCloud::HostProxySwitchConfig[]", [0, nil]],
      ["portgroup", "VSphereCloud::HostPortGroupConfig[]", [0, nil]],
      ["pnic", "VSphereCloud::PhysicalNicConfig[]", [0, nil]],
      ["vnic", "VSphereCloud::HostVirtualNicConfig[]", [0, nil]],
      ["consoleVnic", "VSphereCloud::HostVirtualNicConfig[]", [0, nil]],
      ["dnsConfig", "VSphereCloud::HostDnsConfig", [0, 1]],
      ["ipRouteConfig", "VSphereCloud::HostIpRouteConfig", [0, 1]],
      ["consoleIpRouteConfig", "VSphereCloud::HostIpRouteConfig", [0, 1]],
      ["routeTableConfig", "VSphereCloud::HostIpRouteTableConfig", [0, 1]],
      ["dhcp", "VSphereCloud::HostDhcpServiceConfig[]", [0, nil]],
      ["nat", "VSphereCloud::HostNatServiceConfig[]", [0, nil]],
      ["ipV6Enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNetworkInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostNetworkInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vswitch", "VSphereCloud::HostVirtualSwitch[]", [0, nil]],
      ["proxySwitch", "VSphereCloud::HostProxySwitch[]", [0, nil]],
      ["portgroup", "VSphereCloud::HostPortGroup[]", [0, nil]],
      ["pnic", "VSphereCloud::PhysicalNic[]", [0, nil]],
      ["vnic", "VSphereCloud::HostVirtualNic[]", [0, nil]],
      ["consoleVnic", "VSphereCloud::HostVirtualNic[]", [0, nil]],
      ["dnsConfig", "VSphereCloud::HostDnsConfig", [0, 1]],
      ["ipRouteConfig", "VSphereCloud::HostIpRouteConfig", [0, 1]],
      ["consoleIpRouteConfig", "VSphereCloud::HostIpRouteConfig", [0, 1]],
      ["routeTableInfo", "VSphereCloud::HostIpRouteTableInfo", [0, 1]],
      ["dhcp", "VSphereCloud::HostDhcpService[]", [0, nil]],
      ["nat", "VSphereCloud::HostNatService[]", [0, nil]],
      ["ipV6Enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["atBootIpV6Enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNetworkSecurityPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostNetworkSecurityPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["allowPromiscuous", "SOAP::SOAPBoolean", [0, 1]],
      ["macChanges", "SOAP::SOAPBoolean", [0, 1]],
      ["forgedTransmits", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNetworkTrafficShapingPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostNetworkTrafficShapingPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["averageBandwidth", "SOAP::SOAPLong", [0, 1]],
      ["peakBandwidth", "SOAP::SOAPLong", [0, 1]],
      ["burstSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNicFailureCriteria,
    :schema_type => XSD::QName.new(NsVim25, "HostNicFailureCriteria"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["checkSpeed", "SOAP::SOAPString", [0, 1]],
      ["speed", "SOAP::SOAPInt", [0, 1]],
      ["checkDuplex", "SOAP::SOAPBoolean", [0, 1]],
      ["fullDuplex", "SOAP::SOAPBoolean", [0, 1]],
      ["checkErrorPercent", "SOAP::SOAPBoolean", [0, 1]],
      ["percentage", "SOAP::SOAPInt", [0, 1]],
      ["checkBeacon", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNicOrderPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostNicOrderPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeNic", "SOAP::SOAPString[]", [0, nil]],
      ["standbyNic", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNicTeamingPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostNicTeamingPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["policy", "SOAP::SOAPString", [0, 1]],
      ["reversePolicy", "SOAP::SOAPBoolean", [0, 1]],
      ["notifySwitches", "SOAP::SOAPBoolean", [0, 1]],
      ["rollingOrder", "SOAP::SOAPBoolean", [0, 1]],
      ["failureCriteria", "VSphereCloud::HostNicFailureCriteria", [0, 1]],
      ["nicOrder", "VSphereCloud::HostNicOrderPolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNetworkPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostNetworkPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["security", "VSphereCloud::HostNetworkSecurityPolicy", [0, 1]],
      ["nicTeaming", "VSphereCloud::HostNicTeamingPolicy", [0, 1]],
      ["offloadPolicy", "VSphereCloud::HostNetOffloadCapabilities", [0, 1]],
      ["shapingPolicy", "VSphereCloud::HostNetworkTrafficShapingPolicy", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNtpConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostNtpConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["server", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNumericSensorInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostNumericSensorInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["healthState", "VSphereCloud::ElementDescription", [0, 1]],
      ["currentReading", "SOAP::SOAPLong"],
      ["unitModifier", "SOAP::SOAPInt"],
      ["baseUnits", "SOAP::SOAPString"],
      ["rateUnits", "SOAP::SOAPString", [0, 1]],
      ["sensorType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostNumericSensorInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostNumericSensorInfo"),
    :schema_element => [
      ["hostNumericSensorInfo", ["VSphereCloud::HostNumericSensorInfo[]", XSD::QName.new(NsVim25, "HostNumericSensorInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPatchManagerResult,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["status", "VSphereCloud::HostPatchManagerStatus[]", [0, nil]],
      ["xmlResult", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPatchManagerStatusPrerequisitePatch,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerStatusPrerequisitePatch"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["installState", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPatchManagerStatusPrerequisitePatch,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPatchManagerStatusPrerequisitePatch"),
    :schema_element => [
      ["hostPatchManagerStatusPrerequisitePatch", ["VSphereCloud::HostPatchManagerStatusPrerequisitePatch[]", XSD::QName.new(NsVim25, "HostPatchManagerStatusPrerequisitePatch")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPatchManagerStatus,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerStatus"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["applicable", "SOAP::SOAPBoolean"],
      ["reason", "SOAP::SOAPString[]", [0, nil]],
      ["integrity", "SOAP::SOAPString", [0, 1]],
      ["installed", "SOAP::SOAPBoolean"],
      ["installState", "SOAP::SOAPString[]", [0, nil]],
      ["prerequisitePatch", "VSphereCloud::HostPatchManagerStatusPrerequisitePatch[]", [0, nil]],
      ["restartRequired", "SOAP::SOAPBoolean"],
      ["reconnectRequired", "SOAP::SOAPBoolean"],
      ["vmOffRequired", "SOAP::SOAPBoolean"],
      ["supersededPatchIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPatchManagerStatus,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPatchManagerStatus"),
    :schema_element => [
      ["hostPatchManagerStatus", ["VSphereCloud::HostPatchManagerStatus[]", XSD::QName.new(NsVim25, "HostPatchManagerStatus")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPatchManagerLocator,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerLocator"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["url", "SOAP::SOAPString"],
      ["proxy", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPatchManagerPatchManagerOperationSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerPatchManagerOperationSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["proxy", "SOAP::SOAPString", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["userName", "SOAP::SOAPString", [0, 1]],
      ["password", "SOAP::SOAPString", [0, 1]],
      ["cmdOption", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPathSelectionPolicyOption,
    :schema_type => XSD::QName.new(NsVim25, "HostPathSelectionPolicyOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["policy", "VSphereCloud::ElementDescription"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPathSelectionPolicyOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPathSelectionPolicyOption"),
    :schema_element => [
      ["hostPathSelectionPolicyOption", ["VSphereCloud::HostPathSelectionPolicyOption[]", XSD::QName.new(NsVim25, "HostPathSelectionPolicyOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPciDevice,
    :schema_type => XSD::QName.new(NsVim25, "HostPciDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["classId", "SOAP::SOAPShort"],
      ["bus", "SOAP::SOAPByte"],
      ["slot", "SOAP::SOAPByte"],
      ["function", "SOAP::SOAPByte"],
      ["vendorId", "SOAP::SOAPShort"],
      ["subVendorId", "SOAP::SOAPShort"],
      ["vendorName", "SOAP::SOAPString"],
      ["deviceId", "SOAP::SOAPShort"],
      ["subDeviceId", "SOAP::SOAPShort"],
      ["parentBridge", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPciDevice,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPciDevice"),
    :schema_element => [
      ["hostPciDevice", ["VSphereCloud::HostPciDevice[]", XSD::QName.new(NsVim25, "HostPciDevice")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPciPassthruConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostPciPassthruConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["passthruEnabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPciPassthruConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPciPassthruConfig"),
    :schema_element => [
      ["hostPciPassthruConfig", ["VSphereCloud::HostPciPassthruConfig[]", XSD::QName.new(NsVim25, "HostPciPassthruConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPciPassthruInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostPciPassthruInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["dependentDevice", "SOAP::SOAPString"],
      ["passthruEnabled", "SOAP::SOAPBoolean"],
      ["passthruCapable", "SOAP::SOAPBoolean"],
      ["passthruActive", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPciPassthruInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPciPassthruInfo"),
    :schema_element => [
      ["hostPciPassthruInfo", ["VSphereCloud::HostPciPassthruInfo[]", XSD::QName.new(NsVim25, "HostPciPassthruInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PhysicalNicSpec,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ip", "VSphereCloud::HostIpConfig", [0, 1]],
      ["linkSpeed", "VSphereCloud::PhysicalNicLinkInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PhysicalNicConfig,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::PhysicalNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPhysicalNicConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPhysicalNicConfig"),
    :schema_element => [
      ["physicalNicConfig", ["VSphereCloud::PhysicalNicConfig[]", XSD::QName.new(NsVim25, "PhysicalNicConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PhysicalNicLinkInfo,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicLinkInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["speedMb", "SOAP::SOAPInt"],
      ["duplex", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPhysicalNicLinkInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPhysicalNicLinkInfo"),
    :schema_element => [
      ["physicalNicLinkInfo", ["VSphereCloud::PhysicalNicLinkInfo[]", XSD::QName.new(NsVim25, "PhysicalNicLinkInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PhysicalNicHint,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicHint"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vlanId", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PhysicalNicIpHint,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicIpHint"),
    :schema_basetype => XSD::QName.new(NsVim25, "PhysicalNicHint"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vlanId", "SOAP::SOAPInt", [0, 1]],
      ["ipSubnet", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPhysicalNicIpHint,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPhysicalNicIpHint"),
    :schema_element => [
      ["physicalNicIpHint", ["VSphereCloud::PhysicalNicIpHint[]", XSD::QName.new(NsVim25, "PhysicalNicIpHint")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PhysicalNicNameHint,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicNameHint"),
    :schema_basetype => XSD::QName.new(NsVim25, "PhysicalNicHint"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vlanId", "SOAP::SOAPInt", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPhysicalNicNameHint,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPhysicalNicNameHint"),
    :schema_element => [
      ["physicalNicNameHint", ["VSphereCloud::PhysicalNicNameHint[]", XSD::QName.new(NsVim25, "PhysicalNicNameHint")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PhysicalNicHintInfo,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicHintInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["subnet", "VSphereCloud::PhysicalNicIpHint[]", [0, nil]],
      ["network", "VSphereCloud::PhysicalNicNameHint[]", [0, nil]],
      ["connectedSwitchPort", "VSphereCloud::PhysicalNicCdpInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPhysicalNicHintInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPhysicalNicHintInfo"),
    :schema_element => [
      ["physicalNicHintInfo", ["VSphereCloud::PhysicalNicHintInfo[]", XSD::QName.new(NsVim25, "PhysicalNicHintInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PhysicalNicCdpDeviceCapability,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicCdpDeviceCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["router", "SOAP::SOAPBoolean"],
      ["transparentBridge", "SOAP::SOAPBoolean"],
      ["sourceRouteBridge", "SOAP::SOAPBoolean"],
      ["networkSwitch", "SOAP::SOAPBoolean"],
      ["host", "SOAP::SOAPBoolean"],
      ["igmpEnabled", "SOAP::SOAPBoolean"],
      ["repeater", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PhysicalNicCdpInfo,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicCdpInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["cdpVersion", "SOAP::SOAPInt", [0, 1]],
      ["timeout", "SOAP::SOAPInt", [0, 1]],
      ["ttl", "SOAP::SOAPInt", [0, 1]],
      ["samples", "SOAP::SOAPInt", [0, 1]],
      ["devId", "SOAP::SOAPString", [0, 1]],
      ["address", "SOAP::SOAPString", [0, 1]],
      ["portId", "SOAP::SOAPString", [0, 1]],
      ["deviceCapability", "VSphereCloud::PhysicalNicCdpDeviceCapability", [0, 1]],
      ["softwareVersion", "SOAP::SOAPString", [0, 1]],
      ["hardwarePlatform", "SOAP::SOAPString", [0, 1]],
      ["ipPrefix", "SOAP::SOAPString", [0, 1]],
      ["ipPrefixLen", "SOAP::SOAPInt", [0, 1]],
      ["vlan", "SOAP::SOAPInt", [0, 1]],
      ["fullDuplex", "SOAP::SOAPBoolean", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["systemName", "SOAP::SOAPString", [0, 1]],
      ["systemOID", "SOAP::SOAPString", [0, 1]],
      ["mgmtAddr", "SOAP::SOAPString", [0, 1]],
      ["location", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PhysicalNic,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNic"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString"],
      ["pci", "SOAP::SOAPString"],
      ["driver", "SOAP::SOAPString", [0, 1]],
      ["linkSpeed", "VSphereCloud::PhysicalNicLinkInfo", [0, 1]],
      ["validLinkSpecification", "VSphereCloud::PhysicalNicLinkInfo[]", [0, nil]],
      ["spec", "VSphereCloud::PhysicalNicSpec"],
      ["wakeOnLanSupported", "SOAP::SOAPBoolean"],
      ["mac", "SOAP::SOAPString"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmDirectPathGen2SupportedMode", "SOAP::SOAPString", [0, 1]],
      ["resourcePoolSchedulerAllowed", "SOAP::SOAPBoolean", [0, 1]],
      ["resourcePoolSchedulerDisallowedReason", "SOAP::SOAPString[]", [0, nil]],
      ["autoNegotiateSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPhysicalNic,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPhysicalNic"),
    :schema_element => [
      ["physicalNic", ["VSphereCloud::PhysicalNic[]", XSD::QName.new(NsVim25, "PhysicalNic")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPlugStoreTopologyAdapter,
    :schema_type => XSD::QName.new(NsVim25, "HostPlugStoreTopologyAdapter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["adapter", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPlugStoreTopologyAdapter,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPlugStoreTopologyAdapter"),
    :schema_element => [
      ["hostPlugStoreTopologyAdapter", ["VSphereCloud::HostPlugStoreTopologyAdapter[]", XSD::QName.new(NsVim25, "HostPlugStoreTopologyAdapter")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPlugStoreTopologyPath,
    :schema_type => XSD::QName.new(NsVim25, "HostPlugStoreTopologyPath"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["channelNumber", "SOAP::SOAPInt", [0, 1]],
      ["targetNumber", "SOAP::SOAPInt", [0, 1]],
      ["lunNumber", "SOAP::SOAPInt", [0, 1]],
      ["adapter", "SOAP::SOAPString", [0, 1]],
      ["target", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPlugStoreTopologyPath,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPlugStoreTopologyPath"),
    :schema_element => [
      ["hostPlugStoreTopologyPath", ["VSphereCloud::HostPlugStoreTopologyPath[]", XSD::QName.new(NsVim25, "HostPlugStoreTopologyPath")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPlugStoreTopologyDevice,
    :schema_type => XSD::QName.new(NsVim25, "HostPlugStoreTopologyDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPlugStoreTopologyDevice,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPlugStoreTopologyDevice"),
    :schema_element => [
      ["hostPlugStoreTopologyDevice", ["VSphereCloud::HostPlugStoreTopologyDevice[]", XSD::QName.new(NsVim25, "HostPlugStoreTopologyDevice")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPlugStoreTopologyPlugin,
    :schema_type => XSD::QName.new(NsVim25, "HostPlugStoreTopologyPlugin"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString[]", [0, nil]],
      ["claimedPath", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPlugStoreTopologyPlugin,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPlugStoreTopologyPlugin"),
    :schema_element => [
      ["hostPlugStoreTopologyPlugin", ["VSphereCloud::HostPlugStoreTopologyPlugin[]", XSD::QName.new(NsVim25, "HostPlugStoreTopologyPlugin")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPlugStoreTopologyTarget,
    :schema_type => XSD::QName.new(NsVim25, "HostPlugStoreTopologyTarget"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["transport", "VSphereCloud::HostTargetTransport", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPlugStoreTopologyTarget,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPlugStoreTopologyTarget"),
    :schema_element => [
      ["hostPlugStoreTopologyTarget", ["VSphereCloud::HostPlugStoreTopologyTarget[]", XSD::QName.new(NsVim25, "HostPlugStoreTopologyTarget")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPlugStoreTopology,
    :schema_type => XSD::QName.new(NsVim25, "HostPlugStoreTopology"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["adapter", "VSphereCloud::HostPlugStoreTopologyAdapter[]", [0, nil]],
      ["path", "VSphereCloud::HostPlugStoreTopologyPath[]", [0, nil]],
      ["target", "VSphereCloud::HostPlugStoreTopologyTarget[]", [0, nil]],
      ["device", "VSphereCloud::HostPlugStoreTopologyDevice[]", [0, nil]],
      ["plugin", "VSphereCloud::HostPlugStoreTopologyPlugin[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPortGroupSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostPortGroupSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["vlanId", "SOAP::SOAPInt"],
      ["vswitchName", "SOAP::SOAPString"],
      ["policy", "VSphereCloud::HostNetworkPolicy"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPortGroupConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostPortGroupConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["spec", "VSphereCloud::HostPortGroupSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPortGroupConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPortGroupConfig"),
    :schema_element => [
      ["hostPortGroupConfig", ["VSphereCloud::HostPortGroupConfig[]", XSD::QName.new(NsVim25, "HostPortGroupConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPortGroupPort,
    :schema_type => XSD::QName.new(NsVim25, "HostPortGroupPort"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["mac", "SOAP::SOAPString[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPortGroupPort,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPortGroupPort"),
    :schema_element => [
      ["hostPortGroupPort", ["VSphereCloud::HostPortGroupPort[]", XSD::QName.new(NsVim25, "HostPortGroupPort")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPortGroup,
    :schema_type => XSD::QName.new(NsVim25, "HostPortGroup"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["port", "VSphereCloud::HostPortGroupPort[]", [0, nil]],
      ["vswitch", "SOAP::SOAPString", [0, 1]],
      ["computedPolicy", "VSphereCloud::HostNetworkPolicy"],
      ["spec", "VSphereCloud::HostPortGroupSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPortGroup,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPortGroup"),
    :schema_element => [
      ["hostPortGroup", ["VSphereCloud::HostPortGroup[]", XSD::QName.new(NsVim25, "HostPortGroup")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPowerPolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostPowerPolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["shortName", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPowerPolicy,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPowerPolicy"),
    :schema_element => [
      ["hostPowerPolicy", ["VSphereCloud::HostPowerPolicy[]", XSD::QName.new(NsVim25, "HostPowerPolicy")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerSystemCapability,
    :schema_type => XSD::QName.new(NsVim25, "PowerSystemCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["availablePolicy", "VSphereCloud::HostPowerPolicy[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerSystemInfo,
    :schema_type => XSD::QName.new(NsVim25, "PowerSystemInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["currentPolicy", "VSphereCloud::HostPowerPolicy"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostResignatureRescanResult,
    :schema_type => XSD::QName.new(NsVim25, "HostResignatureRescanResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["rescan", "VSphereCloud::HostVmfsRescanResult[]", [0, nil]],
      ["result", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFirewallRule,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallRule"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["port", "SOAP::SOAPInt"],
      ["endPort", "SOAP::SOAPInt", [0, 1]],
      ["direction", "VSphereCloud::HostFirewallRuleDirection"],
      ["protocol", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostFirewallRule,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostFirewallRule"),
    :schema_element => [
      ["hostFirewallRule", ["VSphereCloud::HostFirewallRule[]", XSD::QName.new(NsVim25, "HostFirewallRule")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFirewallRuleset,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallRuleset"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["required", "SOAP::SOAPBoolean"],
      ["rule", "VSphereCloud::HostFirewallRule[]", [1, nil]],
      ["service", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostFirewallRuleset,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostFirewallRuleset"),
    :schema_element => [
      ["hostFirewallRuleset", ["VSphereCloud::HostFirewallRuleset[]", XSD::QName.new(NsVim25, "HostFirewallRuleset")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostRuntimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostRuntimeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["connectionState", "VSphereCloud::HostSystemConnectionState"],
      ["powerState", "VSphereCloud::HostSystemPowerState"],
      ["standbyMode", "SOAP::SOAPString", [0, 1]],
      ["inMaintenanceMode", "SOAP::SOAPBoolean"],
      ["bootTime", "SOAP::SOAPDateTime", [0, 1]],
      ["healthSystemRuntime", "VSphereCloud::HealthSystemRuntime", [0, 1]],
      ["tpmPcrValues", "VSphereCloud::HostTpmDigestInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostScsiDiskPartition,
    :schema_type => XSD::QName.new(NsVim25, "HostScsiDiskPartition"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskName", "SOAP::SOAPString"],
      ["partition", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostScsiDiskPartition,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostScsiDiskPartition"),
    :schema_element => [
      ["hostScsiDiskPartition", ["VSphereCloud::HostScsiDiskPartition[]", XSD::QName.new(NsVim25, "HostScsiDiskPartition")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostScsiDisk,
    :schema_type => XSD::QName.new(NsVim25, "HostScsiDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScsiLun"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["descriptor", "VSphereCloud::ScsiLunDescriptor[]", [0, nil]],
      ["canonicalName", "SOAP::SOAPString", [0, 1]],
      ["displayName", "SOAP::SOAPString", [0, 1]],
      ["lunType", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["model", "SOAP::SOAPString", [0, 1]],
      ["revision", "SOAP::SOAPString", [0, 1]],
      ["scsiLevel", "SOAP::SOAPInt", [0, 1]],
      ["serialNumber", "SOAP::SOAPString", [0, 1]],
      ["durableName", "VSphereCloud::ScsiLunDurableName", [0, 1]],
      ["alternateName", "VSphereCloud::ScsiLunDurableName[]", [0, nil]],
      ["standardInquiry", "SOAP::SOAPByte[]", [0, nil]],
      ["queueDepth", "SOAP::SOAPInt", [0, 1]],
      ["operationalState", "SOAP::SOAPString[]", [1, nil]],
      ["capabilities", "VSphereCloud::ScsiLunCapabilities", [0, 1]],
      ["vStorageSupport", "SOAP::SOAPString", [0, 1]],
      ["capacity", "VSphereCloud::HostDiskDimensionsLba"],
      ["devicePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostScsiDisk,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostScsiDisk"),
    :schema_element => [
      ["hostScsiDisk", ["VSphereCloud::HostScsiDisk[]", XSD::QName.new(NsVim25, "HostScsiDisk")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScsiLunCapabilities,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLunCapabilities"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["updateDisplayNameSupported", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScsiLunDurableName,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLunDurableName"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["namespace", "SOAP::SOAPString"],
      ["namespaceId", "SOAP::SOAPByte"],
      ["data", "SOAP::SOAPByte[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfScsiLunDurableName,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfScsiLunDurableName"),
    :schema_element => [
      ["scsiLunDurableName", ["VSphereCloud::ScsiLunDurableName[]", XSD::QName.new(NsVim25, "ScsiLunDurableName")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScsiLunDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLunDescriptor"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["quality", "SOAP::SOAPString"],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfScsiLunDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfScsiLunDescriptor"),
    :schema_element => [
      ["scsiLunDescriptor", ["VSphereCloud::ScsiLunDescriptor[]", XSD::QName.new(NsVim25, "ScsiLunDescriptor")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScsiLun,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLun"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["descriptor", "VSphereCloud::ScsiLunDescriptor[]", [0, nil]],
      ["canonicalName", "SOAP::SOAPString", [0, 1]],
      ["displayName", "SOAP::SOAPString", [0, 1]],
      ["lunType", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["model", "SOAP::SOAPString", [0, 1]],
      ["revision", "SOAP::SOAPString", [0, 1]],
      ["scsiLevel", "SOAP::SOAPInt", [0, 1]],
      ["serialNumber", "SOAP::SOAPString", [0, 1]],
      ["durableName", "VSphereCloud::ScsiLunDurableName", [0, 1]],
      ["alternateName", "VSphereCloud::ScsiLunDurableName[]", [0, nil]],
      ["standardInquiry", "SOAP::SOAPByte[]", [0, nil]],
      ["queueDepth", "SOAP::SOAPInt", [0, 1]],
      ["operationalState", "SOAP::SOAPString[]", [1, nil]],
      ["capabilities", "VSphereCloud::ScsiLunCapabilities", [0, 1]],
      ["vStorageSupport", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfScsiLun,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfScsiLun"),
    :schema_element => [
      ["scsiLun", ["VSphereCloud::ScsiLun[]", XSD::QName.new(NsVim25, "ScsiLun")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostScsiTopologyInterface,
    :schema_type => XSD::QName.new(NsVim25, "HostScsiTopologyInterface"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["adapter", "SOAP::SOAPString"],
      ["target", "VSphereCloud::HostScsiTopologyTarget[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostScsiTopologyInterface,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostScsiTopologyInterface"),
    :schema_element => [
      ["hostScsiTopologyInterface", ["VSphereCloud::HostScsiTopologyInterface[]", XSD::QName.new(NsVim25, "HostScsiTopologyInterface")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostScsiTopologyTarget,
    :schema_type => XSD::QName.new(NsVim25, "HostScsiTopologyTarget"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["target", "SOAP::SOAPInt"],
      ["lun", "VSphereCloud::HostScsiTopologyLun[]", [0, nil]],
      ["transport", "VSphereCloud::HostTargetTransport", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostScsiTopologyTarget,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostScsiTopologyTarget"),
    :schema_element => [
      ["hostScsiTopologyTarget", ["VSphereCloud::HostScsiTopologyTarget[]", XSD::QName.new(NsVim25, "HostScsiTopologyTarget")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostScsiTopologyLun,
    :schema_type => XSD::QName.new(NsVim25, "HostScsiTopologyLun"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["lun", "SOAP::SOAPInt"],
      ["scsiLun", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostScsiTopologyLun,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostScsiTopologyLun"),
    :schema_element => [
      ["hostScsiTopologyLun", ["VSphereCloud::HostScsiTopologyLun[]", XSD::QName.new(NsVim25, "HostScsiTopologyLun")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostScsiTopology,
    :schema_type => XSD::QName.new(NsVim25, "HostScsiTopology"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["adapter", "VSphereCloud::HostScsiTopologyInterface[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostSecuritySpec,
    :schema_type => XSD::QName.new(NsVim25, "HostSecuritySpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["adminPassword", "SOAP::SOAPString", [0, 1]],
      ["removePermission", "VSphereCloud::Permission[]", [0, nil]],
      ["addPermission", "VSphereCloud::Permission[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostService,
    :schema_type => XSD::QName.new(NsVim25, "HostService"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["required", "SOAP::SOAPBoolean"],
      ["uninstallable", "SOAP::SOAPBoolean"],
      ["running", "SOAP::SOAPBoolean"],
      ["ruleset", "SOAP::SOAPString[]", [0, nil]],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostService,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostService"),
    :schema_element => [
      ["hostService", ["VSphereCloud::HostService[]", XSD::QName.new(NsVim25, "HostService")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostServiceConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostServiceConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["serviceId", "SOAP::SOAPString"],
      ["startupPolicy", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostServiceConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostServiceConfig"),
    :schema_element => [
      ["hostServiceConfig", ["VSphereCloud::HostServiceConfig[]", XSD::QName.new(NsVim25, "HostServiceConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostServiceInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostServiceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["service", "VSphereCloud::HostService[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostSnmpDestination,
    :schema_type => XSD::QName.new(NsVim25, "HostSnmpDestination"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt"],
      ["community", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostSnmpDestination,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostSnmpDestination"),
    :schema_element => [
      ["hostSnmpDestination", ["VSphereCloud::HostSnmpDestination[]", XSD::QName.new(NsVim25, "HostSnmpDestination")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostSnmpConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostSnmpConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["port", "SOAP::SOAPInt", [0, 1]],
      ["readOnlyCommunities", "SOAP::SOAPString[]", [0, nil]],
      ["trapTargets", "VSphereCloud::HostSnmpDestination[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostSnmpSystemAgentLimits,
    :schema_type => XSD::QName.new(NsVim25, "HostSnmpSystemAgentLimits"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["maxReadOnlyCommunities", "SOAP::SOAPInt"],
      ["maxTrapDestinations", "SOAP::SOAPInt"],
      ["maxCommunityLength", "SOAP::SOAPInt"],
      ["maxBufferSize", "SOAP::SOAPInt"],
      ["capability", "VSphereCloud::HostSnmpAgentCapability", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostSslThumbprintInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostSslThumbprintInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["sslThumbprints", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostStorageArrayTypePolicyOption,
    :schema_type => XSD::QName.new(NsVim25, "HostStorageArrayTypePolicyOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["policy", "VSphereCloud::ElementDescription"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostStorageArrayTypePolicyOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostStorageArrayTypePolicyOption"),
    :schema_element => [
      ["hostStorageArrayTypePolicyOption", ["VSphereCloud::HostStorageArrayTypePolicyOption[]", XSD::QName.new(NsVim25, "HostStorageArrayTypePolicyOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostStorageDeviceInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostStorageDeviceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["hostBusAdapter", "VSphereCloud::HostHostBusAdapter[]", [0, nil]],
      ["scsiLun", "VSphereCloud::ScsiLun[]", [0, nil]],
      ["scsiTopology", "VSphereCloud::HostScsiTopology", [0, 1]],
      ["multipathInfo", "VSphereCloud::HostMultipathInfo", [0, 1]],
      ["plugStoreTopology", "VSphereCloud::HostPlugStoreTopology", [0, 1]],
      ["softwareInternetScsiEnabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostHardwareSummary,
    :schema_type => XSD::QName.new(NsVim25, "HostHardwareSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vendor", "SOAP::SOAPString"],
      ["model", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["otherIdentifyingInfo", "VSphereCloud::HostSystemIdentificationInfo[]", [0, nil]],
      ["memorySize", "SOAP::SOAPLong"],
      ["cpuModel", "SOAP::SOAPString"],
      ["cpuMhz", "SOAP::SOAPInt"],
      ["numCpuPkgs", "SOAP::SOAPShort"],
      ["numCpuCores", "SOAP::SOAPShort"],
      ["numCpuThreads", "SOAP::SOAPShort"],
      ["numNics", "SOAP::SOAPInt"],
      ["numHBAs", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostListSummaryQuickStats,
    :schema_type => XSD::QName.new(NsVim25, "HostListSummaryQuickStats"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["overallCpuUsage", "SOAP::SOAPInt", [0, 1]],
      ["overallMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["distributedCpuFairness", "SOAP::SOAPInt", [0, 1]],
      ["distributedMemoryFairness", "SOAP::SOAPInt", [0, 1]],
      ["uptime", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConfigSummary,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt"],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]],
      ["product", "VSphereCloud::AboutInfo", [0, 1]],
      ["vmotionEnabled", "SOAP::SOAPBoolean"],
      ["faultToleranceEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["featureVersion", "VSphereCloud::HostFeatureVersionInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostListSummary,
    :schema_type => XSD::QName.new(NsVim25, "HostListSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["hardware", "VSphereCloud::HostHardwareSummary", [0, 1]],
      ["runtime", "VSphereCloud::HostRuntimeInfo", [0, 1]],
      ["config", "VSphereCloud::HostConfigSummary"],
      ["quickStats", "VSphereCloud::HostListSummaryQuickStats"],
      ["overallStatus", "VSphereCloud::ManagedEntityStatus"],
      ["rebootRequired", "SOAP::SOAPBoolean"],
      ["customValue", "VSphereCloud::CustomFieldValue[]", [0, nil]],
      ["managementServerIp", "SOAP::SOAPString", [0, 1]],
      ["maxEVCModeKey", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostSystemHealthInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostSystemHealthInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["numericSensorInfo", "VSphereCloud::HostNumericSensorInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostSystemIdentificationInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostSystemIdentificationInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["identifierValue", "SOAP::SOAPString"],
      ["identifierType", "VSphereCloud::ElementDescription"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostSystemIdentificationInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostSystemIdentificationInfo"),
    :schema_element => [
      ["hostSystemIdentificationInfo", ["VSphereCloud::HostSystemIdentificationInfo[]", XSD::QName.new(NsVim25, "HostSystemIdentificationInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostSystemResourceInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostSystemResourceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["config", "VSphereCloud::ResourceConfigSpec", [0, 1]],
      ["child", "VSphereCloud::HostSystemResourceInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostSystemResourceInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostSystemResourceInfo"),
    :schema_element => [
      ["hostSystemResourceInfo", ["VSphereCloud::HostSystemResourceInfo[]", XSD::QName.new(NsVim25, "HostSystemResourceInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostTargetTransport,
    :schema_type => XSD::QName.new(NsVim25, "HostTargetTransport"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostParallelScsiTargetTransport,
    :schema_type => XSD::QName.new(NsVim25, "HostParallelScsiTargetTransport"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostTargetTransport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostBlockAdapterTargetTransport,
    :schema_type => XSD::QName.new(NsVim25, "HostBlockAdapterTargetTransport"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostTargetTransport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFibreChannelTargetTransport,
    :schema_type => XSD::QName.new(NsVim25, "HostFibreChannelTargetTransport"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostTargetTransport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["portWorldWideName", "SOAP::SOAPLong"],
      ["nodeWorldWideName", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiTargetTransport,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiTargetTransport"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostTargetTransport"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["iScsiName", "SOAP::SOAPString"],
      ["iScsiAlias", "SOAP::SOAPString"],
      ["address", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDigestInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDigestInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["digestMethod", "SOAP::SOAPString"],
      ["digestValue", "SOAP::SOAPByte[]", [1, nil]],
      ["objectName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostTpmDigestInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostTpmDigestInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostDigestInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["digestMethod", "SOAP::SOAPString"],
      ["digestValue", "SOAP::SOAPByte[]", [1, nil]],
      ["objectName", "SOAP::SOAPString", [0, 1]],
      ["pcrNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostTpmDigestInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostTpmDigestInfo"),
    :schema_element => [
      ["hostTpmDigestInfo", ["VSphereCloud::HostTpmDigestInfo[]", XSD::QName.new(NsVim25, "HostTpmDigestInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsExtent,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsExtent"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["device", "VSphereCloud::HostScsiDiskPartition"],
      ["devicePath", "SOAP::SOAPString"],
      ["vmfsUuid", "SOAP::SOAPString"],
      ["isHeadExtent", "SOAP::SOAPBoolean"],
      ["ordinal", "SOAP::SOAPInt"],
      ["startBlock", "SOAP::SOAPInt"],
      ["endBlock", "SOAP::SOAPInt"],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostUnresolvedVmfsExtent,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostUnresolvedVmfsExtent"),
    :schema_element => [
      ["hostUnresolvedVmfsExtent", ["VSphereCloud::HostUnresolvedVmfsExtent[]", XSD::QName.new(NsVim25, "HostUnresolvedVmfsExtent")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsResignatureSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsResignatureSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["extentDevicePath", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsResolutionResult,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsResolutionResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["spec", "VSphereCloud::HostUnresolvedVmfsResolutionSpec"],
      ["vmfs", "VSphereCloud::HostVmfsVolume", [0, 1]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostUnresolvedVmfsResolutionResult,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostUnresolvedVmfsResolutionResult"),
    :schema_element => [
      ["hostUnresolvedVmfsResolutionResult", ["VSphereCloud::HostUnresolvedVmfsResolutionResult[]", XSD::QName.new(NsVim25, "HostUnresolvedVmfsResolutionResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsResolutionSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsResolutionSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["extentDevicePath", "SOAP::SOAPString[]", [1, nil]],
      ["uuidResolution", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostUnresolvedVmfsResolutionSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostUnresolvedVmfsResolutionSpec"),
    :schema_element => [
      ["hostUnresolvedVmfsResolutionSpec", ["VSphereCloud::HostUnresolvedVmfsResolutionSpec[]", XSD::QName.new(NsVim25, "HostUnresolvedVmfsResolutionSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsVolumeResolveStatus,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsVolumeResolveStatus"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["resolvable", "SOAP::SOAPBoolean"],
      ["incompleteExtents", "SOAP::SOAPBoolean", [0, 1]],
      ["multipleCopies", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsVolume,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsVolume"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["extent", "VSphereCloud::HostUnresolvedVmfsExtent[]", [1, nil]],
      ["vmfsLabel", "SOAP::SOAPString"],
      ["vmfsUuid", "SOAP::SOAPString"],
      ["totalBlocks", "SOAP::SOAPInt"],
      ["resolveStatus", "VSphereCloud::HostUnresolvedVmfsVolumeResolveStatus"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostUnresolvedVmfsVolume,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostUnresolvedVmfsVolume"),
    :schema_element => [
      ["hostUnresolvedVmfsVolume", ["VSphereCloud::HostUnresolvedVmfsVolume[]", XSD::QName.new(NsVim25, "HostUnresolvedVmfsVolume")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVMotionConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostVMotionConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmotionNicKey", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVMotionInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostVMotionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["netConfig", "VSphereCloud::HostVMotionNetConfig", [0, 1]],
      ["ipConfig", "VSphereCloud::HostIpConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVMotionNetConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostVMotionNetConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["candidateVnic", "VSphereCloud::HostVirtualNic[]", [0, nil]],
      ["selectedVnic", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVirtualNicSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualNicSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ip", "VSphereCloud::HostIpConfig", [0, 1]],
      ["mac", "SOAP::SOAPString", [0, 1]],
      ["distributedVirtualPort", "VSphereCloud::DistributedVirtualSwitchPortConnection", [0, 1]],
      ["portgroup", "SOAP::SOAPString", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["tsoEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVirtualNicConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualNicConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]],
      ["portgroup", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostVirtualNicSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostVirtualNicConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostVirtualNicConfig"),
    :schema_element => [
      ["hostVirtualNicConfig", ["VSphereCloud::HostVirtualNicConfig[]", XSD::QName.new(NsVim25, "HostVirtualNicConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVirtualNic,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualNic"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["portgroup", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostVirtualNicSpec"],
      ["port", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostVirtualNic,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostVirtualNic"),
    :schema_element => [
      ["hostVirtualNic", ["VSphereCloud::HostVirtualNic[]", XSD::QName.new(NsVim25, "HostVirtualNic")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVirtualNicConnection,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualNicConnection"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["portgroup", "SOAP::SOAPString", [0, 1]],
      ["dvPort", "VSphereCloud::DistributedVirtualSwitchPortConnection", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVirtualNicManagerNicTypeSelection,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualNicManagerNicTypeSelection"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vnic", "VSphereCloud::HostVirtualNicConnection"],
      ["nicType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostVirtualNicManagerNicTypeSelection,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostVirtualNicManagerNicTypeSelection"),
    :schema_element => [
      ["hostVirtualNicManagerNicTypeSelection", ["VSphereCloud::HostVirtualNicManagerNicTypeSelection[]", XSD::QName.new(NsVim25, "HostVirtualNicManagerNicTypeSelection")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualNicManagerNetConfig,
    :schema_type => XSD::QName.new(NsVim25, "VirtualNicManagerNetConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["nicType", "SOAP::SOAPString"],
      ["multiSelectAllowed", "SOAP::SOAPBoolean"],
      ["candidateVnic", "VSphereCloud::HostVirtualNic[]", [0, nil]],
      ["selectedVnic", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualNicManagerNetConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualNicManagerNetConfig"),
    :schema_element => [
      ["virtualNicManagerNetConfig", ["VSphereCloud::VirtualNicManagerNetConfig[]", XSD::QName.new(NsVim25, "VirtualNicManagerNetConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVirtualNicManagerInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualNicManagerInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["netConfig", "VSphereCloud::VirtualNicManagerNetConfig[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVirtualSwitchBridge,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitchBridge"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVirtualSwitchAutoBridge,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitchAutoBridge"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostVirtualSwitchBridge"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["excludedNicDevice", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVirtualSwitchSimpleBridge,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitchSimpleBridge"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostVirtualSwitchBridge"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["nicDevice", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVirtualSwitchBondBridge,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitchBondBridge"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostVirtualSwitchBridge"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["nicDevice", "SOAP::SOAPString[]", [1, nil]],
      ["beacon", "VSphereCloud::HostVirtualSwitchBeaconConfig", [0, 1]],
      ["linkDiscoveryProtocolConfig", "VSphereCloud::LinkDiscoveryProtocolConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVirtualSwitchBeaconConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitchBeaconConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["interval", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVirtualSwitchSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitchSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["numPorts", "SOAP::SOAPInt"],
      ["bridge", "VSphereCloud::HostVirtualSwitchBridge", [0, 1]],
      ["policy", "VSphereCloud::HostNetworkPolicy", [0, 1]],
      ["mtu", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVirtualSwitchConfig,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitchConfig"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeOperation", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostVirtualSwitchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostVirtualSwitchConfig,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostVirtualSwitchConfig"),
    :schema_element => [
      ["hostVirtualSwitchConfig", ["VSphereCloud::HostVirtualSwitchConfig[]", XSD::QName.new(NsVim25, "HostVirtualSwitchConfig")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVirtualSwitch,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualSwitch"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["numPorts", "SOAP::SOAPInt"],
      ["numPortsAvailable", "SOAP::SOAPInt"],
      ["mtu", "SOAP::SOAPInt", [0, 1]],
      ["portgroup", "SOAP::SOAPString[]", [0, nil]],
      ["pnic", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostVirtualSwitchSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostVirtualSwitch,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostVirtualSwitch"),
    :schema_element => [
      ["hostVirtualSwitch", ["VSphereCloud::HostVirtualSwitch[]", XSD::QName.new(NsVim25, "HostVirtualSwitch")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVmfsRescanResult,
    :schema_type => XSD::QName.new(NsVim25, "HostVmfsRescanResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostVmfsRescanResult,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostVmfsRescanResult"),
    :schema_element => [
      ["hostVmfsRescanResult", ["VSphereCloud::HostVmfsRescanResult[]", XSD::QName.new(NsVim25, "HostVmfsRescanResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVmfsSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostVmfsSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["extent", "VSphereCloud::HostScsiDiskPartition"],
      ["blockSizeMb", "SOAP::SOAPInt", [0, 1]],
      ["majorVersion", "SOAP::SOAPInt"],
      ["volumeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVmfsVolume,
    :schema_type => XSD::QName.new(NsVim25, "HostVmfsVolume"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostFileSystemVolume"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["capacity", "SOAP::SOAPLong"],
      ["blockSizeMb", "SOAP::SOAPInt"],
      ["maxBlocks", "SOAP::SOAPInt"],
      ["majorVersion", "SOAP::SOAPInt"],
      ["version", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["extent", "VSphereCloud::HostScsiDiskPartition[]", [1, nil]],
      ["vmfsUpgradable", "SOAP::SOAPBoolean"],
      ["forceMountedInfo", "VSphereCloud::HostForceMountedInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetDhcpConfigInfoDhcpOptions,
    :schema_type => XSD::QName.new(NsVim25, "NetDhcpConfigInfoDhcpOptions"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enable", "SOAP::SOAPBoolean"],
      ["config", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetDhcpConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "NetDhcpConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipv6", "VSphereCloud::NetDhcpConfigInfoDhcpOptions", [0, 1]],
      ["ipv4", "VSphereCloud::NetDhcpConfigInfoDhcpOptions", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetDhcpConfigSpecDhcpOptionsSpec,
    :schema_type => XSD::QName.new(NsVim25, "NetDhcpConfigSpecDhcpOptionsSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enable", "SOAP::SOAPBoolean", [0, 1]],
      ["config", "VSphereCloud::KeyValue[]", [1, nil]],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetDhcpConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "NetDhcpConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipv6", "VSphereCloud::NetDhcpConfigSpecDhcpOptionsSpec", [0, 1]],
      ["ipv4", "VSphereCloud::NetDhcpConfigSpecDhcpOptionsSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetDnsConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "NetDnsConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean"],
      ["hostName", "SOAP::SOAPString"],
      ["domainName", "SOAP::SOAPString"],
      ["ipAddress", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetDnsConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "NetDnsConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dhcp", "SOAP::SOAPBoolean", [0, 1]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["domainName", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString[]", [0, nil]],
      ["searchDomain", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpConfigInfoIpAddress,
    :schema_type => XSD::QName.new(NsVim25, "NetIpConfigInfoIpAddress"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["origin", "SOAP::SOAPString", [0, 1]],
      ["state", "SOAP::SOAPString", [0, 1]],
      ["lifetime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfNetIpConfigInfoIpAddress,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNetIpConfigInfoIpAddress"),
    :schema_element => [
      ["netIpConfigInfoIpAddress", ["VSphereCloud::NetIpConfigInfoIpAddress[]", XSD::QName.new(NsVim25, "NetIpConfigInfoIpAddress")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "NetIpConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "VSphereCloud::NetIpConfigInfoIpAddress[]", [0, nil]],
      ["dhcp", "VSphereCloud::NetDhcpConfigInfo", [0, 1]],
      ["autoConfigurationEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpConfigSpecIpAddressSpec,
    :schema_type => XSD::QName.new(NsVim25, "NetIpConfigSpecIpAddressSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfNetIpConfigSpecIpAddressSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNetIpConfigSpecIpAddressSpec"),
    :schema_element => [
      ["netIpConfigSpecIpAddressSpec", ["VSphereCloud::NetIpConfigSpecIpAddressSpec[]", XSD::QName.new(NsVim25, "NetIpConfigSpecIpAddressSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "NetIpConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "VSphereCloud::NetIpConfigSpecIpAddressSpec[]", [0, nil]],
      ["dhcp", "VSphereCloud::NetDhcpConfigSpec", [0, 1]],
      ["autoConfigurationEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpRouteConfigInfoGateway,
    :schema_type => XSD::QName.new(NsVim25, "NetIpRouteConfigInfoGateway"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpRouteConfigInfoIpRoute,
    :schema_type => XSD::QName.new(NsVim25, "NetIpRouteConfigInfoIpRoute"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["gateway", "VSphereCloud::NetIpRouteConfigInfoGateway"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfNetIpRouteConfigInfoIpRoute,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNetIpRouteConfigInfoIpRoute"),
    :schema_element => [
      ["netIpRouteConfigInfoIpRoute", ["VSphereCloud::NetIpRouteConfigInfoIpRoute[]", XSD::QName.new(NsVim25, "NetIpRouteConfigInfoIpRoute")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpRouteConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "NetIpRouteConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VSphereCloud::NetIpRouteConfigInfoIpRoute[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpRouteConfigSpecGatewaySpec,
    :schema_type => XSD::QName.new(NsVim25, "NetIpRouteConfigSpecGatewaySpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["device", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpRouteConfigSpecIpRouteSpec,
    :schema_type => XSD::QName.new(NsVim25, "NetIpRouteConfigSpecIpRouteSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString"],
      ["prefixLength", "SOAP::SOAPInt"],
      ["gateway", "VSphereCloud::NetIpRouteConfigSpecGatewaySpec"],
      ["operation", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfNetIpRouteConfigSpecIpRouteSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNetIpRouteConfigSpecIpRouteSpec"),
    :schema_element => [
      ["netIpRouteConfigSpecIpRouteSpec", ["VSphereCloud::NetIpRouteConfigSpecIpRouteSpec[]", XSD::QName.new(NsVim25, "NetIpRouteConfigSpecIpRouteSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpRouteConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "NetIpRouteConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipRoute", "VSphereCloud::NetIpRouteConfigSpecIpRouteSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpStackInfoNetToMedia,
    :schema_type => XSD::QName.new(NsVim25, "NetIpStackInfoNetToMedia"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["physicalAddress", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfNetIpStackInfoNetToMedia,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNetIpStackInfoNetToMedia"),
    :schema_element => [
      ["netIpStackInfoNetToMedia", ["VSphereCloud::NetIpStackInfoNetToMedia[]", XSD::QName.new(NsVim25, "NetIpStackInfoNetToMedia")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpStackInfoDefaultRouter,
    :schema_type => XSD::QName.new(NsVim25, "NetIpStackInfoDefaultRouter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"],
      ["lifetime", "SOAP::SOAPDateTime"],
      ["preference", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfNetIpStackInfoDefaultRouter,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNetIpStackInfoDefaultRouter"),
    :schema_element => [
      ["netIpStackInfoDefaultRouter", ["VSphereCloud::NetIpStackInfoDefaultRouter[]", XSD::QName.new(NsVim25, "NetIpStackInfoDefaultRouter")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpStackInfo,
    :schema_type => XSD::QName.new(NsVim25, "NetIpStackInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["neighbor", "VSphereCloud::NetIpStackInfoNetToMedia[]", [0, nil]],
      ["defaultRouter", "VSphereCloud::NetIpStackInfoDefaultRouter[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetBIOSConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "NetBIOSConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["mode", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WinNetBIOSConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "WinNetBIOSConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "NetBIOSConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["mode", "SOAP::SOAPString"],
      ["primaryWINS", "SOAP::SOAPString"],
      ["secondaryWINS", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayUpdateSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::BoolOption,
    :schema_type => XSD::QName.new(NsVim25, "BoolOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "OptionType"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["supported", "SOAP::SOAPBoolean"],
      ["defaultValue", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ChoiceOption,
    :schema_type => XSD::QName.new(NsVim25, "ChoiceOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "OptionType"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["choiceInfo", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["defaultIndex", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FloatOption,
    :schema_type => XSD::QName.new(NsVim25, "FloatOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "OptionType"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["min", "SOAP::SOAPFloat"],
      ["max", "SOAP::SOAPFloat"],
      ["defaultValue", "SOAP::SOAPFloat"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IntOption,
    :schema_type => XSD::QName.new(NsVim25, "IntOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "OptionType"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["min", "SOAP::SOAPInt"],
      ["max", "SOAP::SOAPInt"],
      ["defaultValue", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LongOption,
    :schema_type => XSD::QName.new(NsVim25, "LongOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "OptionType"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["min", "SOAP::SOAPLong"],
      ["max", "SOAP::SOAPLong"],
      ["defaultValue", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OptionDef,
    :schema_type => XSD::QName.new(NsVim25, "OptionDef"),
    :schema_basetype => XSD::QName.new(NsVim25, "ElementDescription"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["optionType", "VSphereCloud::OptionType"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfOptionDef,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOptionDef"),
    :schema_element => [
      ["optionDef", ["VSphereCloud::OptionDef[]", XSD::QName.new(NsVim25, "OptionDef")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OptionType,
    :schema_type => XSD::QName.new(NsVim25, "OptionType"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OptionValue,
    :schema_type => XSD::QName.new(NsVim25, "OptionValue"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["value", nil, [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfOptionValue,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOptionValue"),
    :schema_element => [
      ["optionValue", ["VSphereCloud::OptionValue[]", XSD::QName.new(NsVim25, "OptionValue")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StringOption,
    :schema_type => XSD::QName.new(NsVim25, "StringOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "OptionType"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["valueIsReadonly", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultValue", "SOAP::SOAPString"],
      ["validCharacters", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ApplyProfile,
    :schema_type => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ComplianceLocator,
    :schema_type => XSD::QName.new(NsVim25, "ComplianceLocator"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["expressionName", "SOAP::SOAPString"],
      ["applyPath", "VSphereCloud::ProfilePropertyPath"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfComplianceLocator,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfComplianceLocator"),
    :schema_element => [
      ["complianceLocator", ["VSphereCloud::ComplianceLocator[]", XSD::QName.new(NsVim25, "ComplianceLocator")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ComplianceProfile,
    :schema_type => XSD::QName.new(NsVim25, "ComplianceProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["expression", "VSphereCloud::ProfileExpression[]", [1, nil]],
      ["rootExpression", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ComplianceFailure,
    :schema_type => XSD::QName.new(NsVim25, "ComplianceFailure"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["failureType", "SOAP::SOAPString"],
      ["message", "VSphereCloud::LocalizableMessage"],
      ["expressionName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfComplianceFailure,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfComplianceFailure"),
    :schema_element => [
      ["complianceFailure", ["VSphereCloud::ComplianceFailure[]", XSD::QName.new(NsVim25, "ComplianceFailure")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ComplianceResult,
    :schema_type => XSD::QName.new(NsVim25, "ComplianceResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["profile", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["complianceStatus", "SOAP::SOAPString"],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["checkTime", "SOAP::SOAPDateTime", [0, 1]],
      ["failure", "VSphereCloud::ComplianceFailure[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfComplianceResult,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfComplianceResult"),
    :schema_element => [
      ["complianceResult", ["VSphereCloud::ComplianceResult[]", XSD::QName.new(NsVim25, "ComplianceResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileDeferredPolicyOptionParameter,
    :schema_type => XSD::QName.new(NsVim25, "ProfileDeferredPolicyOptionParameter"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["inputPath", "VSphereCloud::ProfilePropertyPath"],
      ["parameter", "VSphereCloud::KeyAnyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfProfileDeferredPolicyOptionParameter,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileDeferredPolicyOptionParameter"),
    :schema_element => [
      ["profileDeferredPolicyOptionParameter", ["VSphereCloud::ProfileDeferredPolicyOptionParameter[]", XSD::QName.new(NsVim25, "ProfileDeferredPolicyOptionParameter")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileExpression,
    :schema_type => XSD::QName.new(NsVim25, "ProfileExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"],
      ["negated", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfProfileExpression,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileExpression"),
    :schema_element => [
      ["profileExpression", ["VSphereCloud::ProfileExpression[]", XSD::QName.new(NsVim25, "ProfileExpression")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileSimpleExpression,
    :schema_type => XSD::QName.new(NsVim25, "ProfileSimpleExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileExpression"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"],
      ["negated", "SOAP::SOAPBoolean"],
      ["expressionType", "SOAP::SOAPString"],
      ["parameter", "VSphereCloud::KeyAnyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileCompositeExpression,
    :schema_type => XSD::QName.new(NsVim25, "ProfileCompositeExpression"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileExpression"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"],
      ["negated", "SOAP::SOAPBoolean"],
      ["operator", "SOAP::SOAPString"],
      ["expressionName", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileExpressionMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ProfileExpressionMetadata"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["expressionId", "VSphereCloud::ExtendedElementDescription"],
      ["parameter", "VSphereCloud::ProfileParameterMetadata[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfProfileExpressionMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileExpressionMetadata"),
    :schema_element => [
      ["profileExpressionMetadata", ["VSphereCloud::ProfileExpressionMetadata[]", XSD::QName.new(NsVim25, "ProfileExpressionMetadata")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileParameterMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ProfileParameterMetadata"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::ExtendedElementDescription"],
      ["type", "SOAP::SOAPString"],
      ["optional", "SOAP::SOAPBoolean"],
      ["defaultValue", nil, [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfProfileParameterMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileParameterMetadata"),
    :schema_element => [
      ["profileParameterMetadata", ["VSphereCloud::ProfileParameterMetadata[]", XSD::QName.new(NsVim25, "ProfileParameterMetadata")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfilePolicy,
    :schema_type => XSD::QName.new(NsVim25, "ProfilePolicy"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["policyOption", "VSphereCloud::PolicyOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfProfilePolicy,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfilePolicy"),
    :schema_element => [
      ["profilePolicy", ["VSphereCloud::ProfilePolicy[]", XSD::QName.new(NsVim25, "ProfilePolicy")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfilePolicyOptionMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ProfilePolicyOptionMetadata"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::ExtendedElementDescription"],
      ["parameter", "VSphereCloud::ProfileParameterMetadata[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfProfilePolicyOptionMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfilePolicyOptionMetadata"),
    :schema_element => [
      ["profilePolicyOptionMetadata", ["VSphereCloud::ProfilePolicyOptionMetadata[]", XSD::QName.new(NsVim25, "ProfilePolicyOptionMetadata")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileCompositePolicyOptionMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ProfileCompositePolicyOptionMetadata"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfilePolicyOptionMetadata"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::ExtendedElementDescription"],
      ["parameter", "VSphereCloud::ProfileParameterMetadata[]", [0, nil]],
      ["option", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UserInputRequiredParameterMetadata,
    :schema_type => XSD::QName.new(NsVim25, "UserInputRequiredParameterMetadata"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfilePolicyOptionMetadata"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::ExtendedElementDescription"],
      ["parameter", "VSphereCloud::ProfileParameterMetadata[]", [0, nil]],
      ["userInputParameter", "VSphereCloud::ProfileParameterMetadata[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfilePolicyMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ProfilePolicyMetadata"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "VSphereCloud::ExtendedElementDescription"],
      ["possibleOption", "VSphereCloud::ProfilePolicyOptionMetadata[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfProfilePolicyMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfilePolicyMetadata"),
    :schema_element => [
      ["profilePolicyMetadata", ["VSphereCloud::ProfilePolicyMetadata[]", XSD::QName.new(NsVim25, "ProfilePolicyMetadata")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PolicyOption,
    :schema_type => XSD::QName.new(NsVim25, "PolicyOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["parameter", "VSphereCloud::KeyAnyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPolicyOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPolicyOption"),
    :schema_element => [
      ["policyOption", ["VSphereCloud::PolicyOption[]", XSD::QName.new(NsVim25, "PolicyOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CompositePolicyOption,
    :schema_type => XSD::QName.new(NsVim25, "CompositePolicyOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "PolicyOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["parameter", "VSphereCloud::KeyAnyValue[]", [0, nil]],
      ["option", "VSphereCloud::PolicyOption[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileCreateSpec,
    :schema_type => XSD::QName.new(NsVim25, "ProfileCreateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileSerializedCreateSpec,
    :schema_type => XSD::QName.new(NsVim25, "ProfileSerializedCreateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileCreateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["profileConfigString", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ProfileConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileDescriptionSection,
    :schema_type => XSD::QName.new(NsVim25, "ProfileDescriptionSection"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["description", "VSphereCloud::ExtendedElementDescription"],
      ["message", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfProfileDescriptionSection,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileDescriptionSection"),
    :schema_element => [
      ["profileDescriptionSection", ["VSphereCloud::ProfileDescriptionSection[]", XSD::QName.new(NsVim25, "ProfileDescriptionSection")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileDescription,
    :schema_type => XSD::QName.new(NsVim25, "ProfileDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["section", "VSphereCloud::ProfileDescriptionSection[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ProfileMetadata"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "VSphereCloud::ExtendedDescription", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfProfileMetadata,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileMetadata"),
    :schema_element => [
      ["profileMetadata", ["VSphereCloud::ProfileMetadata[]", XSD::QName.new(NsVim25, "ProfileMetadata")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfilePropertyPath,
    :schema_type => XSD::QName.new(NsVim25, "ProfilePropertyPath"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["profilePath", "SOAP::SOAPString"],
      ["policyId", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterProfileConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ClusterProfileConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["complyProfile", "VSphereCloud::ComplianceProfile", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterProfileCreateSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterProfileCreateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileCreateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterProfileConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterProfileConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterProfileCreateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterProfileCompleteConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterProfileCompleteConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterProfileConfigSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["complyProfile", "VSphereCloud::ComplianceProfile", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterProfileConfigServiceCreateSpec,
    :schema_type => XSD::QName.new(NsVim25, "ClusterProfileConfigServiceCreateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ClusterProfileConfigSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["serviceType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileExecuteError,
    :schema_type => XSD::QName.new(NsVim25, "ProfileExecuteError"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["path", "VSphereCloud::ProfilePropertyPath", [0, 1]],
      ["message", "VSphereCloud::LocalizableMessage"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfProfileExecuteError,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfProfileExecuteError"),
    :schema_element => [
      ["profileExecuteError", ["VSphereCloud::ProfileExecuteError[]", XSD::QName.new(NsVim25, "ProfileExecuteError")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileExecuteResult,
    :schema_type => XSD::QName.new(NsVim25, "ProfileExecuteResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["status", "SOAP::SOAPString"],
      ["configSpec", "VSphereCloud::HostConfigSpec", [0, 1]],
      ["inapplicablePath", "SOAP::SOAPString[]", [0, nil]],
      ["requireInput", "VSphereCloud::ProfileDeferredPolicyOptionParameter[]", [0, nil]],
      ["error", "VSphereCloud::ProfileExecuteError[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostApplyProfile,
    :schema_type => XSD::QName.new(NsVim25, "HostApplyProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["memory", "VSphereCloud::HostMemoryProfile", [0, 1]],
      ["storage", "VSphereCloud::StorageProfile", [0, 1]],
      ["network", "VSphereCloud::NetworkProfile", [0, 1]],
      ["datetime", "VSphereCloud::DateTimeProfile", [0, 1]],
      ["firewall", "VSphereCloud::FirewallProfile", [0, 1]],
      ["security", "VSphereCloud::SecurityProfile", [0, 1]],
      ["service", "VSphereCloud::ServiceProfile[]", [0, nil]],
      ["option", "VSphereCloud::OptionProfile[]", [0, nil]],
      ["userAccount", "VSphereCloud::UserProfile[]", [0, nil]],
      ["usergroupAccount", "VSphereCloud::UserGroupProfile[]", [0, nil]],
      ["authentication", "VSphereCloud::AuthenticationProfile", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PhysicalNicProfile,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPhysicalNicProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPhysicalNicProfile"),
    :schema_element => [
      ["physicalNicProfile", ["VSphereCloud::PhysicalNicProfile[]", XSD::QName.new(NsVim25, "PhysicalNicProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostMemoryProfile,
    :schema_type => XSD::QName.new(NsVim25, "HostMemoryProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UserProfile,
    :schema_type => XSD::QName.new(NsVim25, "UserProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfUserProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfUserProfile"),
    :schema_element => [
      ["userProfile", ["VSphereCloud::UserProfile[]", XSD::QName.new(NsVim25, "UserProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UserGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "UserGroupProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfUserGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfUserGroupProfile"),
    :schema_element => [
      ["userGroupProfile", ["VSphereCloud::UserGroupProfile[]", XSD::QName.new(NsVim25, "UserGroupProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SecurityProfile,
    :schema_type => XSD::QName.new(NsVim25, "SecurityProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["permission", "VSphereCloud::PermissionProfile[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OptionProfile,
    :schema_type => XSD::QName.new(NsVim25, "OptionProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfOptionProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfOptionProfile"),
    :schema_element => [
      ["optionProfile", ["VSphereCloud::OptionProfile[]", XSD::QName.new(NsVim25, "OptionProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DateTimeProfile,
    :schema_type => XSD::QName.new(NsVim25, "DateTimeProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ServiceProfile,
    :schema_type => XSD::QName.new(NsVim25, "ServiceProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfServiceProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfServiceProfile"),
    :schema_element => [
      ["serviceProfile", ["VSphereCloud::ServiceProfile[]", XSD::QName.new(NsVim25, "ServiceProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FirewallProfileRulesetProfile,
    :schema_type => XSD::QName.new(NsVim25, "FirewallProfileRulesetProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfFirewallProfileRulesetProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfFirewallProfileRulesetProfile"),
    :schema_element => [
      ["firewallProfileRulesetProfile", ["VSphereCloud::FirewallProfileRulesetProfile[]", XSD::QName.new(NsVim25, "FirewallProfileRulesetProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FirewallProfile,
    :schema_type => XSD::QName.new(NsVim25, "FirewallProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["ruleset", "VSphereCloud::FirewallProfileRulesetProfile[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NasStorageProfile,
    :schema_type => XSD::QName.new(NsVim25, "NasStorageProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfNasStorageProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfNasStorageProfile"),
    :schema_element => [
      ["nasStorageProfile", ["VSphereCloud::NasStorageProfile[]", XSD::QName.new(NsVim25, "NasStorageProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StorageProfile,
    :schema_type => XSD::QName.new(NsVim25, "StorageProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["nasStorage", "VSphereCloud::NasStorageProfile[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetworkProfileDnsConfigProfile,
    :schema_type => XSD::QName.new(NsVim25, "NetworkProfileDnsConfigProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetworkProfile,
    :schema_type => XSD::QName.new(NsVim25, "NetworkProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["vswitch", "VSphereCloud::VirtualSwitchProfile[]", [0, nil]],
      ["vmPortGroup", "VSphereCloud::VmPortGroupProfile[]", [0, nil]],
      ["hostPortGroup", "VSphereCloud::HostPortGroupProfile[]", [0, nil]],
      ["serviceConsolePortGroup", "VSphereCloud::ServiceConsolePortGroupProfile[]", [0, nil]],
      ["dnsConfig", "VSphereCloud::NetworkProfileDnsConfigProfile", [0, 1]],
      ["ipRouteConfig", "VSphereCloud::IpRouteProfile", [0, 1]],
      ["consoleIpRouteConfig", "VSphereCloud::IpRouteProfile", [0, 1]],
      ["pnic", "VSphereCloud::PhysicalNicProfile[]", [0, nil]],
      ["dvswitch", "VSphereCloud::DvsProfile[]", [0, nil]],
      ["dvsServiceConsoleNic", "VSphereCloud::DvsServiceConsoleVNicProfile[]", [0, nil]],
      ["dvsHostNic", "VSphereCloud::DvsHostVNicProfile[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsVNicProfile,
    :schema_type => XSD::QName.new(NsVim25, "DvsVNicProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["ipConfig", "VSphereCloud::IpAddressProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsServiceConsoleVNicProfile,
    :schema_type => XSD::QName.new(NsVim25, "DvsServiceConsoleVNicProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsVNicProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["ipConfig", "VSphereCloud::IpAddressProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDvsServiceConsoleVNicProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDvsServiceConsoleVNicProfile"),
    :schema_element => [
      ["dvsServiceConsoleVNicProfile", ["VSphereCloud::DvsServiceConsoleVNicProfile[]", XSD::QName.new(NsVim25, "DvsServiceConsoleVNicProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsHostVNicProfile,
    :schema_type => XSD::QName.new(NsVim25, "DvsHostVNicProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "DvsVNicProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["ipConfig", "VSphereCloud::IpAddressProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDvsHostVNicProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDvsHostVNicProfile"),
    :schema_element => [
      ["dvsHostVNicProfile", ["VSphereCloud::DvsHostVNicProfile[]", XSD::QName.new(NsVim25, "DvsHostVNicProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsProfile,
    :schema_type => XSD::QName.new(NsVim25, "DvsProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["uplink", "VSphereCloud::PnicUplinkProfile[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfDvsProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfDvsProfile"),
    :schema_element => [
      ["dvsProfile", ["VSphereCloud::DvsProfile[]", XSD::QName.new(NsVim25, "DvsProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PnicUplinkProfile,
    :schema_type => XSD::QName.new(NsVim25, "PnicUplinkProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPnicUplinkProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPnicUplinkProfile"),
    :schema_element => [
      ["pnicUplinkProfile", ["VSphereCloud::PnicUplinkProfile[]", XSD::QName.new(NsVim25, "PnicUplinkProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IpRouteProfile,
    :schema_type => XSD::QName.new(NsVim25, "IpRouteProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["staticRoute", "VSphereCloud::StaticRouteProfile[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StaticRouteProfile,
    :schema_type => XSD::QName.new(NsVim25, "StaticRouteProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfStaticRouteProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfStaticRouteProfile"),
    :schema_element => [
      ["staticRouteProfile", ["VSphereCloud::StaticRouteProfile[]", XSD::QName.new(NsVim25, "StaticRouteProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LinkProfile,
    :schema_type => XSD::QName.new(NsVim25, "LinkProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NumPortsProfile,
    :schema_type => XSD::QName.new(NsVim25, "NumPortsProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSwitchProfile,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSwitchProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["link", "VSphereCloud::LinkProfile"],
      ["numPorts", "VSphereCloud::NumPortsProfile"],
      ["networkPolicy", "VSphereCloud::NetworkPolicyProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualSwitchProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualSwitchProfile"),
    :schema_element => [
      ["virtualSwitchProfile", ["VSphereCloud::VirtualSwitchProfile[]", XSD::QName.new(NsVim25, "VirtualSwitchProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VlanProfile,
    :schema_type => XSD::QName.new(NsVim25, "VlanProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSwitchSelectionProfile,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSwitchSelectionProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PortGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "PortGroupProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VSphereCloud::VlanProfile"],
      ["vswitch", "VSphereCloud::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VSphereCloud::NetworkPolicyProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmPortGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "VmPortGroupProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "PortGroupProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VSphereCloud::VlanProfile"],
      ["vswitch", "VSphereCloud::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VSphereCloud::NetworkPolicyProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVmPortGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVmPortGroupProfile"),
    :schema_element => [
      ["vmPortGroupProfile", ["VSphereCloud::VmPortGroupProfile[]", XSD::QName.new(NsVim25, "VmPortGroupProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPortGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "HostPortGroupProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "PortGroupProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VSphereCloud::VlanProfile"],
      ["vswitch", "VSphereCloud::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VSphereCloud::NetworkPolicyProfile"],
      ["ipConfig", "VSphereCloud::IpAddressProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostPortGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostPortGroupProfile"),
    :schema_element => [
      ["hostPortGroupProfile", ["VSphereCloud::HostPortGroupProfile[]", XSD::QName.new(NsVim25, "HostPortGroupProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ServiceConsolePortGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "ServiceConsolePortGroupProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "PortGroupProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString"],
      ["vlan", "VSphereCloud::VlanProfile"],
      ["vswitch", "VSphereCloud::VirtualSwitchSelectionProfile"],
      ["networkPolicy", "VSphereCloud::NetworkPolicyProfile"],
      ["ipConfig", "VSphereCloud::IpAddressProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfServiceConsolePortGroupProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfServiceConsolePortGroupProfile"),
    :schema_element => [
      ["serviceConsolePortGroupProfile", ["VSphereCloud::ServiceConsolePortGroupProfile[]", XSD::QName.new(NsVim25, "ServiceConsolePortGroupProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetworkPolicyProfile,
    :schema_type => XSD::QName.new(NsVim25, "NetworkPolicyProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IpAddressProfile,
    :schema_type => XSD::QName.new(NsVim25, "IpAddressProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AuthenticationProfile,
    :schema_type => XSD::QName.new(NsVim25, "AuthenticationProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["activeDirectory", "VSphereCloud::ActiveDirectoryProfile", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ActiveDirectoryProfile,
    :schema_type => XSD::QName.new(NsVim25, "ActiveDirectoryProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PermissionProfile,
    :schema_type => XSD::QName.new(NsVim25, "PermissionProfile"),
    :schema_basetype => XSD::QName.new(NsVim25, "ApplyProfile"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["policy", "VSphereCloud::ProfilePolicy[]", [0, nil]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfPermissionProfile,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfPermissionProfile"),
    :schema_element => [
      ["permissionProfile", ["VSphereCloud::PermissionProfile[]", XSD::QName.new(NsVim25, "PermissionProfile")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostProfileConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostProfileConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean"],
      ["applyProfile", "VSphereCloud::HostApplyProfile", [0, 1]],
      ["defaultComplyProfile", "VSphereCloud::ComplianceProfile", [0, 1]],
      ["defaultComplyLocator", "VSphereCloud::ComplianceLocator[]", [0, nil]],
      ["customComplyProfile", "VSphereCloud::ComplianceProfile", [0, 1]],
      ["disabledExpressionList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostProfileConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostProfileConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ProfileCreateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostProfileCompleteConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostProfileCompleteConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostProfileConfigSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["applyProfile", "VSphereCloud::HostApplyProfile", [0, 1]],
      ["customComplyProfile", "VSphereCloud::ComplianceProfile", [0, 1]],
      ["disabledExpressionListChanged", "SOAP::SOAPBoolean"],
      ["disabledExpressionList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostProfileHostBasedConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "HostProfileHostBasedConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "HostProfileConfigSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostProfileManagerConfigTaskList,
    :schema_type => XSD::QName.new(NsVim25, "HostProfileManagerConfigTaskList"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["configSpec", "VSphereCloud::HostConfigSpec", [0, 1]],
      ["taskDescription", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScheduledTaskDetail,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskDetail"),
    :schema_basetype => XSD::QName.new(NsVim25, "TypeDescription"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["label", "SOAP::SOAPString"],
      ["summary", "SOAP::SOAPString"],
      ["key", "SOAP::SOAPString"],
      ["frequency", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfScheduledTaskDetail,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfScheduledTaskDetail"),
    :schema_element => [
      ["scheduledTaskDetail", ["VSphereCloud::ScheduledTaskDetail[]", XSD::QName.new(NsVim25, "ScheduledTaskDetail")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScheduledTaskDescription,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskDescription"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["action", "VSphereCloud::TypeDescription[]", [1, nil]],
      ["schedulerInfo", "VSphereCloud::ScheduledTaskDetail[]", [1, nil]],
      ["state", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["dayOfWeek", "VSphereCloud::ElementDescription[]", [1, nil]],
      ["weekOfMonth", "VSphereCloud::ElementDescription[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScheduledTaskInfo,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "ScheduledTaskSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["scheduler", "VSphereCloud::TaskScheduler"],
      ["action", "VSphereCloud::Action"],
      ["notification", "SOAP::SOAPString", [0, 1]],
      ["scheduledTask", "VSphereCloud::ManagedObjectReference"],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["lastModifiedTime", "SOAP::SOAPDateTime"],
      ["lastModifiedUser", "SOAP::SOAPString"],
      ["nextRunTime", "SOAP::SOAPDateTime", [0, 1]],
      ["prevRunTime", "SOAP::SOAPDateTime", [0, 1]],
      ["state", "VSphereCloud::TaskInfoState"],
      ["error", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["result", nil, [0, 1]],
      ["progress", "SOAP::SOAPInt", [0, 1]],
      ["activeTask", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["taskObject", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "TaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AfterStartupTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "AfterStartupTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["minute", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OnceTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "OnceTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["runAt", "SOAP::SOAPDateTime", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RecurrentTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "RecurrentTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "TaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HourlyTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "HourlyTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "RecurrentTaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DailyTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "DailyTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "HourlyTaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WeeklyTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "WeeklyTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "DailyTaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"],
      ["sunday", "SOAP::SOAPBoolean"],
      ["monday", "SOAP::SOAPBoolean"],
      ["tuesday", "SOAP::SOAPBoolean"],
      ["wednesday", "SOAP::SOAPBoolean"],
      ["thursday", "SOAP::SOAPBoolean"],
      ["friday", "SOAP::SOAPBoolean"],
      ["saturday", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MonthlyTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "MonthlyTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "DailyTaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MonthlyByDayTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "MonthlyByDayTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "MonthlyTaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"],
      ["day", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MonthlyByWeekdayTaskScheduler,
    :schema_type => XSD::QName.new(NsVim25, "MonthlyByWeekdayTaskScheduler"),
    :schema_basetype => XSD::QName.new(NsVim25, "MonthlyTaskScheduler"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["activeTime", "SOAP::SOAPDateTime", [0, 1]],
      ["expireTime", "SOAP::SOAPDateTime", [0, 1]],
      ["interval", "SOAP::SOAPInt"],
      ["minute", "SOAP::SOAPInt"],
      ["hour", "SOAP::SOAPInt"],
      ["offset", "VSphereCloud::WeekOfMonth"],
      ["weekday", "VSphereCloud::DayOfWeek"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScheduledTaskSpec,
    :schema_type => XSD::QName.new(NsVim25, "ScheduledTaskSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["enabled", "SOAP::SOAPBoolean"],
      ["scheduler", "VSphereCloud::TaskScheduler"],
      ["action", "VSphereCloud::Action"],
      ["notification", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppCloneSpecNetworkMappingPair,
    :schema_type => XSD::QName.new(NsVim25, "VAppCloneSpecNetworkMappingPair"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["source", "VSphereCloud::ManagedObjectReference"],
      ["destination", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVAppCloneSpecNetworkMappingPair,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppCloneSpecNetworkMappingPair"),
    :schema_element => [
      ["vAppCloneSpecNetworkMappingPair", ["VSphereCloud::VAppCloneSpecNetworkMappingPair[]", XSD::QName.new(NsVim25, "VAppCloneSpecNetworkMappingPair")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppCloneSpecResourceMap,
    :schema_type => XSD::QName.new(NsVim25, "VAppCloneSpecResourceMap"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["source", "VSphereCloud::ManagedObjectReference"],
      ["parent", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["resourceSpec", "VSphereCloud::ResourceConfigSpec", [0, 1]],
      ["location", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVAppCloneSpecResourceMap,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppCloneSpecResourceMap"),
    :schema_element => [
      ["vAppCloneSpecResourceMap", ["VSphereCloud::VAppCloneSpecResourceMap[]", XSD::QName.new(NsVim25, "VAppCloneSpecResourceMap")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppCloneSpec,
    :schema_type => XSD::QName.new(NsVim25, "VAppCloneSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["location", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["resourceSpec", "VSphereCloud::ResourceConfigSpec", [0, 1]],
      ["vmFolder", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["networkMapping", "VSphereCloud::VAppCloneSpecNetworkMappingPair[]", [0, nil]],
      ["property", "VSphereCloud::KeyValue[]", [0, nil]],
      ["resourceMapping", "VSphereCloud::VAppCloneSpecResourceMap[]", [0, nil]],
      ["provisioning", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppEntityConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "VAppEntityConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["tag", "SOAP::SOAPString", [0, 1]],
      ["startOrder", "SOAP::SOAPInt", [0, 1]],
      ["startDelay", "SOAP::SOAPInt", [0, 1]],
      ["waitingForGuest", "SOAP::SOAPBoolean", [0, 1]],
      ["startAction", "SOAP::SOAPString", [0, 1]],
      ["stopDelay", "SOAP::SOAPInt", [0, 1]],
      ["stopAction", "SOAP::SOAPString", [0, 1]],
      ["destroyWithParent", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVAppEntityConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppEntityConfigInfo"),
    :schema_element => [
      ["vAppEntityConfigInfo", ["VSphereCloud::VAppEntityConfigInfo[]", XSD::QName.new(NsVim25, "VAppEntityConfigInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppIPAssignmentInfo,
    :schema_type => XSD::QName.new(NsVim25, "VAppIPAssignmentInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["supportedAllocationScheme", "SOAP::SOAPString[]", [0, nil]],
      ["ipAllocationPolicy", "SOAP::SOAPString", [0, 1]],
      ["supportedIpProtocol", "SOAP::SOAPString[]", [0, nil]],
      ["ipProtocol", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IpPoolIpPoolConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "IpPoolIpPoolConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["subnetAddress", "SOAP::SOAPString", [0, 1]],
      ["netmask", "SOAP::SOAPString", [0, 1]],
      ["gateway", "SOAP::SOAPString", [0, 1]],
      ["range", "SOAP::SOAPString", [0, 1]],
      ["dns", "SOAP::SOAPString[]", [0, nil]],
      ["dhcpServerAvailable", "SOAP::SOAPBoolean", [0, 1]],
      ["ipPoolEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IpPoolAssociation,
    :schema_type => XSD::QName.new(NsVim25, "IpPoolAssociation"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["network", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["networkName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfIpPoolAssociation,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfIpPoolAssociation"),
    :schema_element => [
      ["ipPoolAssociation", ["VSphereCloud::IpPoolAssociation[]", XSD::QName.new(NsVim25, "IpPoolAssociation")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IpPool,
    :schema_type => XSD::QName.new(NsVim25, "IpPool"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["ipv4Config", "VSphereCloud::IpPoolIpPoolConfigInfo", [0, 1]],
      ["ipv6Config", "VSphereCloud::IpPoolIpPoolConfigInfo", [0, 1]],
      ["dnsDomain", "SOAP::SOAPString", [0, 1]],
      ["dnsSearchPath", "SOAP::SOAPString", [0, 1]],
      ["hostPrefix", "SOAP::SOAPString", [0, 1]],
      ["httpProxy", "SOAP::SOAPString", [0, 1]],
      ["networkAssociation", "VSphereCloud::IpPoolAssociation[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfIpPool,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfIpPool"),
    :schema_element => [
      ["ipPool", ["VSphereCloud::IpPool[]", XSD::QName.new(NsVim25, "IpPool")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppOvfSectionInfo,
    :schema_type => XSD::QName.new(NsVim25, "VAppOvfSectionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt", [0, 1]],
      ["namespace", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["atEnvelopeLevel", "SOAP::SOAPBoolean", [0, 1]],
      ["contents", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVAppOvfSectionInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppOvfSectionInfo"),
    :schema_element => [
      ["vAppOvfSectionInfo", ["VSphereCloud::VAppOvfSectionInfo[]", XSD::QName.new(NsVim25, "VAppOvfSectionInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppProductInfo,
    :schema_type => XSD::QName.new(NsVim25, "VAppProductInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["classId", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["vendor", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["fullVersion", "SOAP::SOAPString", [0, 1]],
      ["vendorUrl", "SOAP::SOAPString", [0, 1]],
      ["productUrl", "SOAP::SOAPString", [0, 1]],
      ["appUrl", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVAppProductInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppProductInfo"),
    :schema_element => [
      ["vAppProductInfo", ["VSphereCloud::VAppProductInfo[]", XSD::QName.new(NsVim25, "VAppProductInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppPropertyInfo,
    :schema_type => XSD::QName.new(NsVim25, "VAppPropertyInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["classId", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["id", "SOAP::SOAPString", [0, 1]],
      ["category", "SOAP::SOAPString", [0, 1]],
      ["label", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["userConfigurable", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultValue", "SOAP::SOAPString", [0, 1]],
      ["value", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVAppPropertyInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppPropertyInfo"),
    :schema_element => [
      ["vAppPropertyInfo", ["VSphereCloud::VAppPropertyInfo[]", XSD::QName.new(NsVim25, "VAppPropertyInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "VAppConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["product", "VSphereCloud::VAppProductInfo[]", [0, nil]],
      ["property", "VSphereCloud::VAppPropertyInfo[]", [0, nil]],
      ["ipAssignment", "VSphereCloud::VAppIPAssignmentInfo"],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VSphereCloud::VAppOvfSectionInfo[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean"],
      ["installBootStopDelay", "SOAP::SOAPInt"],
      ["entityConfig", "VSphereCloud::VAppEntityConfigInfo[]", [0, nil]],
      ["annotation", "SOAP::SOAPString"],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "VAppConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "VmConfigSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["product", "VSphereCloud::VAppProductSpec[]", [0, nil]],
      ["property", "VSphereCloud::VAppPropertySpec[]", [0, nil]],
      ["ipAssignment", "VSphereCloud::VAppIPAssignmentInfo", [0, 1]],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VSphereCloud::VAppOvfSectionSpec[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["installBootStopDelay", "SOAP::SOAPInt", [0, 1]],
      ["entityConfig", "VSphereCloud::VAppEntityConfigInfo[]", [0, nil]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualAppImportSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualAppImportSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ImportSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entityConfig", "VSphereCloud::VAppEntityConfigInfo", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["vAppConfigSpec", "VSphereCloud::VAppConfigSpec"],
      ["resourcePoolSpec", "VSphereCloud::ResourceConfigSpec"],
      ["child", "VSphereCloud::ImportSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["product", "VSphereCloud::VAppProductInfo[]", [0, nil]],
      ["property", "VSphereCloud::VAppPropertyInfo[]", [0, nil]],
      ["ipAssignment", "VSphereCloud::VAppIPAssignmentInfo"],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VSphereCloud::VAppOvfSectionInfo[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean"],
      ["installBootStopDelay", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "VmConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["product", "VSphereCloud::VAppProductSpec[]", [0, nil]],
      ["property", "VSphereCloud::VAppPropertySpec[]", [0, nil]],
      ["ipAssignment", "VSphereCloud::VAppIPAssignmentInfo", [0, 1]],
      ["eula", "SOAP::SOAPString[]", [0, nil]],
      ["ovfSection", "VSphereCloud::VAppOvfSectionSpec[]", [0, nil]],
      ["ovfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["installBootStopDelay", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppProductSpec,
    :schema_type => XSD::QName.new(NsVim25, "VAppProductSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::VAppProductInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVAppProductSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppProductSpec"),
    :schema_element => [
      ["vAppProductSpec", ["VSphereCloud::VAppProductSpec[]", XSD::QName.new(NsVim25, "VAppProductSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppPropertySpec,
    :schema_type => XSD::QName.new(NsVim25, "VAppPropertySpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::VAppPropertyInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVAppPropertySpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppPropertySpec"),
    :schema_element => [
      ["vAppPropertySpec", ["VSphereCloud::VAppPropertySpec[]", XSD::QName.new(NsVim25, "VAppPropertySpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppOvfSectionSpec,
    :schema_type => XSD::QName.new(NsVim25, "VAppOvfSectionSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::VAppOvfSectionInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVAppOvfSectionSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVAppOvfSectionSpec"),
    :schema_element => [
      ["vAppOvfSectionSpec", ["VSphereCloud::VAppOvfSectionSpec[]", XSD::QName.new(NsVim25, "VAppOvfSectionSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineAffinityInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineAffinityInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["affinitySet", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineBootOptions,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineBootOptions"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["bootDelay", "SOAP::SOAPLong", [0, 1]],
      ["enterBIOSSetup", "SOAP::SOAPBoolean", [0, 1]],
      ["bootRetryEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["bootRetryDelay", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineCapability,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineCapability"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["snapshotOperationsSupported", "SOAP::SOAPBoolean"],
      ["multipleSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["snapshotConfigSupported", "SOAP::SOAPBoolean"],
      ["poweredOffSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["memorySnapshotsSupported", "SOAP::SOAPBoolean"],
      ["revertToSnapshotSupported", "SOAP::SOAPBoolean"],
      ["quiescedSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["disableSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["lockSnapshotsSupported", "SOAP::SOAPBoolean"],
      ["consolePreferencesSupported", "SOAP::SOAPBoolean"],
      ["cpuFeatureMaskSupported", "SOAP::SOAPBoolean"],
      ["s1AcpiManagementSupported", "SOAP::SOAPBoolean"],
      ["settingScreenResolutionSupported", "SOAP::SOAPBoolean"],
      ["toolsAutoUpdateSupported", "SOAP::SOAPBoolean"],
      ["vmNpivWwnSupported", "SOAP::SOAPBoolean"],
      ["npivWwnOnNonRdmVmSupported", "SOAP::SOAPBoolean"],
      ["vmNpivWwnDisableSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["vmNpivWwnUpdateSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["swapPlacementSupported", "SOAP::SOAPBoolean"],
      ["toolsSyncTimeSupported", "SOAP::SOAPBoolean"],
      ["virtualMmuUsageSupported", "SOAP::SOAPBoolean"],
      ["diskSharesSupported", "SOAP::SOAPBoolean"],
      ["bootOptionsSupported", "SOAP::SOAPBoolean"],
      ["bootRetryOptionsSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["settingVideoRamSizeSupported", "SOAP::SOAPBoolean"],
      ["settingDisplayTopologySupported", "SOAP::SOAPBoolean", [0, 1]],
      ["recordReplaySupported", "SOAP::SOAPBoolean", [0, 1]],
      ["changeTrackingSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineCdromInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineCdromInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineCdromInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineCdromInfo"),
    :schema_element => [
      ["virtualMachineCdromInfo", ["VSphereCloud::VirtualMachineCdromInfo[]", XSD::QName.new(NsVim25, "VirtualMachineCdromInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineCloneSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineCloneSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["location", "VSphereCloud::VirtualMachineRelocateSpec"],
      ["template", "SOAP::SOAPBoolean"],
      ["config", "VSphereCloud::VirtualMachineConfigSpec", [0, 1]],
      ["customization", "VSphereCloud::CustomizationSpec", [0, 1]],
      ["powerOn", "SOAP::SOAPBoolean"],
      ["snapshot", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigInfoDatastoreUrlPair,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigInfoDatastoreUrlPair"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["url", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineConfigInfoDatastoreUrlPair,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineConfigInfoDatastoreUrlPair"),
    :schema_element => [
      ["virtualMachineConfigInfoDatastoreUrlPair", ["VSphereCloud::VirtualMachineConfigInfoDatastoreUrlPair[]", XSD::QName.new(NsVim25, "VirtualMachineConfigInfoDatastoreUrlPair")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeVersion", "SOAP::SOAPString"],
      ["modified", "SOAP::SOAPDateTime"],
      ["name", "SOAP::SOAPString"],
      ["guestFullName", "SOAP::SOAPString"],
      ["version", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString"],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["npivNodeWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivPortWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivWorldWideNameType", "SOAP::SOAPString", [0, 1]],
      ["npivDesiredNodeWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivDesiredPortWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivTemporaryDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["npivOnNonRdmDisks", "SOAP::SOAPBoolean", [0, 1]],
      ["locationId", "SOAP::SOAPString", [0, 1]],
      ["template", "SOAP::SOAPBoolean"],
      ["guestId", "SOAP::SOAPString"],
      ["alternateGuestName", "SOAP::SOAPString"],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["files", "VSphereCloud::VirtualMachineFileInfo"],
      ["tools", "VSphereCloud::ToolsConfigInfo", [0, 1]],
      ["flags", "VSphereCloud::VirtualMachineFlagInfo"],
      ["consolePreferences", "VSphereCloud::VirtualMachineConsolePreferences", [0, 1]],
      ["defaultPowerOps", "VSphereCloud::VirtualMachineDefaultPowerOpInfo"],
      ["hardware", "VSphereCloud::VirtualHardware"],
      ["cpuAllocation", "VSphereCloud::ResourceAllocationInfo", [0, 1]],
      ["memoryAllocation", "VSphereCloud::ResourceAllocationInfo", [0, 1]],
      ["memoryHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotRemoveEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["hotPlugMemoryLimit", "SOAP::SOAPLong", [0, 1]],
      ["hotPlugMemoryIncrementSize", "SOAP::SOAPLong", [0, 1]],
      ["cpuAffinity", "VSphereCloud::VirtualMachineAffinityInfo", [0, 1]],
      ["memoryAffinity", "VSphereCloud::VirtualMachineAffinityInfo", [0, 1]],
      ["networkShaper", "VSphereCloud::VirtualMachineNetworkShaperInfo", [0, 1]],
      ["extraConfig", "VSphereCloud::OptionValue[]", [0, nil]],
      ["cpuFeatureMask", "VSphereCloud::HostCpuIdInfo[]", [0, nil]],
      ["datastoreUrl", "VSphereCloud::VirtualMachineConfigInfoDatastoreUrlPair[]", [0, nil]],
      ["swapPlacement", "SOAP::SOAPString", [0, 1]],
      ["bootOptions", "VSphereCloud::VirtualMachineBootOptions", [0, 1]],
      ["ftInfo", "VSphereCloud::FaultToleranceConfigInfo", [0, 1]],
      ["vAppConfig", "VSphereCloud::VmConfigInfo", [0, 1]],
      ["vAssertsEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["changeTrackingEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["version", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["guestOSDescriptor", "VSphereCloud::GuestOsDescriptor[]", [1, nil]],
      ["guestOSDefaultIndex", "SOAP::SOAPInt"],
      ["hardwareOptions", "VSphereCloud::VirtualHardwareOption"],
      ["capabilities", "VSphereCloud::VirtualMachineCapability"],
      ["datastore", "VSphereCloud::DatastoreOption"],
      ["defaultDevice", "VSphereCloud::VirtualDevice[]", [0, nil]],
      ["supportedMonitorType", "SOAP::SOAPString[]", [1, nil]],
      ["supportedOvfEnvironmentTransport", "SOAP::SOAPString[]", [0, nil]],
      ["supportedOvfInstallTransport", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigOptionDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigOptionDescriptor"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["createSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["defaultConfigOption", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineConfigOptionDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineConfigOptionDescriptor"),
    :schema_element => [
      ["virtualMachineConfigOptionDescriptor", ["VSphereCloud::VirtualMachineConfigOptionDescriptor[]", XSD::QName.new(NsVim25, "VirtualMachineConfigOptionDescriptor")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineCpuIdInfoSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineCpuIdInfoSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ArrayUpdateSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::ArrayUpdateOperation"],
      ["removeKey", nil, [0, 1]],
      ["info", "VSphereCloud::HostCpuIdInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineCpuIdInfoSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineCpuIdInfoSpec"),
    :schema_element => [
      ["virtualMachineCpuIdInfoSpec", ["VSphereCloud::VirtualMachineCpuIdInfoSpec[]", XSD::QName.new(NsVim25, "VirtualMachineCpuIdInfoSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeVersion", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["npivNodeWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivPortWorldWideName", "SOAP::SOAPLong[]", [0, nil]],
      ["npivWorldWideNameType", "SOAP::SOAPString", [0, 1]],
      ["npivDesiredNodeWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivDesiredPortWwns", "SOAP::SOAPShort", [0, 1]],
      ["npivTemporaryDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["npivOnNonRdmDisks", "SOAP::SOAPBoolean", [0, 1]],
      ["npivWorldWideNameOp", "SOAP::SOAPString", [0, 1]],
      ["locationId", "SOAP::SOAPString", [0, 1]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["alternateGuestName", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["files", "VSphereCloud::VirtualMachineFileInfo", [0, 1]],
      ["tools", "VSphereCloud::ToolsConfigInfo", [0, 1]],
      ["flags", "VSphereCloud::VirtualMachineFlagInfo", [0, 1]],
      ["consolePreferences", "VSphereCloud::VirtualMachineConsolePreferences", [0, 1]],
      ["powerOpInfo", "VSphereCloud::VirtualMachineDefaultPowerOpInfo", [0, 1]],
      ["numCPUs", "SOAP::SOAPInt", [0, 1]],
      ["memoryMB", "SOAP::SOAPLong", [0, 1]],
      ["memoryHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotAddEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuHotRemoveEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["deviceChange", "VSphereCloud::VirtualDeviceConfigSpec[]", [0, nil]],
      ["cpuAllocation", "VSphereCloud::ResourceAllocationInfo", [0, 1]],
      ["memoryAllocation", "VSphereCloud::ResourceAllocationInfo", [0, 1]],
      ["cpuAffinity", "VSphereCloud::VirtualMachineAffinityInfo", [0, 1]],
      ["memoryAffinity", "VSphereCloud::VirtualMachineAffinityInfo", [0, 1]],
      ["networkShaper", "VSphereCloud::VirtualMachineNetworkShaperInfo", [0, 1]],
      ["cpuFeatureMask", "VSphereCloud::VirtualMachineCpuIdInfoSpec[]", [0, nil]],
      ["extraConfig", "VSphereCloud::OptionValue[]", [0, nil]],
      ["swapPlacement", "SOAP::SOAPString", [0, 1]],
      ["bootOptions", "VSphereCloud::VirtualMachineBootOptions", [0, 1]],
      ["vAppConfig", "VSphereCloud::VmConfigSpec", [0, 1]],
      ["ftInfo", "VSphereCloud::FaultToleranceConfigInfo", [0, 1]],
      ["vAppConfigRemoved", "SOAP::SOAPBoolean", [0, 1]],
      ["vAssertsEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["changeTrackingEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConfigTarget,
    :schema_type => XSD::QName.new(NsVim25, "ConfigTarget"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["numCpus", "SOAP::SOAPInt"],
      ["numCpuCores", "SOAP::SOAPInt"],
      ["numNumaNodes", "SOAP::SOAPInt"],
      ["datastore", "VSphereCloud::VirtualMachineDatastoreInfo[]", [0, nil]],
      ["network", "VSphereCloud::VirtualMachineNetworkInfo[]", [0, nil]],
      ["distributedVirtualPortgroup", "VSphereCloud::DistributedVirtualPortgroupInfo[]", [0, nil]],
      ["distributedVirtualSwitch", "VSphereCloud::DistributedVirtualSwitchInfo[]", [0, nil]],
      ["cdRom", "VSphereCloud::VirtualMachineCdromInfo[]", [0, nil]],
      ["serial", "VSphereCloud::VirtualMachineSerialInfo[]", [0, nil]],
      ["parallel", "VSphereCloud::VirtualMachineParallelInfo[]", [0, nil]],
      ["sound", "VSphereCloud::VirtualMachineSoundInfo[]", [0, nil]],
      ["usb", "VSphereCloud::VirtualMachineUsbInfo[]", [0, nil]],
      ["floppy", "VSphereCloud::VirtualMachineFloppyInfo[]", [0, nil]],
      ["legacyNetworkInfo", "VSphereCloud::VirtualMachineLegacyNetworkSwitchInfo[]", [0, nil]],
      ["scsiPassthrough", "VSphereCloud::VirtualMachineScsiPassthroughInfo[]", [0, nil]],
      ["scsiDisk", "VSphereCloud::VirtualMachineScsiDiskDeviceInfo[]", [0, nil]],
      ["ideDisk", "VSphereCloud::VirtualMachineIdeDiskDeviceInfo[]", [0, nil]],
      ["maxMemMBOptimalPerf", "SOAP::SOAPInt"],
      ["resourcePool", "VSphereCloud::ResourcePoolRuntimeInfo", [0, 1]],
      ["autoVmotion", "SOAP::SOAPBoolean", [0, 1]],
      ["pciPassthrough", "VSphereCloud::VirtualMachinePciPassthroughInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineConsolePreferences,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConsolePreferences"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["powerOnWhenOpened", "SOAP::SOAPBoolean", [0, 1]],
      ["enterFullScreenOnPowerOn", "SOAP::SOAPBoolean", [0, 1]],
      ["closeOnPowerOffOrSuspend", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineDatastoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDatastoreInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["datastore", "VSphereCloud::DatastoreSummary"],
      ["capability", "VSphereCloud::DatastoreCapability"],
      ["maxFileSize", "SOAP::SOAPLong"],
      ["mode", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineDatastoreInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineDatastoreInfo"),
    :schema_element => [
      ["virtualMachineDatastoreInfo", ["VSphereCloud::VirtualMachineDatastoreInfo[]", XSD::QName.new(NsVim25, "VirtualMachineDatastoreInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineDatastoreVolumeOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDatastoreVolumeOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileSystemType", "SOAP::SOAPString"],
      ["majorVersion", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineDatastoreVolumeOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineDatastoreVolumeOption"),
    :schema_element => [
      ["virtualMachineDatastoreVolumeOption", ["VSphereCloud::VirtualMachineDatastoreVolumeOption[]", XSD::QName.new(NsVim25, "VirtualMachineDatastoreVolumeOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreOption,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["unsupportedVolumes", "VSphereCloud::VirtualMachineDatastoreVolumeOption[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineDefaultPowerOpInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDefaultPowerOpInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["powerOffType", "SOAP::SOAPString", [0, 1]],
      ["suspendType", "SOAP::SOAPString", [0, 1]],
      ["resetType", "SOAP::SOAPString", [0, 1]],
      ["defaultPowerOffType", "SOAP::SOAPString", [0, 1]],
      ["defaultSuspendType", "SOAP::SOAPString", [0, 1]],
      ["defaultResetType", "SOAP::SOAPString", [0, 1]],
      ["standbyAction", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineDeviceRuntimeInfoDeviceRuntimeState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDeviceRuntimeInfoDeviceRuntimeState"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeState"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineDeviceRuntimeInfoDeviceRuntimeState"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmDirectPathGen2Active", "SOAP::SOAPBoolean"],
      ["vmDirectPathGen2InactiveReasonVm", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonOther", "SOAP::SOAPString[]", [0, nil]],
      ["vmDirectPathGen2InactiveReasonExtended", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineDeviceRuntimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDeviceRuntimeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["runtimeState", "VSphereCloud::VirtualMachineDeviceRuntimeInfoDeviceRuntimeState"],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineDeviceRuntimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineDeviceRuntimeInfo"),
    :schema_element => [
      ["virtualMachineDeviceRuntimeInfo", ["VSphereCloud::VirtualMachineDeviceRuntimeInfo[]", XSD::QName.new(NsVim25, "VirtualMachineDeviceRuntimeInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineDiskDeviceInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDiskDeviceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultToleranceConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["role", "SOAP::SOAPInt"],
      ["instanceUuids", "SOAP::SOAPString[]", [1, nil]],
      ["configPaths", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultTolerancePrimaryConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "FaultTolerancePrimaryConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FaultToleranceConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["role", "SOAP::SOAPInt"],
      ["instanceUuids", "SOAP::SOAPString[]", [1, nil]],
      ["configPaths", "SOAP::SOAPString[]", [1, nil]],
      ["secondaries", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultToleranceSecondaryConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceSecondaryConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "FaultToleranceConfigInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["role", "SOAP::SOAPInt"],
      ["instanceUuids", "SOAP::SOAPString[]", [1, nil]],
      ["configPaths", "SOAP::SOAPString[]", [1, nil]],
      ["primaryVM", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultToleranceSecondaryOpResult,
    :schema_type => XSD::QName.new(NsVim25, "FaultToleranceSecondaryOpResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["powerOnAttempted", "SOAP::SOAPBoolean"],
      ["powerOnResult", "VSphereCloud::ClusterPowerOnVmResult", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vmPathName", "SOAP::SOAPString", [0, 1]],
      ["snapshotDirectory", "SOAP::SOAPString", [0, 1]],
      ["suspendDirectory", "SOAP::SOAPString", [0, 1]],
      ["logDirectory", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutDiskLayout,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutDiskLayout"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["diskFile", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineFileLayoutDiskLayout,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineFileLayoutDiskLayout"),
    :schema_element => [
      ["virtualMachineFileLayoutDiskLayout", ["VSphereCloud::VirtualMachineFileLayoutDiskLayout[]", XSD::QName.new(NsVim25, "VirtualMachineFileLayoutDiskLayout")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutSnapshotLayout,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutSnapshotLayout"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["snapshotFile", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineFileLayoutSnapshotLayout,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineFileLayoutSnapshotLayout"),
    :schema_element => [
      ["virtualMachineFileLayoutSnapshotLayout", ["VSphereCloud::VirtualMachineFileLayoutSnapshotLayout[]", XSD::QName.new(NsVim25, "VirtualMachineFileLayoutSnapshotLayout")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayout,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayout"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["configFile", "SOAP::SOAPString[]", [0, nil]],
      ["logFile", "SOAP::SOAPString[]", [0, nil]],
      ["disk", "VSphereCloud::VirtualMachineFileLayoutDiskLayout[]", [0, nil]],
      ["snapshot", "VSphereCloud::VirtualMachineFileLayoutSnapshotLayout[]", [0, nil]],
      ["swapFile", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutExFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExFileInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["size", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineFileLayoutExFileInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineFileLayoutExFileInfo"),
    :schema_element => [
      ["virtualMachineFileLayoutExFileInfo", ["VSphereCloud::VirtualMachineFileLayoutExFileInfo[]", XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExFileInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutExDiskUnit,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExDiskUnit"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileKey", "SOAP::SOAPInt[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineFileLayoutExDiskUnit,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineFileLayoutExDiskUnit"),
    :schema_element => [
      ["virtualMachineFileLayoutExDiskUnit", ["VSphereCloud::VirtualMachineFileLayoutExDiskUnit[]", XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExDiskUnit")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutExDiskLayout,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExDiskLayout"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["chain", "VSphereCloud::VirtualMachineFileLayoutExDiskUnit[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineFileLayoutExDiskLayout,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineFileLayoutExDiskLayout"),
    :schema_element => [
      ["virtualMachineFileLayoutExDiskLayout", ["VSphereCloud::VirtualMachineFileLayoutExDiskLayout[]", XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExDiskLayout")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutExSnapshotLayout,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExSnapshotLayout"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "VSphereCloud::ManagedObjectReference"],
      ["dataKey", "SOAP::SOAPInt"],
      ["disk", "VSphereCloud::VirtualMachineFileLayoutExDiskLayout[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineFileLayoutExSnapshotLayout,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineFileLayoutExSnapshotLayout"),
    :schema_element => [
      ["virtualMachineFileLayoutExSnapshotLayout", ["VSphereCloud::VirtualMachineFileLayoutExSnapshotLayout[]", XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExSnapshotLayout")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutEx,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutEx"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["file", "VSphereCloud::VirtualMachineFileLayoutExFileInfo[]", [0, nil]],
      ["disk", "VSphereCloud::VirtualMachineFileLayoutExDiskLayout[]", [0, nil]],
      ["snapshot", "VSphereCloud::VirtualMachineFileLayoutExSnapshotLayout[]", [0, nil]],
      ["timestamp", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFlagInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFlagInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["disableAcceleration", "SOAP::SOAPBoolean", [0, 1]],
      ["enableLogging", "SOAP::SOAPBoolean", [0, 1]],
      ["useToe", "SOAP::SOAPBoolean", [0, 1]],
      ["runWithDebugInfo", "SOAP::SOAPBoolean", [0, 1]],
      ["monitorType", "SOAP::SOAPString", [0, 1]],
      ["htSharing", "SOAP::SOAPString", [0, 1]],
      ["snapshotDisabled", "SOAP::SOAPBoolean", [0, 1]],
      ["snapshotLocked", "SOAP::SOAPBoolean", [0, 1]],
      ["diskUuidEnabled", "SOAP::SOAPBoolean", [0, 1]],
      ["virtualMmuUsage", "SOAP::SOAPString", [0, 1]],
      ["virtualExecUsage", "SOAP::SOAPString", [0, 1]],
      ["snapshotPowerOffBehavior", "SOAP::SOAPString", [0, 1]],
      ["recordReplayEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFloppyInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFloppyInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineFloppyInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineFloppyInfo"),
    :schema_element => [
      ["virtualMachineFloppyInfo", ["VSphereCloud::VirtualMachineFloppyInfo[]", XSD::QName.new(NsVim25, "VirtualMachineFloppyInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GuestDiskInfo,
    :schema_type => XSD::QName.new(NsVim25, "GuestDiskInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskPath", "SOAP::SOAPString", [0, 1]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["freeSpace", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfGuestDiskInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfGuestDiskInfo"),
    :schema_element => [
      ["guestDiskInfo", ["VSphereCloud::GuestDiskInfo[]", XSD::QName.new(NsVim25, "GuestDiskInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GuestNicInfo,
    :schema_type => XSD::QName.new(NsVim25, "GuestNicInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["network", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString[]", [0, nil]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["connected", "SOAP::SOAPBoolean"],
      ["deviceConfigId", "SOAP::SOAPInt"],
      ["dnsConfig", "VSphereCloud::NetDnsConfigInfo", [0, 1]],
      ["ipConfig", "VSphereCloud::NetIpConfigInfo", [0, 1]],
      ["netBIOSConfig", "VSphereCloud::NetBIOSConfigInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfGuestNicInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfGuestNicInfo"),
    :schema_element => [
      ["guestNicInfo", ["VSphereCloud::GuestNicInfo[]", XSD::QName.new(NsVim25, "GuestNicInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GuestStackInfo,
    :schema_type => XSD::QName.new(NsVim25, "GuestStackInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dnsConfig", "VSphereCloud::NetDnsConfigInfo", [0, 1]],
      ["ipRouteConfig", "VSphereCloud::NetIpRouteConfigInfo", [0, 1]],
      ["ipStackConfig", "VSphereCloud::KeyValue[]", [0, nil]],
      ["dhcpConfig", "VSphereCloud::NetDhcpConfigInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfGuestStackInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfGuestStackInfo"),
    :schema_element => [
      ["guestStackInfo", ["VSphereCloud::GuestStackInfo[]", XSD::QName.new(NsVim25, "GuestStackInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GuestScreenInfo,
    :schema_type => XSD::QName.new(NsVim25, "GuestScreenInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["width", "SOAP::SOAPInt"],
      ["height", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GuestInfo,
    :schema_type => XSD::QName.new(NsVim25, "GuestInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["toolsStatus", "VSphereCloud::VirtualMachineToolsStatus", [0, 1]],
      ["toolsVersionStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsRunningStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsVersion", "SOAP::SOAPString", [0, 1]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["guestFamily", "SOAP::SOAPString", [0, 1]],
      ["guestFullName", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]],
      ["net", "VSphereCloud::GuestNicInfo[]", [0, nil]],
      ["ipStack", "VSphereCloud::GuestStackInfo[]", [0, nil]],
      ["disk", "VSphereCloud::GuestDiskInfo[]", [0, nil]],
      ["screen", "VSphereCloud::GuestScreenInfo", [0, 1]],
      ["guestState", "SOAP::SOAPString"],
      ["appHeartbeatStatus", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GuestOsDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "GuestOsDescriptor"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["family", "SOAP::SOAPString"],
      ["fullName", "SOAP::SOAPString"],
      ["supportedMaxCPUs", "SOAP::SOAPInt"],
      ["supportedMinMemMB", "SOAP::SOAPInt"],
      ["supportedMaxMemMB", "SOAP::SOAPInt"],
      ["recommendedMemMB", "SOAP::SOAPInt"],
      ["recommendedColorDepth", "SOAP::SOAPInt"],
      ["supportedDiskControllerList", "SOAP::SOAPString[]", [1, nil]],
      ["recommendedSCSIController", "SOAP::SOAPString", [0, 1]],
      ["recommendedDiskController", "SOAP::SOAPString"],
      ["supportedNumDisks", "SOAP::SOAPInt"],
      ["recommendedDiskSizeMB", "SOAP::SOAPInt"],
      ["supportedEthernetCard", "SOAP::SOAPString[]", [1, nil]],
      ["recommendedEthernetCard", "SOAP::SOAPString", [0, 1]],
      ["supportsSlaveDisk", "SOAP::SOAPBoolean", [0, 1]],
      ["cpuFeatureMask", "VSphereCloud::HostCpuIdInfo[]", [0, nil]],
      ["supportsWakeOnLan", "SOAP::SOAPBoolean"],
      ["supportsVMI", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsMemoryHotAdd", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsCpuHotAdd", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsCpuHotRemove", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfGuestOsDescriptor,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfGuestOsDescriptor"),
    :schema_element => [
      ["guestOsDescriptor", ["VSphereCloud::GuestOsDescriptor[]", XSD::QName.new(NsVim25, "GuestOsDescriptor")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineIdeDiskDevicePartitionInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineIdeDiskDevicePartitionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPInt"],
      ["capacity", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineIdeDiskDevicePartitionInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineIdeDiskDevicePartitionInfo"),
    :schema_element => [
      ["virtualMachineIdeDiskDevicePartitionInfo", ["VSphereCloud::VirtualMachineIdeDiskDevicePartitionInfo[]", XSD::QName.new(NsVim25, "VirtualMachineIdeDiskDevicePartitionInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineIdeDiskDeviceInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineIdeDiskDeviceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineDiskDeviceInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["partitionTable", "VSphereCloud::VirtualMachineIdeDiskDevicePartitionInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineIdeDiskDeviceInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineIdeDiskDeviceInfo"),
    :schema_element => [
      ["virtualMachineIdeDiskDeviceInfo", ["VSphereCloud::VirtualMachineIdeDiskDeviceInfo[]", XSD::QName.new(NsVim25, "VirtualMachineIdeDiskDeviceInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineLegacyNetworkSwitchInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineLegacyNetworkSwitchInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineLegacyNetworkSwitchInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineLegacyNetworkSwitchInfo"),
    :schema_element => [
      ["virtualMachineLegacyNetworkSwitchInfo", ["VSphereCloud::VirtualMachineLegacyNetworkSwitchInfo[]", XSD::QName.new(NsVim25, "VirtualMachineLegacyNetworkSwitchInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineMessage,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineMessage"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["argument", "[]", [0, nil]],
      ["text", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineMessage,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineMessage"),
    :schema_element => [
      ["virtualMachineMessage", ["VSphereCloud::VirtualMachineMessage[]", XSD::QName.new(NsVim25, "VirtualMachineMessage")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineNetworkInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineNetworkInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["network", "VSphereCloud::NetworkSummary"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineNetworkInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineNetworkInfo"),
    :schema_element => [
      ["virtualMachineNetworkInfo", ["VSphereCloud::VirtualMachineNetworkInfo[]", XSD::QName.new(NsVim25, "VirtualMachineNetworkInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineNetworkShaperInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineNetworkShaperInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["enabled", "SOAP::SOAPBoolean", [0, 1]],
      ["peakBps", "SOAP::SOAPLong", [0, 1]],
      ["averageBps", "SOAP::SOAPLong", [0, 1]],
      ["burstSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineParallelInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineParallelInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineParallelInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineParallelInfo"),
    :schema_element => [
      ["virtualMachineParallelInfo", ["VSphereCloud::VirtualMachineParallelInfo[]", XSD::QName.new(NsVim25, "VirtualMachineParallelInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachinePciPassthroughInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachinePciPassthroughInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["pciDevice", "VSphereCloud::HostPciDevice"],
      ["systemId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachinePciPassthroughInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachinePciPassthroughInfo"),
    :schema_element => [
      ["virtualMachinePciPassthroughInfo", ["VSphereCloud::VirtualMachinePciPassthroughInfo[]", XSD::QName.new(NsVim25, "VirtualMachinePciPassthroughInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineQuestionInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineQuestionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["text", "SOAP::SOAPString"],
      ["choice", "VSphereCloud::ChoiceOption"],
      ["message", "VSphereCloud::VirtualMachineMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineRelocateSpecDiskLocator,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineRelocateSpecDiskLocator"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["diskId", "SOAP::SOAPInt"],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["diskMoveType", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineRelocateSpecDiskLocator,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineRelocateSpecDiskLocator"),
    :schema_element => [
      ["virtualMachineRelocateSpecDiskLocator", ["VSphereCloud::VirtualMachineRelocateSpecDiskLocator[]", XSD::QName.new(NsVim25, "VirtualMachineRelocateSpecDiskLocator")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineRelocateSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineRelocateSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["diskMoveType", "SOAP::SOAPString", [0, 1]],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["disk", "VSphereCloud::VirtualMachineRelocateSpecDiskLocator[]", [0, nil]],
      ["transform", "VSphereCloud::VirtualMachineRelocateTransformation", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineRuntimeInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineRuntimeInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["device", "VSphereCloud::VirtualMachineDeviceRuntimeInfo[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["connectionState", "VSphereCloud::VirtualMachineConnectionState"],
      ["powerState", "VSphereCloud::VirtualMachinePowerState"],
      ["faultToleranceState", "VSphereCloud::VirtualMachineFaultToleranceState", [0, 1]],
      ["toolsInstallerMounted", "SOAP::SOAPBoolean"],
      ["suspendTime", "SOAP::SOAPDateTime", [0, 1]],
      ["bootTime", "SOAP::SOAPDateTime", [0, 1]],
      ["suspendInterval", "SOAP::SOAPLong", [0, 1]],
      ["question", "VSphereCloud::VirtualMachineQuestionInfo", [0, 1]],
      ["memoryOverhead", "SOAP::SOAPLong", [0, 1]],
      ["maxCpuUsage", "SOAP::SOAPInt", [0, 1]],
      ["maxMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["numMksConnections", "SOAP::SOAPInt"],
      ["recordReplayState", "VSphereCloud::VirtualMachineRecordReplayState", [0, 1]],
      ["cleanPowerOff", "SOAP::SOAPBoolean", [0, 1]],
      ["needSecondaryReason", "SOAP::SOAPString", [0, 1]],
      ["minRequiredEVCModeKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineScsiDiskDeviceInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineScsiDiskDeviceInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineDiskDeviceInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["capacity", "SOAP::SOAPLong", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["disk", "VSphereCloud::HostScsiDisk", [0, 1]],
      ["transportHint", "SOAP::SOAPString", [0, 1]],
      ["lunNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineScsiDiskDeviceInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineScsiDiskDeviceInfo"),
    :schema_element => [
      ["virtualMachineScsiDiskDeviceInfo", ["VSphereCloud::VirtualMachineScsiDiskDeviceInfo[]", XSD::QName.new(NsVim25, "VirtualMachineScsiDiskDeviceInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineScsiPassthroughInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineScsiPassthroughInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["scsiClass", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPString"],
      ["physicalUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineScsiPassthroughInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineScsiPassthroughInfo"),
    :schema_element => [
      ["virtualMachineScsiPassthroughInfo", ["VSphereCloud::VirtualMachineScsiPassthroughInfo[]", XSD::QName.new(NsVim25, "VirtualMachineScsiPassthroughInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineSerialInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineSerialInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineSerialInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineSerialInfo"),
    :schema_element => [
      ["virtualMachineSerialInfo", ["VSphereCloud::VirtualMachineSerialInfo[]", XSD::QName.new(NsVim25, "VirtualMachineSerialInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineSnapshotInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineSnapshotInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["currentSnapshot", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["rootSnapshotList", "VSphereCloud::VirtualMachineSnapshotTree[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineSnapshotTree,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineSnapshotTree"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["snapshot", "VSphereCloud::ManagedObjectReference"],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString"],
      ["id", "SOAP::SOAPInt", [0, 1]],
      ["createTime", "SOAP::SOAPDateTime"],
      ["state", "VSphereCloud::VirtualMachinePowerState"],
      ["quiesced", "SOAP::SOAPBoolean"],
      ["backupManifest", "SOAP::SOAPString", [0, 1]],
      ["childSnapshotList", "VSphereCloud::VirtualMachineSnapshotTree[]", [0, nil]],
      ["replaySupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineSnapshotTree,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineSnapshotTree"),
    :schema_element => [
      ["virtualMachineSnapshotTree", ["VSphereCloud::VirtualMachineSnapshotTree[]", XSD::QName.new(NsVim25, "VirtualMachineSnapshotTree")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineSoundInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineSoundInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineSoundInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineSoundInfo"),
    :schema_element => [
      ["virtualMachineSoundInfo", ["VSphereCloud::VirtualMachineSoundInfo[]", XSD::QName.new(NsVim25, "VirtualMachineSoundInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineUsageOnDatastore,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineUsageOnDatastore"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["committed", "SOAP::SOAPLong"],
      ["uncommitted", "SOAP::SOAPLong"],
      ["unshared", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineUsageOnDatastore,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineUsageOnDatastore"),
    :schema_element => [
      ["virtualMachineUsageOnDatastore", ["VSphereCloud::VirtualMachineUsageOnDatastore[]", XSD::QName.new(NsVim25, "VirtualMachineUsageOnDatastore")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineStorageInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineStorageInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["perDatastoreUsage", "VSphereCloud::VirtualMachineUsageOnDatastore[]", [0, nil]],
      ["timestamp", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigSummary,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["template", "SOAP::SOAPBoolean"],
      ["vmPathName", "SOAP::SOAPString"],
      ["memorySizeMB", "SOAP::SOAPInt", [0, 1]],
      ["cpuReservation", "SOAP::SOAPInt", [0, 1]],
      ["memoryReservation", "SOAP::SOAPInt", [0, 1]],
      ["numCpu", "SOAP::SOAPInt", [0, 1]],
      ["numEthernetCards", "SOAP::SOAPInt", [0, 1]],
      ["numVirtualDisks", "SOAP::SOAPInt", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["guestFullName", "SOAP::SOAPString", [0, 1]],
      ["annotation", "SOAP::SOAPString", [0, 1]],
      ["product", "VSphereCloud::VAppProductInfo", [0, 1]],
      ["installBootRequired", "SOAP::SOAPBoolean", [0, 1]],
      ["ftInfo", "VSphereCloud::FaultToleranceConfigInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineQuickStats,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineQuickStats"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["overallCpuUsage", "SOAP::SOAPInt", [0, 1]],
      ["overallCpuDemand", "SOAP::SOAPInt", [0, 1]],
      ["guestMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["hostMemoryUsage", "SOAP::SOAPInt", [0, 1]],
      ["guestHeartbeatStatus", "VSphereCloud::ManagedEntityStatus"],
      ["distributedCpuEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["distributedMemoryEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["staticCpuEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["staticMemoryEntitlement", "SOAP::SOAPInt", [0, 1]],
      ["privateMemory", "SOAP::SOAPInt", [0, 1]],
      ["sharedMemory", "SOAP::SOAPInt", [0, 1]],
      ["swappedMemory", "SOAP::SOAPInt", [0, 1]],
      ["balloonedMemory", "SOAP::SOAPInt", [0, 1]],
      ["consumedOverheadMemory", "SOAP::SOAPInt", [0, 1]],
      ["ftLogBandwidth", "SOAP::SOAPInt", [0, 1]],
      ["ftSecondaryLatency", "SOAP::SOAPInt", [0, 1]],
      ["ftLatencyStatus", "VSphereCloud::ManagedEntityStatus", [0, 1]],
      ["compressedMemory", "SOAP::SOAPLong", [0, 1]],
      ["uptimeSeconds", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineGuestSummary,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineGuestSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["guestId", "SOAP::SOAPString", [0, 1]],
      ["guestFullName", "SOAP::SOAPString", [0, 1]],
      ["toolsStatus", "VSphereCloud::VirtualMachineToolsStatus", [0, 1]],
      ["toolsVersionStatus", "SOAP::SOAPString", [0, 1]],
      ["toolsRunningStatus", "SOAP::SOAPString", [0, 1]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["ipAddress", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineStorageSummary,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineStorageSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["committed", "SOAP::SOAPLong"],
      ["uncommitted", "SOAP::SOAPLong"],
      ["unshared", "SOAP::SOAPLong"],
      ["timestamp", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineSummary,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineSummary"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["runtime", "VSphereCloud::VirtualMachineRuntimeInfo"],
      ["guest", "VSphereCloud::VirtualMachineGuestSummary", [0, 1]],
      ["config", "VSphereCloud::VirtualMachineConfigSummary"],
      ["storage", "VSphereCloud::VirtualMachineStorageSummary", [0, 1]],
      ["quickStats", "VSphereCloud::VirtualMachineQuickStats"],
      ["overallStatus", "VSphereCloud::ManagedEntityStatus"],
      ["customValue", "VSphereCloud::CustomFieldValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineSummary,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineSummary"),
    :schema_element => [
      ["virtualMachineSummary", ["VSphereCloud::VirtualMachineSummary[]", XSD::QName.new(NsVim25, "VirtualMachineSummary")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineTargetInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ToolsConfigInfo,
    :schema_type => XSD::QName.new(NsVim25, "ToolsConfigInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["toolsVersion", "SOAP::SOAPInt", [0, 1]],
      ["afterPowerOn", "SOAP::SOAPBoolean", [0, 1]],
      ["afterResume", "SOAP::SOAPBoolean", [0, 1]],
      ["beforeGuestStandby", "SOAP::SOAPBoolean", [0, 1]],
      ["beforeGuestShutdown", "SOAP::SOAPBoolean", [0, 1]],
      ["beforeGuestReboot", "SOAP::SOAPBoolean", [0, 1]],
      ["toolsUpgradePolicy", "SOAP::SOAPString", [0, 1]],
      ["pendingCustomization", "SOAP::SOAPString", [0, 1]],
      ["syncTimeWithHost", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineUsbInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineUsbInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualMachineTargetInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["configurationTag", "SOAP::SOAPString[]", [0, nil]],
      ["description", "SOAP::SOAPString"],
      ["vendor", "SOAP::SOAPInt"],
      ["product", "SOAP::SOAPInt"],
      ["physicalPath", "SOAP::SOAPString"],
      ["family", "SOAP::SOAPString[]", [0, nil]],
      ["speed", "SOAP::SOAPString[]", [0, nil]],
      ["summary", "VSphereCloud::VirtualMachineSummary", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualMachineUsbInfo,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualMachineUsbInfo"),
    :schema_element => [
      ["virtualMachineUsbInfo", ["VSphereCloud::VirtualMachineUsbInfo[]", XSD::QName.new(NsVim25, "VirtualMachineUsbInfo")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualHardware,
    :schema_type => XSD::QName.new(NsVim25, "VirtualHardware"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["numCPU", "SOAP::SOAPInt"],
      ["memoryMB", "SOAP::SOAPInt"],
      ["device", "VSphereCloud::VirtualDevice[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualHardwareOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualHardwareOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["hwVersion", "SOAP::SOAPInt"],
      ["virtualDeviceOption", "VSphereCloud::VirtualDeviceOption[]", [1, nil]],
      ["deviceListReadonly", "SOAP::SOAPBoolean"],
      ["numCPU", "SOAP::SOAPInt[]", [1, nil]],
      ["numCpuReadonly", "SOAP::SOAPBoolean"],
      ["memoryMB", "VSphereCloud::LongOption"],
      ["numPCIControllers", "VSphereCloud::IntOption"],
      ["numIDEControllers", "VSphereCloud::IntOption"],
      ["numUSBControllers", "VSphereCloud::IntOption"],
      ["numSIOControllers", "VSphereCloud::IntOption"],
      ["numPS2Controllers", "VSphereCloud::IntOption"],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["numSupportedWwnPorts", "VSphereCloud::IntOption", [0, 1]],
      ["numSupportedWwnNodes", "VSphereCloud::IntOption", [0, 1]],
      ["resourceConfigOption", "VSphereCloud::ResourceConfigOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineImportSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineImportSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "ImportSpec"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["entityConfig", "VSphereCloud::VAppEntityConfigInfo", [0, 1]],
      ["configSpec", "VSphereCloud::VirtualMachineConfigSpec"],
      ["resPoolEntity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckResult,
    :schema_type => XSD::QName.new(NsVim25, "CheckResult"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["warning", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfCheckResult,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfCheckResult"),
    :schema_element => [
      ["checkResult", ["VSphereCloud::CheckResult[]", XSD::QName.new(NsVim25, "CheckResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationSpec,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["options", "VSphereCloud::CustomizationOptions", [0, 1]],
      ["identity", "VSphereCloud::CustomizationIdentitySettings"],
      ["globalIPSettings", "VSphereCloud::CustomizationGlobalIPSettings"],
      ["nicSettingMap", "VSphereCloud::CustomizationAdapterMapping[]", [0, nil]],
      ["encryptionKey", "SOAP::SOAPByte[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationName,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationName"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationFixedName,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationFixedName"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationName"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationPrefixName,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationPrefixName"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationName"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["base", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationVirtualMachineName,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationVirtualMachineName"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationName"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationUnknownName,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationUnknownName"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationName"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationCustomName,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationCustomName"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationName"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationPassword,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationPassword"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["value", "SOAP::SOAPString"],
      ["plainText", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationOptions,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationOptions"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationWinOptions,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationWinOptions"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationOptions"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["changeSID", "SOAP::SOAPBoolean"],
      ["deleteAccounts", "SOAP::SOAPBoolean"],
      ["reboot", "VSphereCloud::CustomizationSysprepRebootOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationLinuxOptions,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationLinuxOptions"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationOptions"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationGuiUnattended,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationGuiUnattended"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["password", "VSphereCloud::CustomizationPassword", [0, 1]],
      ["timeZone", "SOAP::SOAPInt"],
      ["autoLogon", "SOAP::SOAPBoolean"],
      ["autoLogonCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationUserData,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationUserData"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fullName", "SOAP::SOAPString"],
      ["orgName", "SOAP::SOAPString"],
      ["computerName", "VSphereCloud::CustomizationName"],
      ["productId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationGuiRunOnce,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationGuiRunOnce"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["commandList", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationIdentification,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationIdentification"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["joinWorkgroup", "SOAP::SOAPString", [0, 1]],
      ["joinDomain", "SOAP::SOAPString", [0, 1]],
      ["domainAdmin", "SOAP::SOAPString", [0, 1]],
      ["domainAdminPassword", "VSphereCloud::CustomizationPassword", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationLicenseFilePrintData,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationLicenseFilePrintData"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["autoMode", "VSphereCloud::CustomizationLicenseDataMode"],
      ["autoUsers", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationIdentitySettings,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationIdentitySettings"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationSysprepText,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSysprepText"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIdentitySettings"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationSysprep,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSysprep"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIdentitySettings"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["guiUnattended", "VSphereCloud::CustomizationGuiUnattended"],
      ["userData", "VSphereCloud::CustomizationUserData"],
      ["guiRunOnce", "VSphereCloud::CustomizationGuiRunOnce", [0, 1]],
      ["identification", "VSphereCloud::CustomizationIdentification"],
      ["licenseFilePrintData", "VSphereCloud::CustomizationLicenseFilePrintData", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationLinuxPrep,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationLinuxPrep"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIdentitySettings"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["hostName", "VSphereCloud::CustomizationName"],
      ["domain", "SOAP::SOAPString"],
      ["timeZone", "SOAP::SOAPString", [0, 1]],
      ["hwClockUTC", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationGlobalIPSettings,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationGlobalIPSettings"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["dnsSuffixList", "SOAP::SOAPString[]", [0, nil]],
      ["dnsServerList", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationIPSettingsIpV6AddressSpec,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationIPSettingsIpV6AddressSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ip", "VSphereCloud::CustomizationIpV6Generator[]", [1, nil]],
      ["gateway", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationIPSettings,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationIPSettings"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ip", "VSphereCloud::CustomizationIpGenerator"],
      ["subnetMask", "SOAP::SOAPString", [0, 1]],
      ["gateway", "SOAP::SOAPString[]", [0, nil]],
      ["ipV6Spec", "VSphereCloud::CustomizationIPSettingsIpV6AddressSpec", [0, 1]],
      ["dnsServerList", "SOAP::SOAPString[]", [0, nil]],
      ["dnsDomain", "SOAP::SOAPString", [0, 1]],
      ["primaryWINS", "SOAP::SOAPString", [0, 1]],
      ["secondaryWINS", "SOAP::SOAPString", [0, 1]],
      ["netBIOS", "VSphereCloud::CustomizationNetBIOSMode", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationIpGenerator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationIpGenerator"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationDhcpIpGenerator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationDhcpIpGenerator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpGenerator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationFixedIp,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationFixedIp"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpGenerator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationUnknownIpGenerator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationUnknownIpGenerator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpGenerator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationCustomIpGenerator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationCustomIpGenerator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpGenerator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationIpV6Generator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationIpV6Generator"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfCustomizationIpV6Generator,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfCustomizationIpV6Generator"),
    :schema_element => [
      ["customizationIpV6Generator", ["VSphereCloud::CustomizationIpV6Generator[]", XSD::QName.new(NsVim25, "CustomizationIpV6Generator")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationDhcpIpV6Generator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationDhcpIpV6Generator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpV6Generator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationStatelessIpV6Generator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationStatelessIpV6Generator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpV6Generator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationFixedIpV6,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationFixedIpV6"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpV6Generator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"],
      ["subnetMask", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationAutoIpV6Generator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationAutoIpV6Generator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpV6Generator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationUnknownIpV6Generator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationUnknownIpV6Generator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpV6Generator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationCustomIpV6Generator,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationCustomIpV6Generator"),
    :schema_basetype => XSD::QName.new(NsVim25, "CustomizationIpV6Generator"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationAdapterMapping,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationAdapterMapping"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["adapter", "VSphereCloud::CustomizationIPSettings"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfCustomizationAdapterMapping,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfCustomizationAdapterMapping"),
    :schema_element => [
      ["customizationAdapterMapping", ["VSphereCloud::CustomizationAdapterMapping[]", XSD::QName.new(NsVim25, "CustomizationAdapterMapping")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiskMappingPartitionInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskMappingPartitionInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["fileSystem", "SOAP::SOAPString"],
      ["capacityInKb", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiskMappingInfo,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskMappingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["physicalPartition", "VSphereCloud::HostDiskMappingPartitionInfo", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["exclusive", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiskMappingPartitionOption,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskMappingPartitionOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["fileSystem", "SOAP::SOAPString"],
      ["capacityInKb", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfHostDiskMappingPartitionOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfHostDiskMappingPartitionOption"),
    :schema_element => [
      ["hostDiskMappingPartitionOption", ["VSphereCloud::HostDiskMappingPartitionOption[]", XSD::QName.new(NsVim25, "HostDiskMappingPartitionOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiskMappingOption,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskMappingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["physicalPartition", "VSphereCloud::HostDiskMappingPartitionOption[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ParaVirtualSCSIController,
    :schema_type => XSD::QName.new(NsVim25, "ParaVirtualSCSIController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "VSphereCloud::VirtualSCSISharing"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ParaVirtualSCSIControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "ParaVirtualSCSIControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VSphereCloud::IntOption"],
      ["numSCSICdroms", "VSphereCloud::IntOption"],
      ["numSCSIPassthrough", "VSphereCloud::IntOption"],
      ["sharing", "VSphereCloud::VirtualSCSISharing[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VSphereCloud::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualBusLogicController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualBusLogicController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "VSphereCloud::VirtualSCSISharing"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualBusLogicControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualBusLogicControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VSphereCloud::IntOption"],
      ["numSCSICdroms", "VSphereCloud::IntOption"],
      ["numSCSIPassthrough", "VSphereCloud::IntOption"],
      ["sharing", "VSphereCloud::VirtualSCSISharing[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VSphereCloud::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualCdromIsoBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromIsoBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualCdromPassthroughBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromPassthroughBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["exclusive", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualCdromRemotePassthroughBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromRemotePassthroughBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceRemoteDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["exclusive", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualCdromAtapiBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromAtapiBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualCdromRemoteAtapiBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromRemoteAtapiBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceRemoteDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualCdrom,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdrom"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualCdromIsoBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromIsoBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualCdromPassthroughBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromPassthroughBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"],
      ["exclusive", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualCdromRemotePassthroughBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromRemotePassthroughBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceRemoteDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"],
      ["exclusive", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualCdromAtapiBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromAtapiBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualCdromRemoteAtapiBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromRemoteAtapiBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualCdromOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualCdromOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceFileBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceRemoteDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceRemoteDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDevicePipeBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDevicePipeBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["pipeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceURIBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceURIBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["serviceURI", "SOAP::SOAPString"],
      ["direction", "SOAP::SOAPString"],
      ["proxyURI", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceConnectInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceConnectInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["startConnected", "SOAP::SOAPBoolean"],
      ["allowGuestControl", "SOAP::SOAPBoolean"],
      ["connected", "SOAP::SOAPBoolean"],
      ["status", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDevice,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualDevice,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualDevice"),
    :schema_element => [
      ["virtualDevice", ["VSphereCloud::VirtualDevice[]", XSD::QName.new(NsVim25, "VirtualDevice")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualDeviceBackingOption"),
    :schema_element => [
      ["virtualDeviceBackingOption", ["VSphereCloud::VirtualDeviceBackingOption[]", XSD::QName.new(NsVim25, "VirtualDeviceBackingOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceFileBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceRemoteDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceRemoteDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDevicePipeBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDevicePipeBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceURIBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceURIBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["directions", "VSphereCloud::ChoiceOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceConnectOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceConnectOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["startConnected", "VSphereCloud::BoolOption"],
      ["allowGuestControl", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualDeviceOption,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualDeviceOption"),
    :schema_element => [
      ["virtualDeviceOption", ["VSphereCloud::VirtualDeviceOption[]", XSD::QName.new(NsVim25, "VirtualDeviceOption")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceConfigSpec"),
    :schema_basetype => XSD::QName.new(NsVim25, "DynamicData"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["operation", "VSphereCloud::VirtualDeviceConfigSpecOperation", [0, 1]],
      ["fileOperation", "VSphereCloud::VirtualDeviceConfigSpecFileOperation", [0, 1]],
      ["device", "VSphereCloud::VirtualDevice"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualDeviceConfigSpec,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualDeviceConfigSpec"),
    :schema_element => [
      ["virtualDeviceConfigSpec", ["VSphereCloud::VirtualDeviceConfigSpec[]", XSD::QName.new(NsVim25, "VirtualDeviceConfigSpec")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskSparseVer1BackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskSparseVer1BackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["spaceUsedInKB", "SOAP::SOAPLong", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::VirtualDiskSparseVer1BackingInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskSparseVer2BackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskSparseVer2BackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["spaceUsedInKB", "SOAP::SOAPLong", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::VirtualDiskSparseVer2BackingInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskFlatVer1BackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskFlatVer1BackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::VirtualDiskFlatVer1BackingInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskFlatVer2BackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskFlatVer2BackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["diskMode", "SOAP::SOAPString"],
      ["split", "SOAP::SOAPBoolean", [0, 1]],
      ["writeThrough", "SOAP::SOAPBoolean", [0, 1]],
      ["thinProvisioned", "SOAP::SOAPBoolean", [0, 1]],
      ["eagerlyScrub", "SOAP::SOAPBoolean", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::VirtualDiskFlatVer2BackingInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskRawDiskVer2BackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskRawDiskVer2BackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["descriptorFileName", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskPartitionedRawDiskVer2BackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskPartitionedRawDiskVer2BackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDiskRawDiskVer2BackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["descriptorFileName", "SOAP::SOAPString"],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["partition", "SOAP::SOAPInt[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskRawDiskMappingVer1BackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskRawDiskMappingVer1BackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["lunUuid", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString", [0, 1]],
      ["compatibilityMode", "SOAP::SOAPString", [0, 1]],
      ["diskMode", "SOAP::SOAPString", [0, 1]],
      ["uuid", "SOAP::SOAPString", [0, 1]],
      ["contentId", "SOAP::SOAPString", [0, 1]],
      ["changeId", "SOAP::SOAPString", [0, 1]],
      ["parent", "VSphereCloud::VirtualDiskRawDiskMappingVer1BackingInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDisk,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDisk"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["capacityInKB", "SOAP::SOAPLong"],
      ["shares", "VSphereCloud::SharesInfo", [0, 1]],
      ["storageIOAllocation", "VSphereCloud::StorageIOAllocationInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualDisk,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualDisk"),
    :schema_element => [
      ["virtualDisk", ["VSphereCloud::VirtualDisk[]", XSD::QName.new(NsVim25, "VirtualDisk")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskSparseVer1BackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskSparseVer1BackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]],
      ["diskModes", "VSphereCloud::ChoiceOption"],
      ["split", "VSphereCloud::BoolOption"],
      ["writeThrough", "VSphereCloud::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskSparseVer2BackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskSparseVer2BackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]],
      ["diskMode", "VSphereCloud::ChoiceOption"],
      ["split", "VSphereCloud::BoolOption"],
      ["writeThrough", "VSphereCloud::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"],
      ["hotGrowable", "SOAP::SOAPBoolean"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskFlatVer1BackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskFlatVer1BackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]],
      ["diskMode", "VSphereCloud::ChoiceOption"],
      ["split", "VSphereCloud::BoolOption"],
      ["writeThrough", "VSphereCloud::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskFlatVer2BackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskFlatVer2BackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]],
      ["diskMode", "VSphereCloud::ChoiceOption"],
      ["split", "VSphereCloud::BoolOption"],
      ["writeThrough", "VSphereCloud::BoolOption"],
      ["growable", "SOAP::SOAPBoolean"],
      ["hotGrowable", "SOAP::SOAPBoolean"],
      ["uuid", "SOAP::SOAPBoolean"],
      ["thinProvisioned", "VSphereCloud::BoolOption", [0, 1]],
      ["eagerlyScrub", "VSphereCloud::BoolOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskRawDiskVer2BackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskRawDiskVer2BackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"],
      ["descriptorFileNameExtensions", "VSphereCloud::ChoiceOption"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskPartitionedRawDiskVer2BackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskPartitionedRawDiskVer2BackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDiskRawDiskVer2BackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"],
      ["descriptorFileNameExtensions", "VSphereCloud::ChoiceOption"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskRawDiskMappingVer1BackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskRawDiskMappingVer1BackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"],
      ["descriptorFileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]],
      ["compatibilityMode", "VSphereCloud::ChoiceOption"],
      ["diskMode", "VSphereCloud::ChoiceOption"],
      ["uuid", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["capacityInKB", "VSphereCloud::LongOption"],
      ["ioAllocationOption", "VSphereCloud::StorageIOAllocationOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualE1000,
    :schema_type => XSD::QName.new(NsVim25, "VirtualE1000"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualEthernetCard"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualE1000Option,
    :schema_type => XSD::QName.new(NsVim25, "VirtualE1000Option"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualEthernetCardOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VSphereCloud::ChoiceOption"],
      ["macType", "VSphereCloud::ChoiceOption"],
      ["wakeOnLanEnabled", "VSphereCloud::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualEnsoniq1371,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEnsoniq1371"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSoundCard"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualEnsoniq1371Option,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEnsoniq1371Option"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSoundCardOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardNetworkBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardNetworkBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["network", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["inPassthroughMode", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardLegacyNetworkBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardLegacyNetworkBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardDistributedVirtualPortBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardDistributedVirtualPortBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["port", "VSphereCloud::DistributedVirtualSwitchPortConnection"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualEthernetCard,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCard"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardNetworkBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardNetworkBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardLegacyNetworkBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardLegacyNetworkBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardDVPortBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardDVPortBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VSphereCloud::ChoiceOption"],
      ["macType", "VSphereCloud::ChoiceOption"],
      ["wakeOnLanEnabled", "VSphereCloud::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualFloppyImageBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppyImageBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualFloppyDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppyDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualFloppyRemoteDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppyRemoteDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceRemoteDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualFloppy,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppy"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualFloppyImageBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppyImageBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualFloppyDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppyDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualFloppyRemoteDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppyRemoteDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceRemoteDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualFloppyOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualFloppyOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualIDEController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualIDEController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualIDEControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualIDEControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numIDEDisks", "VSphereCloud::IntOption"],
      ["numIDECdroms", "VSphereCloud::IntOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualKeyboard,
    :schema_type => XSD::QName.new(NsVim25, "VirtualKeyboard"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualKeyboardOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualKeyboardOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualLsiLogicController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualLsiLogicController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "VSphereCloud::VirtualSCSISharing"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualLsiLogicControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualLsiLogicControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VSphereCloud::IntOption"],
      ["numSCSICdroms", "VSphereCloud::IntOption"],
      ["numSCSIPassthrough", "VSphereCloud::IntOption"],
      ["sharing", "VSphereCloud::VirtualSCSISharing[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VSphereCloud::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualLsiLogicSASController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualLsiLogicSASController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "VSphereCloud::VirtualSCSISharing"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualLsiLogicSASControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualLsiLogicSASControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSCSIControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VSphereCloud::IntOption"],
      ["numSCSICdroms", "VSphereCloud::IntOption"],
      ["numSCSIPassthrough", "VSphereCloud::IntOption"],
      ["sharing", "VSphereCloud::VirtualSCSISharing[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VSphereCloud::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualPCIController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCIController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualPCIControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCIControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIControllers", "VSphereCloud::IntOption"],
      ["numEthernetCards", "VSphereCloud::IntOption"],
      ["numVideoCards", "VSphereCloud::IntOption"],
      ["numSoundCards", "VSphereCloud::IntOption"],
      ["numVmiRoms", "VSphereCloud::IntOption"],
      ["numVmciDevices", "VSphereCloud::IntOption", [0, 1]],
      ["numPCIPassthroughDevices", "VSphereCloud::IntOption", [0, 1]],
      ["numSasSCSIControllers", "VSphereCloud::IntOption", [0, 1]],
      ["numVmxnet3EthernetCards", "VSphereCloud::IntOption", [0, 1]],
      ["numParaVirtualSCSIControllers", "VSphereCloud::IntOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualPCIPassthroughDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCIPassthroughDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["id", "SOAP::SOAPString"],
      ["deviceId", "SOAP::SOAPString"],
      ["systemId", "SOAP::SOAPString"],
      ["vendorId", "SOAP::SOAPShort"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualPCIPassthrough,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCIPassthrough"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualPCIPassthroughDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCIPassthroughDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualPCIPassthroughOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCIPassthroughOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualPCNet32,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCNet32"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualEthernetCard"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualPCNet32Option,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPCNet32Option"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualEthernetCardOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VSphereCloud::ChoiceOption"],
      ["macType", "VSphereCloud::ChoiceOption"],
      ["wakeOnLanEnabled", "VSphereCloud::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportsMorphing", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualPS2Controller,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPS2Controller"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualPS2ControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPS2ControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numKeyboards", "VSphereCloud::IntOption"],
      ["numPointingDevices", "VSphereCloud::IntOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualParallelPortFileBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualParallelPortFileBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualParallelPortDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualParallelPortDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualParallelPort,
    :schema_type => XSD::QName.new(NsVim25, "VirtualParallelPort"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualParallelPortFileBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualParallelPortFileBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualParallelPortDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualParallelPortDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualParallelPortOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualParallelPortOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualPointingDeviceDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPointingDeviceDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["hostPointingDevice", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualPointingDevice,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPointingDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualPointingDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPointingDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"],
      ["hostPointingDevice", "VSphereCloud::ChoiceOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualPointingDeviceOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPointingDeviceOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayOfVirtualSCSISharing,
    :schema_type => XSD::QName.new(NsVim25, "ArrayOfVirtualSCSISharing"),
    :schema_element => [
      ["virtualSCSISharing", ["VSphereCloud::VirtualSCSISharing[]", XSD::QName.new(NsVim25, "VirtualSCSISharing")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSCSIController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSCSIController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["hotAddRemove", "SOAP::SOAPBoolean", [0, 1]],
      ["sharedBus", "VSphereCloud::VirtualSCSISharing"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSCSIControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSCSIControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numSCSIDisks", "VSphereCloud::IntOption"],
      ["numSCSICdroms", "VSphereCloud::IntOption"],
      ["numSCSIPassthrough", "VSphereCloud::IntOption"],
      ["sharing", "VSphereCloud::VirtualSCSISharing[]", [1, nil]],
      ["defaultSharedIndex", "SOAP::SOAPInt"],
      ["hotAddRemove", "VSphereCloud::BoolOption"],
      ["scsiCtlrUnitNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSCSIPassthroughDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSCSIPassthroughDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSCSIPassthrough,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSCSIPassthrough"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSCSIPassthroughDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSCSIPassthroughDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSCSIPassthroughOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSCSIPassthroughOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSIOController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSIOController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSIOControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSIOControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["numFloppyDrives", "VSphereCloud::IntOption"],
      ["numSerialPorts", "VSphereCloud::IntOption"],
      ["numParallelPorts", "VSphereCloud::IntOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSerialPortFileBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortFileBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["fileName", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSerialPortDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSerialPortPipeBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortPipeBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevicePipeBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["pipeName", "SOAP::SOAPString"],
      ["endpoint", "SOAP::SOAPString"],
      ["noRxLoss", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSerialPortURIBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortURIBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceURIBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["serviceURI", "SOAP::SOAPString"],
      ["direction", "SOAP::SOAPString"],
      ["proxyURI", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSerialPort,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPort"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["yieldOnPoll", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSerialPortFileBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortFileBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceFileBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["fileNameExtensions", "VSphereCloud::ChoiceOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSerialPortDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSerialPortPipeBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortPipeBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevicePipeBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["endpoint", "VSphereCloud::ChoiceOption"],
      ["noRxLoss", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSerialPortURIBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortURIBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceURIBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["directions", "VSphereCloud::ChoiceOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSerialPortOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["yieldOnPoll", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSoundBlaster16,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSoundBlaster16"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSoundCard"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSoundBlaster16Option,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSoundBlaster16Option"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualSoundCardOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSoundCardDeviceBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSoundCardDeviceBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSoundCard,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSoundCard"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSoundCardDeviceBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSoundCardDeviceBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSoundCardOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSoundCardOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualUSBUSBBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSBUSBBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualUSBRemoteHostBackingInfo,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSBRemoteHostBackingInfo"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingInfo"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["deviceName", "SOAP::SOAPString"],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["hostname", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualUSB,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSB"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["connected", "SOAP::SOAPBoolean"],
      ["vendor", "SOAP::SOAPInt", [0, 1]],
      ["product", "SOAP::SOAPInt", [0, 1]],
      ["family", "SOAP::SOAPString[]", [0, nil]],
      ["speed", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualUSBController,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSBController"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualController"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["busNumber", "SOAP::SOAPInt"],
      ["device", "SOAP::SOAPInt[]", [0, nil]],
      ["autoConnectDevices", "SOAP::SOAPBoolean", [0, 1]],
      ["ehciEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualUSBControllerOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSBControllerOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualControllerOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["devices", "VSphereCloud::IntOption"],
      ["supportedDevice", "SOAP::SOAPString[]", [0, nil]],
      ["autoConnectDevices", "VSphereCloud::BoolOption"],
      ["ehciSupported", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualUSBUSBBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSBUSBBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualUSBRemoteHostBackingOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSBRemoteHostBackingOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceDeviceBackingOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["autoDetectAvailable", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualUSBOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualUSBOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineVMCIDevice,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineVMCIDevice"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["id", "SOAP::SOAPLong", [0, 1]],
      ["allowUnrestrictedCommunication", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineVMCIDeviceOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineVMCIDeviceOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["allowUnrestrictedCommunication", "VSphereCloud::BoolOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineVMIROM,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineVMIROM"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualVMIROMOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVMIROMOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineVideoCard,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineVideoCard"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDevice"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["videoRamSizeInKB", "SOAP::SOAPLong", [0, 1]],
      ["numDisplays", "SOAP::SOAPInt", [0, 1]],
      ["useAutoDetect", "SOAP::SOAPBoolean", [0, 1]],
      ["enable3DSupport", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualVideoCardOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVideoCardOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualDeviceOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["videoRamSizeInKB", "VSphereCloud::LongOption", [0, 1]],
      ["numDisplays", "VSphereCloud::IntOption", [0, 1]],
      ["useAutoDetect", "VSphereCloud::BoolOption", [0, 1]],
      ["support3D", "VSphereCloud::BoolOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualVmxnet,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVmxnet"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualEthernetCard"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualVmxnet2,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVmxnet2"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualVmxnet"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualVmxnet2Option,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVmxnet2Option"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualVmxnetOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VSphereCloud::ChoiceOption"],
      ["macType", "VSphereCloud::ChoiceOption"],
      ["wakeOnLanEnabled", "VSphereCloud::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualVmxnet3,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVmxnet3"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualVmxnet"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["key", "SOAP::SOAPInt"],
      ["deviceInfo", "VSphereCloud::Description", [0, 1]],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo", [0, 1]],
      ["connectable", "VSphereCloud::VirtualDeviceConnectInfo", [0, 1]],
      ["controllerKey", "SOAP::SOAPInt", [0, 1]],
      ["unitNumber", "SOAP::SOAPInt", [0, 1]],
      ["addressType", "SOAP::SOAPString", [0, 1]],
      ["macAddress", "SOAP::SOAPString", [0, 1]],
      ["wakeOnLanEnabled", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualVmxnet3Option,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVmxnet3Option"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualVmxnetOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VSphereCloud::ChoiceOption"],
      ["macType", "VSphereCloud::ChoiceOption"],
      ["wakeOnLanEnabled", "VSphereCloud::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualVmxnetOption,
    :schema_type => XSD::QName.new(NsVim25, "VirtualVmxnetOption"),
    :schema_basetype => XSD::QName.new(NsVim25, "VirtualEthernetCardOption"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["connectOption", "VSphereCloud::VirtualDeviceConnectOption", [0, 1]],
      ["controllerType", "SOAP::SOAPString", [0, 1]],
      ["autoAssignController", "VSphereCloud::BoolOption", [0, 1]],
      ["backingOption", "VSphereCloud::VirtualDeviceBackingOption[]", [0, nil]],
      ["defaultBackingOptionIndex", "SOAP::SOAPInt", [0, 1]],
      ["licensingLimit", "SOAP::SOAPString[]", [0, nil]],
      ["deprecated", "SOAP::SOAPBoolean"],
      ["plugAndPlay", "SOAP::SOAPBoolean"],
      ["hotRemoveSupported", "SOAP::SOAPBoolean", [0, 1]],
      ["supportedOUI", "VSphereCloud::ChoiceOption"],
      ["macType", "VSphereCloud::ChoiceOption"],
      ["wakeOnLanEnabled", "VSphereCloud::BoolOption"],
      ["vmDirectPathGen2Supported", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ObjectUpdateKind,
    :schema_type => XSD::QName.new(NsVim25, "ObjectUpdateKind")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PropertyChangeOp,
    :schema_type => XSD::QName.new(NsVim25, "PropertyChangeOp")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConfigSpecOperation,
    :schema_type => XSD::QName.new(NsVim25, "ConfigSpecOperation")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreAccessible,
    :schema_type => XSD::QName.new(NsVim25, "DatastoreAccessible")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DiagnosticManagerLogCreator,
    :schema_type => XSD::QName.new(NsVim25, "DiagnosticManagerLogCreator")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DiagnosticManagerLogFormat,
    :schema_type => XSD::QName.new(NsVim25, "DiagnosticManagerLogFormat")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchProductSpecOperationType,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchProductSpecOperationType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchNicTeamingPolicyMode,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchNicTeamingPolicyMode")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostSystemConnectionState,
    :schema_type => XSD::QName.new(NsVim25, "HostSystemConnectionState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostSystemPowerState,
    :schema_type => XSD::QName.new(NsVim25, "HostSystemPowerState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostStandbyMode,
    :schema_type => XSD::QName.new(NsVim25, "HostStandbyMode")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseState,
    :schema_type => XSD::QName.new(NsVim25, "HttpNfcLeaseState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseManagerState,
    :schema_type => XSD::QName.new(NsVim25, "LicenseManagerState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseManagerLicenseKey,
    :schema_type => XSD::QName.new(NsVim25, "LicenseManagerLicenseKey")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseFeatureInfoUnit,
    :schema_type => XSD::QName.new(NsVim25, "LicenseFeatureInfoUnit")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseFeatureInfoState,
    :schema_type => XSD::QName.new(NsVim25, "LicenseFeatureInfoState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseFeatureInfoSourceRestriction,
    :schema_type => XSD::QName.new(NsVim25, "LicenseFeatureInfoSourceRestriction")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseReservationInfoState,
    :schema_type => XSD::QName.new(NsVim25, "LicenseReservationInfoState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ManagedEntityStatus,
    :schema_type => XSD::QName.new(NsVim25, "ManagedEntityStatus")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfCreateImportSpecParamsDiskProvisioningType,
    :schema_type => XSD::QName.new(NsVim25, "OvfCreateImportSpecParamsDiskProvisioningType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfFormat,
    :schema_type => XSD::QName.new(NsVim25, "PerfFormat")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfSummaryType,
    :schema_type => XSD::QName.new(NsVim25, "PerfSummaryType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerfStatsType,
    :schema_type => XSD::QName.new(NsVim25, "PerfStatsType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerformanceManagerUnit,
    :schema_type => XSD::QName.new(NsVim25, "PerformanceManagerUnit")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ValidateMigrationTestType,
    :schema_type => XSD::QName.new(NsVim25, "ValidateMigrationTestType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionCompatibilityType,
    :schema_type => XSD::QName.new(NsVim25, "VMotionCompatibilityType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SharesLevel,
    :schema_type => XSD::QName.new(NsVim25, "SharesLevel")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskFilterSpecRecursionOption,
    :schema_type => XSD::QName.new(NsVim25, "TaskFilterSpecRecursionOption")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskFilterSpecTimeOption,
    :schema_type => XSD::QName.new(NsVim25, "TaskFilterSpecTimeOption")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskInfoState,
    :schema_type => XSD::QName.new(NsVim25, "TaskInfoState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualAppVAppState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualAppVAppState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskAdapterType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskAdapterType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachinePowerState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachinePowerState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineAppHeartbeatStatusType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineAppHeartbeatStatusType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineConnectionState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConnectionState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineMovePriority,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineMovePriority")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFaultToleranceState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFaultToleranceState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineRecordReplayState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineRecordReplayState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineNeedSecondaryReason,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineNeedSecondaryReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineTicketType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineTicketType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ActionParameter,
    :schema_type => XSD::QName.new(NsVim25, "ActionParameter")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StateAlarmOperator,
    :schema_type => XSD::QName.new(NsVim25, "StateAlarmOperator")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EventAlarmExpressionComparisonOperator,
    :schema_type => XSD::QName.new(NsVim25, "EventAlarmExpressionComparisonOperator")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MetricAlarmOperator,
    :schema_type => XSD::QName.new(NsVim25, "MetricAlarmOperator")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ActionType,
    :schema_type => XSD::QName.new(NsVim25, "ActionType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsBehavior,
    :schema_type => XSD::QName.new(NsVim25, "DrsBehavior")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DpmBehavior,
    :schema_type => XSD::QName.new(NsVim25, "DpmBehavior")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasAamNodeStateDasState,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasAamNodeStateDasState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasConfigInfoServiceState,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasConfigInfoServiceState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasConfigInfoVmMonitoringState,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasConfigInfoVmMonitoringState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DasVmPriority,
    :schema_type => XSD::QName.new(NsVim25, "DasVmPriority")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasVmSettingsRestartPriority,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasVmSettingsRestartPriority")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterDasVmSettingsIsolationResponse,
    :schema_type => XSD::QName.new(NsVim25, "ClusterDasVmSettingsIsolationResponse")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsRecommendationReasonCode,
    :schema_type => XSD::QName.new(NsVim25, "DrsRecommendationReasonCode")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPowerOperationType,
    :schema_type => XSD::QName.new(NsVim25, "HostPowerOperationType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterPowerOnVmOption,
    :schema_type => XSD::QName.new(NsVim25, "ClusterPowerOnVmOption")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RecommendationType,
    :schema_type => XSD::QName.new(NsVim25, "RecommendationType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RecommendationReasonCode,
    :schema_type => XSD::QName.new(NsVim25, "RecommendationReasonCode")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortStatusVmDirectPathGen2InactiveReasonNetwork,
    :schema_type => XSD::QName.new(NsVim25, "DVPortStatusVmDirectPathGen2InactiveReasonNetwork")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortStatusVmDirectPathGen2InactiveReasonOther,
    :schema_type => XSD::QName.new(NsVim25, "DVPortStatusVmDirectPathGen2InactiveReasonOther")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualPortgroupPortgroupType,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualPortgroupPortgroupType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualPortgroupMetaTagName,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualPortgroupMetaTagName")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDistributedVirtualSwitchManagerNetworkResourcePoolKey,
    :schema_type => XSD::QName.new(NsVim25, "HostDistributedVirtualSwitchManagerNetworkResourcePoolKey")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchHostMemberHostComponentState,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchHostMemberHostComponentState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DistributedVirtualSwitchPortConnecteeConnecteeType,
    :schema_type => XSD::QName.new(NsVim25, "DistributedVirtualSwitchPortConnecteeConnecteeType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmwareDistributedVirtualSwitchPvlanPortType,
    :schema_type => XSD::QName.new(NsVim25, "VmwareDistributedVirtualSwitchPvlanPortType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EventEventSeverity,
    :schema_type => XSD::QName.new(NsVim25, "EventEventSeverity")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDisconnectedEventReasonCode,
    :schema_type => XSD::QName.new(NsVim25, "HostDisconnectedEventReasonCode")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDasErrorEventHostDasErrorReason,
    :schema_type => XSD::QName.new(NsVim25, "HostDasErrorEventHostDasErrorReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmShutdownOnIsolationEventOperation,
    :schema_type => XSD::QName.new(NsVim25, "VmShutdownOnIsolationEventOperation")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmDasBeingResetEventReasonCode,
    :schema_type => XSD::QName.new(NsVim25, "VmDasBeingResetEventReasonCode")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFailedStartingSecondaryEventFailureReason,
    :schema_type => XSD::QName.new(NsVim25, "VmFailedStartingSecondaryEventFailureReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EventCategory,
    :schema_type => XSD::QName.new(NsVim25, "EventCategory")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EventFilterSpecRecursionOption,
    :schema_type => XSD::QName.new(NsVim25, "EventFilterSpecRecursionOption")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AffinityType,
    :schema_type => XSD::QName.new(NsVim25, "AffinityType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AgentInstallFailedReason,
    :schema_type => XSD::QName.new(NsVim25, "AgentInstallFailedReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotMoveFaultToleranceVmMoveType,
    :schema_type => XSD::QName.new(NsVim25, "CannotMoveFaultToleranceVmMoveType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DasConfigFaultDasConfigFaultReason,
    :schema_type => XSD::QName.new(NsVim25, "DasConfigFaultDasConfigFaultReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceNotSupportedReason,
    :schema_type => XSD::QName.new(NsVim25, "DeviceNotSupportedReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FtIssuesOnHostHostSelectionType,
    :schema_type => XSD::QName.new(NsVim25, "FtIssuesOnHostHostSelectionType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIncompatibleForFaultToleranceReason,
    :schema_type => XSD::QName.new(NsVim25, "HostIncompatibleForFaultToleranceReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIncompatibleForRecordReplayReason,
    :schema_type => XSD::QName.new(NsVim25, "HostIncompatibleForRecordReplayReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseAssignmentFailedReason,
    :schema_type => XSD::QName.new(NsVim25, "LicenseAssignmentFailedReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotSupportedDeviceForFTDeviceType,
    :schema_type => XSD::QName.new(NsVim25, "NotSupportedDeviceForFTDeviceType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NumVirtualCpusIncompatibleReason,
    :schema_type => XSD::QName.new(NsVim25, "NumVirtualCpusIncompatibleReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceConfigIssueReasonForIssue,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceConfigIssueReasonForIssue")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceInvalidFileBackingDeviceType,
    :schema_type => XSD::QName.new(NsVim25, "VmFaultToleranceInvalidFileBackingDeviceType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostActiveDirectoryInfoDomainMembershipStatus,
    :schema_type => XSD::QName.new(NsVim25, "HostActiveDirectoryInfoDomainMembershipStatus")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AutoStartAction,
    :schema_type => XSD::QName.new(NsVim25, "AutoStartAction")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AutoStartWaitHeartbeatSetting,
    :schema_type => XSD::QName.new(NsVim25, "AutoStartWaitHeartbeatSetting")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostReplayUnsupportedReason,
    :schema_type => XSD::QName.new(NsVim25, "HostReplayUnsupportedReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCapabilityFtUnsupportedReason,
    :schema_type => XSD::QName.new(NsVim25, "HostCapabilityFtUnsupportedReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCapabilityVmDirectPathGen2UnsupportedReason,
    :schema_type => XSD::QName.new(NsVim25, "HostCapabilityVmDirectPathGen2UnsupportedReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConfigChangeMode,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigChangeMode")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConfigChangeOperation,
    :schema_type => XSD::QName.new(NsVim25, "HostConfigChangeOperation")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DiagnosticPartitionStorageType,
    :schema_type => XSD::QName.new(NsVim25, "DiagnosticPartitionStorageType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DiagnosticPartitionType,
    :schema_type => XSD::QName.new(NsVim25, "DiagnosticPartitionType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDiskPartitionInfoType,
    :schema_type => XSD::QName.new(NsVim25, "HostDiskPartitionInfoType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFeatureVersionKey,
    :schema_type => XSD::QName.new(NsVim25, "HostFeatureVersionKey")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileSystemMountInfoVStorageSupportStatus,
    :schema_type => XSD::QName.new(NsVim25, "FileSystemMountInfoVStorageSupportStatus")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCpuPowerManagementInfoPolicyType,
    :schema_type => XSD::QName.new(NsVim25, "HostCpuPowerManagementInfoPolicyType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCpuPackageVendor,
    :schema_type => XSD::QName.new(NsVim25, "HostCpuPackageVendor")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostHardwareElementStatus,
    :schema_type => XSD::QName.new(NsVim25, "HostHardwareElementStatus")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FibreChannelPortType,
    :schema_type => XSD::QName.new(NsVim25, "FibreChannelPortType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InternetScsiSnsDiscoveryMethod,
    :schema_type => XSD::QName.new(NsVim25, "InternetScsiSnsDiscoveryMethod")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SlpDiscoveryMethod,
    :schema_type => XSD::QName.new(NsVim25, "SlpDiscoveryMethod")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaChapAuthenticationType,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaChapAuthenticationType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInternetScsiHbaDigestType,
    :schema_type => XSD::QName.new(NsVim25, "HostInternetScsiHbaDigestType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIpConfigIpV6AddressConfigType,
    :schema_type => XSD::QName.new(NsVim25, "HostIpConfigIpV6AddressConfigType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIpConfigIpV6AddressStatus,
    :schema_type => XSD::QName.new(NsVim25, "HostIpConfigIpV6AddressStatus")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LinkDiscoveryProtocolConfigProtocolType,
    :schema_type => XSD::QName.new(NsVim25, "LinkDiscoveryProtocolConfigProtocolType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LinkDiscoveryProtocolConfigOperationType,
    :schema_type => XSD::QName.new(NsVim25, "LinkDiscoveryProtocolConfigOperationType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostLowLevelProvisioningManagerReloadTarget,
    :schema_type => XSD::QName.new(NsVim25, "HostLowLevelProvisioningManagerReloadTarget")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineMemoryAllocationPolicy,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineMemoryAllocationPolicy")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostMountMode,
    :schema_type => XSD::QName.new(NsVim25, "HostMountMode")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MultipathState,
    :schema_type => XSD::QName.new(NsVim25, "MultipathState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNumericSensorHealthState,
    :schema_type => XSD::QName.new(NsVim25, "HostNumericSensorHealthState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNumericSensorType,
    :schema_type => XSD::QName.new(NsVim25, "HostNumericSensorType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPatchManagerReason,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPatchManagerIntegrityStatus,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerIntegrityStatus")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPatchManagerInstallState,
    :schema_type => XSD::QName.new(NsVim25, "HostPatchManagerInstallState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PhysicalNicVmDirectPathGen2SupportedMode,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicVmDirectPathGen2SupportedMode")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PhysicalNicResourcePoolSchedulerDisallowedReason,
    :schema_type => XSD::QName.new(NsVim25, "PhysicalNicResourcePoolSchedulerDisallowedReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PortGroupConnecteeType,
    :schema_type => XSD::QName.new(NsVim25, "PortGroupConnecteeType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFirewallRuleDirection,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallRuleDirection")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostFirewallRuleProtocol,
    :schema_type => XSD::QName.new(NsVim25, "HostFirewallRuleProtocol")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScsiLunType,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLunType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScsiLunState,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLunState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScsiLunDescriptorQuality,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLunDescriptorQuality")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScsiLunVStorageSupportStatus,
    :schema_type => XSD::QName.new(NsVim25, "ScsiLunVStorageSupportStatus")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostServicePolicy,
    :schema_type => XSD::QName.new(NsVim25, "HostServicePolicy")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostSnmpAgentCapability,
    :schema_type => XSD::QName.new(NsVim25, "HostSnmpAgentCapability")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostSystemIdentificationInfoIdentifier,
    :schema_type => XSD::QName.new(NsVim25, "HostSystemIdentificationInfoIdentifier")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostDigestInfoDigestMethodType,
    :schema_type => XSD::QName.new(NsVim25, "HostDigestInfoDigestMethodType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsExtentUnresolvedReason,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsExtentUnresolvedReason")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostUnresolvedVmfsResolutionSpecVmfsUuidResolution,
    :schema_type => XSD::QName.new(NsVim25, "HostUnresolvedVmfsResolutionSpecVmfsUuidResolution")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostVirtualNicManagerNicType,
    :schema_type => XSD::QName.new(NsVim25, "HostVirtualNicManagerNicType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpConfigInfoIpAddressOrigin,
    :schema_type => XSD::QName.new(NsVim25, "NetIpConfigInfoIpAddressOrigin")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpConfigInfoIpAddressStatus,
    :schema_type => XSD::QName.new(NsVim25, "NetIpConfigInfoIpAddressStatus")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpStackInfoEntryType,
    :schema_type => XSD::QName.new(NsVim25, "NetIpStackInfoEntryType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetIpStackInfoPreference,
    :schema_type => XSD::QName.new(NsVim25, "NetIpStackInfoPreference")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetBIOSConfigInfoMode,
    :schema_type => XSD::QName.new(NsVim25, "NetBIOSConfigInfoMode")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ArrayUpdateOperation,
    :schema_type => XSD::QName.new(NsVim25, "ArrayUpdateOperation")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ComplianceResultStatus,
    :schema_type => XSD::QName.new(NsVim25, "ComplianceResultStatus")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileNumericComparator,
    :schema_type => XSD::QName.new(NsVim25, "ProfileNumericComparator")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClusterProfileServiceType,
    :schema_type => XSD::QName.new(NsVim25, "ClusterProfileServiceType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileExecuteResultStatus,
    :schema_type => XSD::QName.new(NsVim25, "ProfileExecuteResultStatus")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DayOfWeek,
    :schema_type => XSD::QName.new(NsVim25, "DayOfWeek")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WeekOfMonth,
    :schema_type => XSD::QName.new(NsVim25, "WeekOfMonth")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppCloneSpecProvisioningType,
    :schema_type => XSD::QName.new(NsVim25, "VAppCloneSpecProvisioningType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppAutoStartAction,
    :schema_type => XSD::QName.new(NsVim25, "VAppAutoStartAction")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppIPAssignmentInfoIpAllocationPolicy,
    :schema_type => XSD::QName.new(NsVim25, "VAppIPAssignmentInfoIpAllocationPolicy")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppIPAssignmentInfoAllocationSchemes,
    :schema_type => XSD::QName.new(NsVim25, "VAppIPAssignmentInfoAllocationSchemes")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppIPAssignmentInfoProtocols,
    :schema_type => XSD::QName.new(NsVim25, "VAppIPAssignmentInfoProtocols")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigInfoNpivWwnType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigInfoNpivWwnType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigInfoSwapPlacementType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigInfoSwapPlacementType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineConfigSpecNpivWwnOp,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineConfigSpecNpivWwnOp")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachinePowerOpType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachinePowerOpType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineStandbyActionType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineStandbyActionType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonVm")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineDeviceRuntimeInfoVirtualEthernetCardRuntimeStateVmDirectPathGen2InactiveReasonOther")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFileLayoutExFileType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFileLayoutExFileType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineHtSharing,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineHtSharing")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachinePowerOffBehavior,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachinePowerOffBehavior")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFlagInfoMonitorType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFlagInfoMonitorType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFlagInfoVirtualMmuUsage,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFlagInfoVirtualMmuUsage")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineFlagInfoVirtualExecUsage,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineFlagInfoVirtualExecUsage")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineToolsStatus,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineToolsStatus")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineToolsVersionStatus,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineToolsVersionStatus")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineToolsRunningStatus,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineToolsRunningStatus")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineGuestState,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineGuestState")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineGuestOsFamily,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineGuestOsFamily")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineGuestOsIdentifier,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineGuestOsIdentifier")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineRelocateTransformation,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineRelocateTransformation")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineRelocateDiskMoveOptions,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineRelocateDiskMoveOptions")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineScsiPassthroughType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineScsiPassthroughType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineTargetInfoConfigurationTag,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineTargetInfoConfigurationTag")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpgradePolicy,
    :schema_type => XSD::QName.new(NsVim25, "UpgradePolicy")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineUsbInfoSpeed,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineUsbInfoSpeed")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualMachineUsbInfoFamily,
    :schema_type => XSD::QName.new(NsVim25, "VirtualMachineUsbInfoFamily")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckTestType,
    :schema_type => XSD::QName.new(NsVim25, "CheckTestType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationSysprepRebootOption,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationSysprepRebootOption")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationLicenseDataMode,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationLicenseDataMode")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationNetBIOSMode,
    :schema_type => XSD::QName.new(NsVim25, "CustomizationNetBIOSMode")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceConnectInfoStatus,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceConnectInfoStatus")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceFileExtension,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceFileExtension")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceURIBackingOptionDirection,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceURIBackingOptionDirection")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceConfigSpecOperation,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceConfigSpecOperation")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDeviceConfigSpecFileOperation,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDeviceConfigSpecFileOperation")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskMode,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskMode")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskCompatibilityMode,
    :schema_type => XSD::QName.new(NsVim25, "VirtualDiskCompatibilityMode")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardLegacyNetworkDeviceName,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardLegacyNetworkDeviceName")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardMacType,
    :schema_type => XSD::QName.new(NsVim25, "VirtualEthernetCardMacType")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualPointingDeviceHostChoice,
    :schema_type => XSD::QName.new(NsVim25, "VirtualPointingDeviceHostChoice")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSCSISharing,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSCSISharing")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualSerialPortEndPoint,
    :schema_type => XSD::QName.new(NsVim25, "VirtualSerialPortEndPoint")
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddAuthorizationRoleRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AddAuthorizationRole"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["privIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddAuthorizationRoleResponse,
    :schema_name => XSD::QName.new(NsVim25, "AddAuthorizationRoleResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveAuthorizationRoleRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveAuthorizationRole"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["roleId", "SOAP::SOAPInt"],
      ["failIfUsed", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveAuthorizationRoleResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveAuthorizationRoleResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateAuthorizationRoleRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateAuthorizationRole"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["roleId", "SOAP::SOAPInt"],
      ["newName", "SOAP::SOAPString"],
      ["privIds", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateAuthorizationRoleResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateAuthorizationRoleResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MergePermissionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "MergePermissions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["srcRoleId", "SOAP::SOAPInt"],
      ["dstRoleId", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MergePermissionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "MergePermissionsResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveRolePermissionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveRolePermissions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["roleId", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveRolePermissionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveRolePermissionsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::Permission[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveEntityPermissionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveEntityPermissions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["inherited", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveEntityPermissionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveEntityPermissionsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::Permission[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveAllPermissionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveAllPermissions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveAllPermissionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveAllPermissionsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::Permission[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetEntityPermissionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SetEntityPermissions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["permission", "VSphereCloud::Permission[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetEntityPermissionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "SetEntityPermissionsResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetEntityPermissionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ResetEntityPermissions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["permission", "VSphereCloud::Permission[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetEntityPermissionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "ResetEntityPermissionsResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveEntityPermissionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveEntityPermission"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["user", "SOAP::SOAPString"],
      ["isGroup", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveEntityPermissionResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveEntityPermissionResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureClusterRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureCluster_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::ClusterConfigSpec"],
      ["modify", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureCluster_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureCluster_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ApplyRecommendationRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ApplyRecommendation"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ApplyRecommendationResponse,
    :schema_name => XSD::QName.new(NsVim25, "ApplyRecommendationResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CancelRecommendationRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CancelRecommendation"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CancelRecommendationResponse,
    :schema_name => XSD::QName.new(NsVim25, "CancelRecommendationResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RecommendHostsForVmRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RecommendHostsForVm"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RecommendHostsForVmResponse,
    :schema_name => XSD::QName.new(NsVim25, "RecommendHostsForVmResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ClusterHostRecommendation[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddHostRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AddHost_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostConnectSpec"],
      ["asConnected", "SOAP::SOAPBoolean"],
      ["resourcePool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["license", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddHost_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "AddHost_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveIntoRequestType,
    :schema_name => XSD::QName.new(NsVim25, "MoveInto_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveInto_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "MoveInto_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveHostIntoRequestType,
    :schema_name => XSD::QName.new(NsVim25, "MoveHostInto_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["resourcePool", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveHostInto_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "MoveHostInto_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshRecommendationRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RefreshRecommendation"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshRecommendationResponse,
    :schema_name => XSD::QName.new(NsVim25, "RefreshRecommendationResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveDasAdvancedRuntimeInfoRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveDasAdvancedRuntimeInfo"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveDasAdvancedRuntimeInfoResponse,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveDasAdvancedRuntimeInfoResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ClusterDasAdvancedRuntimeInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureComputeResourceRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureComputeResource_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::ComputeResourceConfigSpec"],
      ["modify", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureComputeResource_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureComputeResource_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddCustomFieldDefRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AddCustomFieldDef"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["moType", "SOAP::SOAPString", [0, 1]],
      ["fieldDefPolicy", "VSphereCloud::PrivilegePolicyDef", [0, 1]],
      ["fieldPolicy", "VSphereCloud::PrivilegePolicyDef", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddCustomFieldDefResponse,
    :schema_name => XSD::QName.new(NsVim25, "AddCustomFieldDefResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::CustomFieldDef"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveCustomFieldDefRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveCustomFieldDef"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveCustomFieldDefResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveCustomFieldDefResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RenameCustomFieldDefRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RenameCustomFieldDef"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RenameCustomFieldDefResponse,
    :schema_name => XSD::QName.new(NsVim25, "RenameCustomFieldDefResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetFieldRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SetField"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["key", "SOAP::SOAPInt"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetFieldResponse,
    :schema_name => XSD::QName.new(NsVim25, "SetFieldResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DoesCustomizationSpecExistRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DoesCustomizationSpecExist"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DoesCustomizationSpecExistResponse,
    :schema_name => XSD::QName.new(NsVim25, "DoesCustomizationSpecExistResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GetCustomizationSpecRequestType,
    :schema_name => XSD::QName.new(NsVim25, "GetCustomizationSpec"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GetCustomizationSpecResponse,
    :schema_name => XSD::QName.new(NsVim25, "GetCustomizationSpecResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateCustomizationSpecRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateCustomizationSpec"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["item", "VSphereCloud::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateCustomizationSpecResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateCustomizationSpecResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OverwriteCustomizationSpecRequestType,
    :schema_name => XSD::QName.new(NsVim25, "OverwriteCustomizationSpec"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["item", "VSphereCloud::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OverwriteCustomizationSpecResponse,
    :schema_name => XSD::QName.new(NsVim25, "OverwriteCustomizationSpecResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeleteCustomizationSpecRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DeleteCustomizationSpec"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeleteCustomizationSpecResponse,
    :schema_name => XSD::QName.new(NsVim25, "DeleteCustomizationSpecResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DuplicateCustomizationSpecRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DuplicateCustomizationSpec"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DuplicateCustomizationSpecResponse,
    :schema_name => XSD::QName.new(NsVim25, "DuplicateCustomizationSpecResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RenameCustomizationSpecRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RenameCustomizationSpec"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RenameCustomizationSpecResponse,
    :schema_name => XSD::QName.new(NsVim25, "RenameCustomizationSpecResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationSpecItemToXmlRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CustomizationSpecItemToXml"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["item", "VSphereCloud::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationSpecItemToXmlResponse,
    :schema_name => XSD::QName.new(NsVim25, "CustomizationSpecItemToXmlResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::XmlToCustomizationSpecItemRequestType,
    :schema_name => XSD::QName.new(NsVim25, "XmlToCustomizationSpecItem"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["specItemXml", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::XmlToCustomizationSpecItemResponse,
    :schema_name => XSD::QName.new(NsVim25, "XmlToCustomizationSpecItemResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::CustomizationSpecItem"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckCustomizationResourcesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CheckCustomizationResources"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["guestOs", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckCustomizationResourcesResponse,
    :schema_name => XSD::QName.new(NsVim25, "CheckCustomizationResourcesResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryConnectionInfoRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryConnectionInfo"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["hostname", "SOAP::SOAPString"],
      ["port", "SOAP::SOAPInt"],
      ["username", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"],
      ["sslThumbprint", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryConnectionInfoResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryConnectionInfoResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostConnectInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOnMultiVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "PowerOnMultiVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]],
      ["option", "VSphereCloud::OptionValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOnMultiVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "PowerOnMultiVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshDatastoreRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RefreshDatastore"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshDatastoreResponse,
    :schema_name => XSD::QName.new(NsVim25, "RefreshDatastoreResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshDatastoreStorageInfoRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RefreshDatastoreStorageInfo"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshDatastoreStorageInfoResponse,
    :schema_name => XSD::QName.new(NsVim25, "RefreshDatastoreStorageInfoResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateVirtualMachineFilesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateVirtualMachineFiles_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["mountPathDatastoreMapping", "VSphereCloud::DatastoreMountPathDatastorePair[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateVirtualMachineFiles_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateVirtualMachineFiles_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RenameDatastoreRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RenameDatastore"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RenameDatastoreResponse,
    :schema_name => XSD::QName.new(NsVim25, "RenameDatastoreResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyDatastoreRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DestroyDatastore"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyDatastoreResponse,
    :schema_name => XSD::QName.new(NsVim25, "DestroyDatastoreResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDescriptionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryDescriptions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDescriptionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryDescriptionsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::DiagnosticManagerLogDescriptor[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::BrowseDiagnosticLogRequestType,
    :schema_name => XSD::QName.new(NsVim25, "BrowseDiagnosticLog"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["key", "SOAP::SOAPString"],
      ["start", "SOAP::SOAPInt", [0, 1]],
      ["lines", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::BrowseDiagnosticLogResponse,
    :schema_name => XSD::QName.new(NsVim25, "BrowseDiagnosticLogResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::DiagnosticManagerLogHeader"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GenerateLogBundlesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "GenerateLogBundles_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["includeDefault", "SOAP::SOAPBoolean"],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GenerateLogBundles_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "GenerateLogBundles_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FetchDVPortKeysRequestType,
    :schema_name => XSD::QName.new(NsVim25, "FetchDVPortKeys"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["criteria", "VSphereCloud::DistributedVirtualSwitchPortCriteria", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FetchDVPortKeysResponse,
    :schema_name => XSD::QName.new(NsVim25, "FetchDVPortKeysResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FetchDVPortsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "FetchDVPorts"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["criteria", "VSphereCloud::DistributedVirtualSwitchPortCriteria", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FetchDVPortsResponse,
    :schema_name => XSD::QName.new(NsVim25, "FetchDVPortsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::DistributedVirtualPort[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryUsedVlanIdInDvsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryUsedVlanIdInDvs"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryUsedVlanIdInDvsResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryUsedVlanIdInDvsResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPInt[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureDvsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureDvs_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::DVSConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureDvs_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureDvs_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerformDvsProductSpecOperationRequestType,
    :schema_name => XSD::QName.new(NsVim25, "PerformDvsProductSpecOperation_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["operation", "SOAP::SOAPString"],
      ["productSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PerformDvsProductSpecOperation_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "PerformDvsProductSpecOperation_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MergeDvsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "MergeDvs_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dvs", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MergeDvs_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "MergeDvs_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddDVPortgroupRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AddDVPortgroup_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::DVPortgroupConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddDVPortgroup_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "AddDVPortgroup_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveDVPortRequestType,
    :schema_name => XSD::QName.new(NsVim25, "MoveDVPort_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["portKey", "SOAP::SOAPString[]", [1, nil]],
      ["destinationPortgroupKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveDVPort_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "MoveDVPort_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDvsCapabilityRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateDvsCapability"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["capability", "VSphereCloud::DVSCapability"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDvsCapabilityResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateDvsCapabilityResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureDVPortRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureDVPort_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["port", "VSphereCloud::DVPortConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureDVPort_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureDVPort_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshDVPortStateRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RefreshDVPortState"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["portKeys", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshDVPortStateResponse,
    :schema_name => XSD::QName.new(NsVim25, "RefreshDVPortStateResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RectifyDvsHostRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RectifyDvsHost_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["hosts", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RectifyDvsHost_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "RectifyDvsHost_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateNetworkResourcePoolRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateNetworkResourcePool"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["configSpec", "VSphereCloud::DVSNetworkResourcePoolConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateNetworkResourcePoolResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateNetworkResourcePoolResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableNetworkResourceManagementRequestType,
    :schema_name => XSD::QName.new(NsVim25, "EnableNetworkResourceManagement"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["enable", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableNetworkResourceManagementResponse,
    :schema_name => XSD::QName.new(NsVim25, "EnableNetworkResourceManagementResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryConfigOptionDescriptorRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryConfigOptionDescriptor"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryConfigOptionDescriptorResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryConfigOptionDescriptorResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::VirtualMachineConfigOptionDescriptor[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryConfigOptionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryConfigOption"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryConfigOptionResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryConfigOptionResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::VirtualMachineConfigOption", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryConfigTargetRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryConfigTarget"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryConfigTargetResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryConfigTargetResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ConfigTarget", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryTargetCapabilitiesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryTargetCapabilities"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryTargetCapabilitiesResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryTargetCapabilitiesResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostCapability", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetCustomValueRequestType,
    :schema_name => XSD::QName.new(NsVim25, "setCustomValue"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetCustomValueResponse,
    :schema_name => XSD::QName.new(NsVim25, "setCustomValueResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnregisterExtensionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UnregisterExtension"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnregisterExtensionResponse,
    :schema_name => XSD::QName.new(NsVim25, "UnregisterExtensionResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindExtensionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "FindExtension"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindExtensionResponse,
    :schema_name => XSD::QName.new(NsVim25, "FindExtensionResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::Extension", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RegisterExtensionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RegisterExtension"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extension", "VSphereCloud::Extension"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RegisterExtensionResponse,
    :schema_name => XSD::QName.new(NsVim25, "RegisterExtensionResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateExtensionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateExtension"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extension", "VSphereCloud::Extension"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateExtensionResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateExtensionResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GetPublicKeyRequestType,
    :schema_name => XSD::QName.new(NsVim25, "GetPublicKey"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GetPublicKeyResponse,
    :schema_name => XSD::QName.new(NsVim25, "GetPublicKeyResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetPublicKeyRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SetPublicKey"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["publicKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetPublicKeyResponse,
    :schema_name => XSD::QName.new(NsVim25, "SetPublicKeyResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetExtensionCertificateRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SetExtensionCertificate"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["certificatePem", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetExtensionCertificateResponse,
    :schema_name => XSD::QName.new(NsVim25, "SetExtensionCertificateResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveDatastoreFileRequestType,
    :schema_name => XSD::QName.new(NsVim25, "MoveDatastoreFile_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["destinationName", "SOAP::SOAPString"],
      ["destinationDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveDatastoreFile_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "MoveDatastoreFile_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CopyDatastoreFileRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CopyDatastoreFile_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["destinationName", "SOAP::SOAPString"],
      ["destinationDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CopyDatastoreFile_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CopyDatastoreFile_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeleteDatastoreFileRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DeleteDatastoreFile_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeleteDatastoreFile_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "DeleteDatastoreFile_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MakeDirectoryRequestType,
    :schema_name => XSD::QName.new(NsVim25, "MakeDirectory"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["createParentDirectories", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MakeDirectoryResponse,
    :schema_name => XSD::QName.new(NsVim25, "MakeDirectoryResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ChangeOwnerRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ChangeOwner"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["owner", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ChangeOwnerResponse,
    :schema_name => XSD::QName.new(NsVim25, "ChangeOwnerResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateFolderRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateFolder"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateFolderResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateFolderResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveIntoFolderRequestType,
    :schema_name => XSD::QName.new(NsVim25, "MoveIntoFolder_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["list", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveIntoFolder_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "MoveIntoFolder_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::VirtualMachineConfigSpec"],
      ["pool", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RegisterVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RegisterVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["path", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["asTemplate", "SOAP::SOAPBoolean"],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RegisterVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "RegisterVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateClusterRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateCluster"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::ClusterConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateClusterResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateClusterResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateClusterExRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateClusterEx"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::ClusterConfigSpecEx"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateClusterExResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateClusterExResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddStandaloneHostRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AddStandaloneHost_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostConnectSpec"],
      ["compResSpec", "VSphereCloud::ComputeResourceConfigSpec", [0, 1]],
      ["addConnected", "SOAP::SOAPBoolean"],
      ["license", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddStandaloneHost_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "AddStandaloneHost_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateDatacenterRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateDatacenter"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateDatacenterResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateDatacenterResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnregisterAndDestroyRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UnregisterAndDestroy_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnregisterAndDestroy_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "UnregisterAndDestroy_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateDVSRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateDVS_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::DVSCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateDVS_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateDVS_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetCollectorPageSizeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SetCollectorPageSize"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetCollectorPageSizeResponse,
    :schema_name => XSD::QName.new(NsVim25, "SetCollectorPageSizeResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RewindCollectorRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RewindCollector"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RewindCollectorResponse,
    :schema_name => XSD::QName.new(NsVim25, "RewindCollectorResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetCollectorRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ResetCollector"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetCollectorResponse,
    :schema_name => XSD::QName.new(NsVim25, "ResetCollectorResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyCollectorRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DestroyCollector"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyCollectorResponse,
    :schema_name => XSD::QName.new(NsVim25, "DestroyCollectorResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryHostConnectionInfoRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryHostConnectionInfo"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryHostConnectionInfoResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryHostConnectionInfoResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostConnectInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateSystemResourcesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateSystemResources"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["resourceInfo", "VSphereCloud::HostSystemResourceInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateSystemResourcesResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateSystemResourcesResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconnectHostRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReconnectHost_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["cnxSpec", "VSphereCloud::HostConnectSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconnectHost_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReconnectHost_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisconnectHostRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DisconnectHost_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisconnectHost_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "DisconnectHost_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnterMaintenanceModeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "EnterMaintenanceMode_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["timeout", "SOAP::SOAPInt"],
      ["evacuatePoweredOffVms", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnterMaintenanceMode_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "EnterMaintenanceMode_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExitMaintenanceModeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ExitMaintenanceMode_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["timeout", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExitMaintenanceMode_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ExitMaintenanceMode_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RebootHostRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RebootHost_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RebootHost_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "RebootHost_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ShutdownHostRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ShutdownHost_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ShutdownHost_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ShutdownHost_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerDownHostToStandByRequestType,
    :schema_name => XSD::QName.new(NsVim25, "PowerDownHostToStandBy_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["timeoutSec", "SOAP::SOAPInt"],
      ["evacuatePoweredOffVms", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerDownHostToStandBy_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "PowerDownHostToStandBy_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerUpHostFromStandByRequestType,
    :schema_name => XSD::QName.new(NsVim25, "PowerUpHostFromStandBy_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["timeoutSec", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerUpHostFromStandBy_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "PowerUpHostFromStandBy_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryMemoryOverheadRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryMemoryOverhead"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["memorySize", "SOAP::SOAPLong"],
      ["videoRamSize", "SOAP::SOAPInt", [0, 1]],
      ["numVcpus", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryMemoryOverheadResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryMemoryOverheadResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryMemoryOverheadExRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryMemoryOverheadEx"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vmConfigInfo", "VSphereCloud::VirtualMachineConfigInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryMemoryOverheadExResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryMemoryOverheadExResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureHostForDASRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureHostForDAS_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureHostForDAS_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureHostForDAS_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateFlagsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateFlags"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["flagInfo", "VSphereCloud::HostFlagInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateFlagsResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateFlagsResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnterLockdownModeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "EnterLockdownMode"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnterLockdownModeResponse,
    :schema_name => XSD::QName.new(NsVim25, "EnterLockdownModeResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExitLockdownModeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ExitLockdownMode"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExitLockdownModeResponse,
    :schema_name => XSD::QName.new(NsVim25, "ExitLockdownModeResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcquireCimServicesTicketRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AcquireCimServicesTicket"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcquireCimServicesTicketResponse,
    :schema_name => XSD::QName.new(NsVim25, "AcquireCimServicesTicketResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostServiceTicket"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateIpmiRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateIpmi"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ipmiInfo", "VSphereCloud::HostIpmiInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateIpmiResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateIpmiResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveHardwareUptimeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveHardwareUptime"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveHardwareUptimeResponse,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveHardwareUptimeResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseGetManifestRequestType,
    :schema_name => XSD::QName.new(NsVim25, "HttpNfcLeaseGetManifest"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseGetManifestResponse,
    :schema_name => XSD::QName.new(NsVim25, "HttpNfcLeaseGetManifestResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HttpNfcLeaseManifestEntry[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseCompleteRequestType,
    :schema_name => XSD::QName.new(NsVim25, "HttpNfcLeaseComplete"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseCompleteResponse,
    :schema_name => XSD::QName.new(NsVim25, "HttpNfcLeaseCompleteResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseAbortRequestType,
    :schema_name => XSD::QName.new(NsVim25, "HttpNfcLeaseAbort"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseAbortResponse,
    :schema_name => XSD::QName.new(NsVim25, "HttpNfcLeaseAbortResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseProgressRequestType,
    :schema_name => XSD::QName.new(NsVim25, "HttpNfcLeaseProgress"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["percent", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HttpNfcLeaseProgressResponse,
    :schema_name => XSD::QName.new(NsVim25, "HttpNfcLeaseProgressResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryIpPoolsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryIpPools"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dc", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryIpPoolsResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryIpPoolsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::IpPool[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateIpPoolRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateIpPool"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dc", "VSphereCloud::ManagedObjectReference"],
      ["pool", "VSphereCloud::IpPool"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateIpPoolResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateIpPoolResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateIpPoolRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateIpPool"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dc", "VSphereCloud::ManagedObjectReference"],
      ["pool", "VSphereCloud::IpPool"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateIpPoolResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateIpPoolResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyIpPoolRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DestroyIpPool"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dc", "VSphereCloud::ManagedObjectReference"],
      ["id", "SOAP::SOAPInt"],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyIpPoolResponse,
    :schema_name => XSD::QName.new(NsVim25, "DestroyIpPoolResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateAssignedLicenseRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateAssignedLicense"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "SOAP::SOAPString"],
      ["licenseKey", "SOAP::SOAPString"],
      ["entityDisplayName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateAssignedLicenseResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateAssignedLicenseResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::LicenseManagerLicenseInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveAssignedLicenseRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveAssignedLicense"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entityId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveAssignedLicenseResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveAssignedLicenseResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAssignedLicensesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryAssignedLicenses"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entityId", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAssignedLicensesResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryAssignedLicensesResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::LicenseAssignmentManagerLicenseAssignment[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QuerySupportedFeaturesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QuerySupportedFeatures"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QuerySupportedFeaturesResponse,
    :schema_name => XSD::QName.new(NsVim25, "QuerySupportedFeaturesResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::LicenseFeatureInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryLicenseSourceAvailabilityRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryLicenseSourceAvailability"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryLicenseSourceAvailabilityResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryLicenseSourceAvailabilityResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::LicenseAvailabilityInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryLicenseUsageRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryLicenseUsage"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryLicenseUsageResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryLicenseUsageResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::LicenseUsageInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetLicenseEditionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SetLicenseEdition"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetLicenseEditionResponse,
    :schema_name => XSD::QName.new(NsVim25, "SetLicenseEditionResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckLicenseFeatureRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CheckLicenseFeature"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckLicenseFeatureResponse,
    :schema_name => XSD::QName.new(NsVim25, "CheckLicenseFeatureResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableFeatureRequestType,
    :schema_name => XSD::QName.new(NsVim25, "EnableFeature"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableFeatureResponse,
    :schema_name => XSD::QName.new(NsVim25, "EnableFeatureResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableFeatureRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DisableFeature"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["featureKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableFeatureResponse,
    :schema_name => XSD::QName.new(NsVim25, "DisableFeatureResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConfigureLicenseSourceRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ConfigureLicenseSource"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["licenseSource", "VSphereCloud::LicenseSource"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConfigureLicenseSourceResponse,
    :schema_name => XSD::QName.new(NsVim25, "ConfigureLicenseSourceResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateLicenseRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateLicense"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labels", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateLicenseResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateLicenseResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::LicenseManagerLicenseInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddLicenseRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AddLicense"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labels", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddLicenseResponse,
    :schema_name => XSD::QName.new(NsVim25, "AddLicenseResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::LicenseManagerLicenseInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveLicenseRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveLicense"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveLicenseResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveLicenseResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DecodeLicenseRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DecodeLicense"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DecodeLicenseResponse,
    :schema_name => XSD::QName.new(NsVim25, "DecodeLicenseResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::LicenseManagerLicenseInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateLicenseLabelRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateLicenseLabel"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labelKey", "SOAP::SOAPString"],
      ["labelValue", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateLicenseLabelResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateLicenseLabelResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveLicenseLabelRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveLicenseLabel"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["licenseKey", "SOAP::SOAPString"],
      ["labelKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveLicenseLabelResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveLicenseLabelResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReloadRequestType,
    :schema_name => XSD::QName.new(NsVim25, "Reload"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReloadResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReloadResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RenameRequestType,
    :schema_name => XSD::QName.new(NsVim25, "Rename_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["newName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::Rename_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "Rename_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyRequestType,
    :schema_name => XSD::QName.new(NsVim25, "Destroy_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::Destroy_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "Destroy_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyNetworkRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DestroyNetwork"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyNetworkResponse,
    :schema_name => XSD::QName.new(NsVim25, "DestroyNetworkResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ValidateHostRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ValidateHost"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["vhp", "VSphereCloud::OvfValidateHostParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ValidateHostResponse,
    :schema_name => XSD::QName.new(NsVim25, "ValidateHostResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::OvfValidateHostResult"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ParseDescriptorRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ParseDescriptor"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["pdp", "VSphereCloud::OvfParseDescriptorParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ParseDescriptorResponse,
    :schema_name => XSD::QName.new(NsVim25, "ParseDescriptorResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::OvfParseDescriptorResult"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateImportSpecRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateImportSpec"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ovfDescriptor", "SOAP::SOAPString"],
      ["resourcePool", "VSphereCloud::ManagedObjectReference"],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["cisp", "VSphereCloud::OvfCreateImportSpecParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateImportSpecResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateImportSpecResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::OvfCreateImportSpecResult"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateDescriptorRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateDescriptor"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["cdp", "VSphereCloud::OvfCreateDescriptorParams"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateDescriptorResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateDescriptorResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::OvfCreateDescriptorResult"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPerfProviderSummaryRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryPerfProviderSummary"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPerfProviderSummaryResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryPerfProviderSummaryResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::PerfProviderSummary"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAvailablePerfMetricRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryAvailablePerfMetric"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["beginTime", "SOAP::SOAPDateTime", [0, 1]],
      ["endTime", "SOAP::SOAPDateTime", [0, 1]],
      ["intervalId", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAvailablePerfMetricResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryAvailablePerfMetricResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::PerfMetricId[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPerfCounterRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryPerfCounter"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["counterId", "SOAP::SOAPInt[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPerfCounterResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryPerfCounterResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::PerfCounterInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPerfCounterByLevelRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryPerfCounterByLevel"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["level", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPerfCounterByLevelResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryPerfCounterByLevelResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::PerfCounterInfo[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPerfRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryPerf"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["querySpec", "VSphereCloud::PerfQuerySpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPerfResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryPerfResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::PerfEntityMetricBase[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPerfCompositeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryPerfComposite"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["querySpec", "VSphereCloud::PerfQuerySpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPerfCompositeResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryPerfCompositeResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::PerfCompositeMetric"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreatePerfIntervalRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreatePerfInterval"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["intervalId", "VSphereCloud::PerfInterval"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreatePerfIntervalResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreatePerfIntervalResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemovePerfIntervalRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemovePerfInterval"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["samplePeriod", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemovePerfIntervalResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemovePerfIntervalResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdatePerfIntervalRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdatePerfInterval"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["interval", "VSphereCloud::PerfInterval"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdatePerfIntervalResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdatePerfIntervalResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EstimateDatabaseSizeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "EstimateDatabaseSize"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dbSizeParam", "VSphereCloud::DatabaseSizeParam"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EstimateDatabaseSizeResponse,
    :schema_name => XSD::QName.new(NsVim25, "EstimateDatabaseSizeResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::DatabaseSizeEstimate"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateConfigRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateConfig"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["config", "VSphereCloud::ResourceConfigSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateConfigResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateConfigResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveIntoResourcePoolRequestType,
    :schema_name => XSD::QName.new(NsVim25, "MoveIntoResourcePool"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["list", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveIntoResourcePoolResponse,
    :schema_name => XSD::QName.new(NsVim25, "MoveIntoResourcePoolResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateChildResourceConfigurationRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateChildResourceConfiguration"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::ResourceConfigSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateChildResourceConfigurationResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateChildResourceConfigurationResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateResourcePoolRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateResourcePool"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::ResourceConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateResourcePoolResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateResourcePoolResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyChildrenRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DestroyChildren"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyChildrenResponse,
    :schema_name => XSD::QName.new(NsVim25, "DestroyChildrenResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateVAppRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateVApp"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["resSpec", "VSphereCloud::ResourceConfigSpec"],
      ["configSpec", "VSphereCloud::VAppConfigSpec"],
      ["vmFolder", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateVAppResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateVAppResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateChildVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateChildVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::VirtualMachineConfigSpec"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateChildVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateChildVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RegisterChildVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RegisterChildVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["path", "SOAP::SOAPString"],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RegisterChildVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "RegisterChildVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ImportVAppRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ImportVApp"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::ImportSpec"],
      ["folder", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ImportVAppResponse,
    :schema_name => XSD::QName.new(NsVim25, "ImportVAppResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryResourceConfigOptionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryResourceConfigOption"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryResourceConfigOptionResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryResourceConfigOptionResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ResourceConfigOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshRuntimeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RefreshRuntime"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshRuntimeResponse,
    :schema_name => XSD::QName.new(NsVim25, "RefreshRuntimeResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindByUuidRequestType,
    :schema_name => XSD::QName.new(NsVim25, "FindByUuid"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindByUuidResponse,
    :schema_name => XSD::QName.new(NsVim25, "FindByUuidResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindByDatastorePathRequestType,
    :schema_name => XSD::QName.new(NsVim25, "FindByDatastorePath"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference"],
      ["path", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindByDatastorePathResponse,
    :schema_name => XSD::QName.new(NsVim25, "FindByDatastorePathResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindByDnsNameRequestType,
    :schema_name => XSD::QName.new(NsVim25, "FindByDnsName"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["dnsName", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindByDnsNameResponse,
    :schema_name => XSD::QName.new(NsVim25, "FindByDnsNameResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindByIpRequestType,
    :schema_name => XSD::QName.new(NsVim25, "FindByIp"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["ip", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindByIpResponse,
    :schema_name => XSD::QName.new(NsVim25, "FindByIpResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindByInventoryPathRequestType,
    :schema_name => XSD::QName.new(NsVim25, "FindByInventoryPath"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["inventoryPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindByInventoryPathResponse,
    :schema_name => XSD::QName.new(NsVim25, "FindByInventoryPathResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindChildRequestType,
    :schema_name => XSD::QName.new(NsVim25, "FindChild"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindChildResponse,
    :schema_name => XSD::QName.new(NsVim25, "FindChildResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindAllByUuidRequestType,
    :schema_name => XSD::QName.new(NsVim25, "FindAllByUuid"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"],
      ["instanceUuid", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindAllByUuidResponse,
    :schema_name => XSD::QName.new(NsVim25, "FindAllByUuidResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindAllByDnsNameRequestType,
    :schema_name => XSD::QName.new(NsVim25, "FindAllByDnsName"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["dnsName", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindAllByDnsNameResponse,
    :schema_name => XSD::QName.new(NsVim25, "FindAllByDnsNameResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindAllByIpRequestType,
    :schema_name => XSD::QName.new(NsVim25, "FindAllByIp"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["ip", "SOAP::SOAPString"],
      ["vmSearch", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindAllByIpResponse,
    :schema_name => XSD::QName.new(NsVim25, "FindAllByIpResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CurrentTimeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CurrentTime"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CurrentTimeResponse,
    :schema_name => XSD::QName.new(NsVim25, "CurrentTimeResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveServiceContentRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveServiceContent"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveServiceContentResponse,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveServiceContentResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ServiceContent"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ValidateMigrationRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ValidateMigration"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]],
      ["state", "VSphereCloud::VirtualMachinePowerState", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ValidateMigrationResponse,
    :schema_name => XSD::QName.new(NsVim25, "ValidateMigrationResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::Event[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVMotionCompatibilityRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryVMotionCompatibility"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference[]", [1, nil]],
      ["compatibility", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVMotionCompatibilityResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryVMotionCompatibilityResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostVMotionCompatibility[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveProductComponentsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveProductComponents"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveProductComponentsResponse,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveProductComponentsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ProductComponentInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateServiceMessageRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateServiceMessage"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["message", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateServiceMessageResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateServiceMessageResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LoginRequestType,
    :schema_name => XSD::QName.new(NsVim25, "Login"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LoginResponse,
    :schema_name => XSD::QName.new(NsVim25, "LoginResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::UserSession"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LoginBySSPIRequestType,
    :schema_name => XSD::QName.new(NsVim25, "LoginBySSPI"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["base64Token", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LoginBySSPIResponse,
    :schema_name => XSD::QName.new(NsVim25, "LoginBySSPIResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::UserSession"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LogoutRequestType,
    :schema_name => XSD::QName.new(NsVim25, "Logout"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LogoutResponse,
    :schema_name => XSD::QName.new(NsVim25, "LogoutResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcquireLocalTicketRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AcquireLocalTicket"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcquireLocalTicketResponse,
    :schema_name => XSD::QName.new(NsVim25, "AcquireLocalTicketResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::SessionManagerLocalTicket"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TerminateSessionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "TerminateSession"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sessionId", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TerminateSessionResponse,
    :schema_name => XSD::QName.new(NsVim25, "TerminateSessionResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetLocaleRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SetLocale"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["locale", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetLocaleResponse,
    :schema_name => XSD::QName.new(NsVim25, "SetLocaleResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LoginExtensionBySubjectNameRequestType,
    :schema_name => XSD::QName.new(NsVim25, "LoginExtensionBySubjectName"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LoginExtensionBySubjectNameResponse,
    :schema_name => XSD::QName.new(NsVim25, "LoginExtensionBySubjectNameResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::UserSession"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LoginExtensionByCertificateRequestType,
    :schema_name => XSD::QName.new(NsVim25, "LoginExtensionByCertificate"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["extensionKey", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LoginExtensionByCertificateResponse,
    :schema_name => XSD::QName.new(NsVim25, "LoginExtensionByCertificateResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::UserSession"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ImpersonateUserRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ImpersonateUser"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["locale", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ImpersonateUserResponse,
    :schema_name => XSD::QName.new(NsVim25, "ImpersonateUserResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::UserSession"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SessionIsActiveRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SessionIsActive"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sessionID", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SessionIsActiveResponse,
    :schema_name => XSD::QName.new(NsVim25, "SessionIsActiveResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcquireCloneTicketRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AcquireCloneTicket"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcquireCloneTicketResponse,
    :schema_name => XSD::QName.new(NsVim25, "AcquireCloneTicketResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CloneSessionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CloneSession"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["cloneTicket", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CloneSessionResponse,
    :schema_name => XSD::QName.new(NsVim25, "CloneSessionResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::UserSession"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConfigureDatastoreIORMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ConfigureDatastoreIORM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::StorageIORMConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConfigureDatastoreIORM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ConfigureDatastoreIORM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryIORMConfigOptionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryIORMConfigOption"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryIORMConfigOptionResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryIORMConfigOptionResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::StorageIORMConfigOption"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CancelTaskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CancelTask"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CancelTaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CancelTaskResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateProgressRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateProgress"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["percentDone", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateProgressResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateProgressResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetTaskStateRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SetTaskState"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["state", "VSphereCloud::TaskInfoState"],
      ["result", nil, [0, 1]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetTaskStateResponse,
    :schema_name => XSD::QName.new(NsVim25, "SetTaskStateResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetTaskDescriptionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SetTaskDescription"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["description", "VSphereCloud::LocalizableMessage"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetTaskDescriptionResponse,
    :schema_name => XSD::QName.new(NsVim25, "SetTaskDescriptionResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReadNextTasksRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReadNextTasks"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReadNextTasksResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReadNextTasksResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::TaskInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReadPreviousTasksRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReadPreviousTasks"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReadPreviousTasksResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReadPreviousTasksResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::TaskInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateCollectorForTasksRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateCollectorForTasks"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["filter", "VSphereCloud::TaskFilterSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateCollectorForTasksResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateCollectorForTasksResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateTaskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateTask"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["taskTypeId", "SOAP::SOAPString"],
      ["initiatedBy", "SOAP::SOAPString", [0, 1]],
      ["cancelable", "SOAP::SOAPBoolean"],
      ["parentTaskKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateTaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateTaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::TaskInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveUserGroupsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveUserGroups"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["domain", "SOAP::SOAPString", [0, 1]],
      ["searchStr", "SOAP::SOAPString"],
      ["belongsToGroup", "SOAP::SOAPString", [0, 1]],
      ["belongsToUser", "SOAP::SOAPString", [0, 1]],
      ["exactMatch", "SOAP::SOAPBoolean"],
      ["findUsers", "SOAP::SOAPBoolean"],
      ["findGroups", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveUserGroupsResponse,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveUserGroupsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::UserSearchResult[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateVAppConfigRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateVAppConfig"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::VAppConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateVAppConfigResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateVAppConfigResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateLinkedChildrenRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateLinkedChildren"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["addChangeSet", "VSphereCloud::VirtualAppLinkInfo[]", [0, nil]],
      ["removeSet", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateLinkedChildrenResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateLinkedChildrenResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CloneVAppRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CloneVApp_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["target", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::VAppCloneSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CloneVApp_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CloneVApp_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExportVAppRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ExportVApp"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExportVAppResponse,
    :schema_name => XSD::QName.new(NsVim25, "ExportVAppResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOnVAppRequestType,
    :schema_name => XSD::QName.new(NsVim25, "PowerOnVApp_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOnVApp_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "PowerOnVApp_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOffVAppRequestType,
    :schema_name => XSD::QName.new(NsVim25, "PowerOffVApp_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOffVApp_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "PowerOffVApp_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SuspendVAppRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SuspendVApp_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SuspendVApp_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "SuspendVApp_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnregisterVAppRequestType,
    :schema_name => XSD::QName.new(NsVim25, "unregisterVApp_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnregisterVApp_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "unregisterVApp_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateVirtualDiskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateVirtualDisk_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["spec", "VSphereCloud::VirtualDiskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateVirtualDisk_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateVirtualDisk_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeleteVirtualDiskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DeleteVirtualDisk_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeleteVirtualDisk_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "DeleteVirtualDisk_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveVirtualDiskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "MoveVirtualDisk_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["destName", "SOAP::SOAPString"],
      ["destDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MoveVirtualDisk_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "MoveVirtualDisk_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CopyVirtualDiskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CopyVirtualDisk_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["sourceName", "SOAP::SOAPString"],
      ["sourceDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["destName", "SOAP::SOAPString"],
      ["destDatacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["destSpec", "VSphereCloud::VirtualDiskSpec", [0, 1]],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CopyVirtualDisk_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CopyVirtualDisk_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtendVirtualDiskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ExtendVirtualDisk_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["newCapacityKb", "SOAP::SOAPLong"],
      ["eagerZero", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtendVirtualDisk_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ExtendVirtualDisk_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVirtualDiskFragmentationRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryVirtualDiskFragmentation"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVirtualDiskFragmentationResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryVirtualDiskFragmentationResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DefragmentVirtualDiskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DefragmentVirtualDisk_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DefragmentVirtualDisk_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "DefragmentVirtualDisk_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ShrinkVirtualDiskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ShrinkVirtualDisk_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["copy", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ShrinkVirtualDisk_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ShrinkVirtualDisk_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InflateVirtualDiskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "InflateVirtualDisk_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InflateVirtualDisk_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "InflateVirtualDisk_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EagerZeroVirtualDiskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "EagerZeroVirtualDisk_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EagerZeroVirtualDisk_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "EagerZeroVirtualDisk_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ZeroFillVirtualDiskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ZeroFillVirtualDisk_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ZeroFillVirtualDisk_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ZeroFillVirtualDisk_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetVirtualDiskUuidRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SetVirtualDiskUuid"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetVirtualDiskUuidResponse,
    :schema_name => XSD::QName.new(NsVim25, "SetVirtualDiskUuidResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVirtualDiskUuidRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryVirtualDiskUuid"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVirtualDiskUuidResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryVirtualDiskUuidResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVirtualDiskGeometryRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryVirtualDiskGeometry"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["datacenter", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVirtualDiskGeometryResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryVirtualDiskGeometryResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostDiskDimensionsChs"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshStorageInfoRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RefreshStorageInfo"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshStorageInfoResponse,
    :schema_name => XSD::QName.new(NsVim25, "RefreshStorageInfoResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateSnapshotRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateSnapshot_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]],
      ["memory", "SOAP::SOAPBoolean"],
      ["quiesce", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateSnapshot_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateSnapshot_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RevertToCurrentSnapshotRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RevertToCurrentSnapshot_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["suppressPowerOn", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RevertToCurrentSnapshot_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "RevertToCurrentSnapshot_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveAllSnapshotsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveAllSnapshots_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveAllSnapshots_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveAllSnapshots_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::VirtualMachineConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpgradeVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpgradeVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpgradeVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpgradeVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtractOvfEnvironmentRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ExtractOvfEnvironment"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtractOvfEnvironmentResponse,
    :schema_name => XSD::QName.new(NsVim25, "ExtractOvfEnvironmentResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOnVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "PowerOnVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOnVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "PowerOnVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOffVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "PowerOffVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOffVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "PowerOffVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SuspendVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SuspendVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SuspendVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "SuspendVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ResetVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ResetVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ShutdownGuestRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ShutdownGuest"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ShutdownGuestResponse,
    :schema_name => XSD::QName.new(NsVim25, "ShutdownGuestResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RebootGuestRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RebootGuest"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RebootGuestResponse,
    :schema_name => XSD::QName.new(NsVim25, "RebootGuestResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StandbyGuestRequestType,
    :schema_name => XSD::QName.new(NsVim25, "StandbyGuest"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StandbyGuestResponse,
    :schema_name => XSD::QName.new(NsVim25, "StandbyGuestResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AnswerVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AnswerVM"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["questionId", "SOAP::SOAPString"],
      ["answerChoice", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AnswerVMResponse,
    :schema_name => XSD::QName.new(NsVim25, "AnswerVMResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizeVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CustomizeVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::CustomizationSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizeVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CustomizeVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckCustomizationSpecRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CheckCustomizationSpec"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::CustomizationSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckCustomizationSpecResponse,
    :schema_name => XSD::QName.new(NsVim25, "CheckCustomizationSpecResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrateVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "MigrateVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["priority", "VSphereCloud::VirtualMachineMovePriority"],
      ["state", "VSphereCloud::VirtualMachinePowerState", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrateVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "MigrateVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RelocateVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RelocateVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::VirtualMachineRelocateSpec"],
      ["priority", "VSphereCloud::VirtualMachineMovePriority", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RelocateVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "RelocateVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CloneVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CloneVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["folder", "VSphereCloud::ManagedObjectReference"],
      ["name", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::VirtualMachineCloneSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CloneVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CloneVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExportVmRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ExportVm"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExportVmResponse,
    :schema_name => XSD::QName.new(NsVim25, "ExportVmResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MarkAsTemplateRequestType,
    :schema_name => XSD::QName.new(NsVim25, "MarkAsTemplate"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MarkAsTemplateResponse,
    :schema_name => XSD::QName.new(NsVim25, "MarkAsTemplateResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MarkAsVirtualMachineRequestType,
    :schema_name => XSD::QName.new(NsVim25, "MarkAsVirtualMachine"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pool", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MarkAsVirtualMachineResponse,
    :schema_name => XSD::QName.new(NsVim25, "MarkAsVirtualMachineResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnregisterVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UnregisterVM"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnregisterVMResponse,
    :schema_name => XSD::QName.new(NsVim25, "UnregisterVMResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetGuestInformationRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ResetGuestInformation"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetGuestInformationResponse,
    :schema_name => XSD::QName.new(NsVim25, "ResetGuestInformationResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MountToolsInstallerRequestType,
    :schema_name => XSD::QName.new(NsVim25, "MountToolsInstaller"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MountToolsInstallerResponse,
    :schema_name => XSD::QName.new(NsVim25, "MountToolsInstallerResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnmountToolsInstallerRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UnmountToolsInstaller"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnmountToolsInstallerResponse,
    :schema_name => XSD::QName.new(NsVim25, "UnmountToolsInstallerResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpgradeToolsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpgradeTools_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["installerOptions", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpgradeTools_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpgradeTools_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcquireMksTicketRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AcquireMksTicket"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcquireMksTicketResponse,
    :schema_name => XSD::QName.new(NsVim25, "AcquireMksTicketResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::VirtualMachineMksTicket"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcquireTicketRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AcquireTicket"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ticketType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcquireTicketResponse,
    :schema_name => XSD::QName.new(NsVim25, "AcquireTicketResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::VirtualMachineTicket"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetScreenResolutionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SetScreenResolution"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["width", "SOAP::SOAPInt"],
      ["height", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetScreenResolutionResponse,
    :schema_name => XSD::QName.new(NsVim25, "SetScreenResolutionResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DefragmentAllDisksRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DefragmentAllDisks"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DefragmentAllDisksResponse,
    :schema_name => XSD::QName.new(NsVim25, "DefragmentAllDisksResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateSecondaryVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateSecondaryVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateSecondaryVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateSecondaryVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TurnOffFaultToleranceForVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "TurnOffFaultToleranceForVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TurnOffFaultToleranceForVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "TurnOffFaultToleranceForVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MakePrimaryVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "MakePrimaryVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MakePrimaryVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "MakePrimaryVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TerminateFaultTolerantVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "TerminateFaultTolerantVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TerminateFaultTolerantVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "TerminateFaultTolerantVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableSecondaryVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DisableSecondaryVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableSecondaryVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "DisableSecondaryVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableSecondaryVMRequestType,
    :schema_name => XSD::QName.new(NsVim25, "EnableSecondaryVM_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableSecondaryVM_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "EnableSecondaryVM_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetDisplayTopologyRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SetDisplayTopology"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["displays", "VSphereCloud::VirtualMachineDisplayTopology[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetDisplayTopologyResponse,
    :schema_name => XSD::QName.new(NsVim25, "SetDisplayTopologyResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StartRecordingRequestType,
    :schema_name => XSD::QName.new(NsVim25, "StartRecording_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StartRecording_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "StartRecording_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StopRecordingRequestType,
    :schema_name => XSD::QName.new(NsVim25, "StopRecording_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StopRecording_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "StopRecording_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StartReplayingRequestType,
    :schema_name => XSD::QName.new(NsVim25, "StartReplaying_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["replaySnapshot", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StartReplaying_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "StartReplaying_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StopReplayingRequestType,
    :schema_name => XSD::QName.new(NsVim25, "StopReplaying_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StopReplaying_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "StopReplaying_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PromoteDisksRequestType,
    :schema_name => XSD::QName.new(NsVim25, "PromoteDisks_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["unlink", "SOAP::SOAPBoolean"],
      ["disks", "VSphereCloud::VirtualDisk[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PromoteDisks_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "PromoteDisks_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateScreenshotRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateScreenshot_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateScreenshot_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateScreenshot_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryChangedDiskAreasRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryChangedDiskAreas"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["snapshot", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["deviceKey", "SOAP::SOAPInt"],
      ["startOffset", "SOAP::SOAPLong"],
      ["changeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryChangedDiskAreasResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryChangedDiskAreasResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::DiskChangeInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryUnownedFilesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryUnownedFiles"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryUnownedFilesResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryUnownedFilesResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReloadVirtualMachineFromPathRequestType,
    :schema_name => XSD::QName.new(NsVim25, "reloadVirtualMachineFromPath_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["configurationPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReloadVirtualMachineFromPath_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "reloadVirtualMachineFromPath_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryFaultToleranceCompatibilityRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryFaultToleranceCompatibility"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryFaultToleranceCompatibilityResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryFaultToleranceCompatibilityResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveAlarmRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveAlarm"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveAlarmResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveAlarmResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureAlarmRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureAlarm"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::AlarmSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureAlarmResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureAlarmResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateAlarmRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateAlarm"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::AlarmSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateAlarmResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateAlarmResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GetAlarmRequestType,
    :schema_name => XSD::QName.new(NsVim25, "GetAlarm"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GetAlarmResponse,
    :schema_name => XSD::QName.new(NsVim25, "GetAlarmResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AreAlarmActionsEnabledRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AreAlarmActionsEnabled"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AreAlarmActionsEnabledResponse,
    :schema_name => XSD::QName.new(NsVim25, "AreAlarmActionsEnabledResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableAlarmActionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "EnableAlarmActions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableAlarmActionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "EnableAlarmActionsResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GetAlarmStateRequestType,
    :schema_name => XSD::QName.new(NsVim25, "GetAlarmState"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GetAlarmStateResponse,
    :schema_name => XSD::QName.new(NsVim25, "GetAlarmStateResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::AlarmState[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcknowledgeAlarmRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AcknowledgeAlarm"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["alarm", "VSphereCloud::ManagedObjectReference"],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AcknowledgeAlarmResponse,
    :schema_name => XSD::QName.new(NsVim25, "AcknowledgeAlarmResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureDVPortgroupRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureDVPortgroup_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::DVPortgroupConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureDVPortgroup_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureDVPortgroup_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAvailableDvsSpecRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryAvailableDvsSpec"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAvailableDvsSpecResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryAvailableDvsSpecResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::DistributedVirtualSwitchProductSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryCompatibleHostForNewDvsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryCompatibleHostForNewDvs"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["container", "VSphereCloud::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"],
      ["switchProductSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryCompatibleHostForNewDvsResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryCompatibleHostForNewDvsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryCompatibleHostForExistingDvsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryCompatibleHostForExistingDvs"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["container", "VSphereCloud::ManagedObjectReference"],
      ["recursive", "SOAP::SOAPBoolean"],
      ["dvs", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryCompatibleHostForExistingDvsResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryCompatibleHostForExistingDvsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDvsCompatibleHostSpecRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryDvsCompatibleHostSpec"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["switchProductSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDvsCompatibleHostSpecResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryDvsCompatibleHostSpecResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::DistributedVirtualSwitchHostProductSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDvsFeatureCapabilityRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryDvsFeatureCapability"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["switchProductSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDvsFeatureCapabilityResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryDvsFeatureCapabilityResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::DVSFeatureCapability", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDvsByUuidRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryDvsByUuid"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDvsByUuidResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryDvsByUuidResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDvsConfigTargetRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryDvsConfigTarget"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["dvs", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDvsConfigTargetResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryDvsConfigTargetResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::DVSManagerDvsConfigTarget"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDvsCheckCompatibilityRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryDvsCheckCompatibility"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["hostContainer", "VSphereCloud::DistributedVirtualSwitchManagerHostContainer"],
      ["dvsProductSpec", "VSphereCloud::DistributedVirtualSwitchManagerDvsProductSpec", [0, 1]],
      ["hostFilterSpec", "VSphereCloud::DistributedVirtualSwitchManagerHostDvsFilterSpec[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDvsCheckCompatibilityResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryDvsCheckCompatibilityResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::DistributedVirtualSwitchManagerCompatibilityResult[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReadNextEventsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReadNextEvents"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReadNextEventsResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReadNextEventsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::Event[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReadPreviousEventsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReadPreviousEvents"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["maxCount", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReadPreviousEventsResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReadPreviousEventsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::Event[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveArgumentDescriptionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveArgumentDescription"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["eventTypeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveArgumentDescriptionResponse,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveArgumentDescriptionResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::EventArgDesc[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateCollectorForEventsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateCollectorForEvents"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["filter", "VSphereCloud::EventFilterSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateCollectorForEventsResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateCollectorForEventsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LogUserEventRequestType,
    :schema_name => XSD::QName.new(NsVim25, "LogUserEvent"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["msg", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LogUserEventResponse,
    :schema_name => XSD::QName.new(NsVim25, "LogUserEventResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryEventsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryEvents"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["filter", "VSphereCloud::EventFilterSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryEventsResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryEventsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::Event[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PostEventRequestType,
    :schema_name => XSD::QName.new(NsVim25, "PostEvent"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["eventToPost", "VSphereCloud::Event"],
      ["taskInfo", "VSphereCloud::TaskInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PostEventResponse,
    :schema_name => XSD::QName.new(NsVim25, "PostEventResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ActiveDirectoryFault,
    :schema_name => XSD::QName.new(NsVim25, "ActiveDirectoryFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AdminDisabled,
    :schema_name => XSD::QName.new(NsVim25, "AdminDisabledFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AdminNotDisabled,
    :schema_name => XSD::QName.new(NsVim25, "AdminNotDisabledFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AffinityConfigured,
    :schema_name => XSD::QName.new(NsVim25, "AffinityConfiguredFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["configuredAffinity", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AgentInstallFailed,
    :schema_name => XSD::QName.new(NsVim25, "AgentInstallFailedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["statusCode", "SOAP::SOAPInt", [0, 1]],
      ["installerOutput", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlreadyBeingManaged,
    :schema_name => XSD::QName.new(NsVim25, "AlreadyBeingManagedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["ipAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlreadyConnected,
    :schema_name => XSD::QName.new(NsVim25, "AlreadyConnectedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlreadyExists,
    :schema_name => XSD::QName.new(NsVim25, "AlreadyExistsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AlreadyUpgraded,
    :schema_name => XSD::QName.new(NsVim25, "AlreadyUpgradedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ApplicationQuiesceFault,
    :schema_name => XSD::QName.new(NsVim25, "ApplicationQuiesceFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AuthMinimumAdminPermission,
    :schema_name => XSD::QName.new(NsVim25, "AuthMinimumAdminPermissionFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::BlockedByFirewall,
    :schema_name => XSD::QName.new(NsVim25, "BlockedByFirewallFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAccessFile,
    :schema_name => XSD::QName.new(NsVim25, "CannotAccessFileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAccessLocalSource,
    :schema_name => XSD::QName.new(NsVim25, "CannotAccessLocalSourceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAccessNetwork,
    :schema_name => XSD::QName.new(NsVim25, "CannotAccessNetworkFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAccessVmComponent,
    :schema_name => XSD::QName.new(NsVim25, "CannotAccessVmComponentFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAccessVmConfig,
    :schema_name => XSD::QName.new(NsVim25, "CannotAccessVmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAccessVmDevice,
    :schema_name => XSD::QName.new(NsVim25, "CannotAccessVmDeviceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAccessVmDisk,
    :schema_name => XSD::QName.new(NsVim25, "CannotAccessVmDiskFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAddHostWithFTVmAsStandalone,
    :schema_name => XSD::QName.new(NsVim25, "CannotAddHostWithFTVmAsStandaloneFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAddHostWithFTVmToDifferentCluster,
    :schema_name => XSD::QName.new(NsVim25, "CannotAddHostWithFTVmToDifferentClusterFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotAddHostWithFTVmToNonHACluster,
    :schema_name => XSD::QName.new(NsVim25, "CannotAddHostWithFTVmToNonHAClusterFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotChangeDrsBehaviorForFtSecondary,
    :schema_name => XSD::QName.new(NsVim25, "CannotChangeDrsBehaviorForFtSecondaryFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotChangeHaSettingsForFtSecondary,
    :schema_name => XSD::QName.new(NsVim25, "CannotChangeHaSettingsForFtSecondaryFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotCreateFile,
    :schema_name => XSD::QName.new(NsVim25, "CannotCreateFileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotDecryptPasswords,
    :schema_name => XSD::QName.new(NsVim25, "CannotDecryptPasswordsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotDeleteFile,
    :schema_name => XSD::QName.new(NsVim25, "CannotDeleteFileFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotDisableDrsOnClustersWithVApps,
    :schema_name => XSD::QName.new(NsVim25, "CannotDisableDrsOnClustersWithVAppsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotDisableSnapshot,
    :schema_name => XSD::QName.new(NsVim25, "CannotDisableSnapshotFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotDisconnectHostWithFaultToleranceVm,
    :schema_name => XSD::QName.new(NsVim25, "CannotDisconnectHostWithFaultToleranceVmFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotModifyConfigCpuRequirements,
    :schema_name => XSD::QName.new(NsVim25, "CannotModifyConfigCpuRequirementsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotMoveFaultToleranceVm,
    :schema_name => XSD::QName.new(NsVim25, "CannotMoveFaultToleranceVmFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["moveType", "SOAP::SOAPString"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CannotMoveHostWithFaultToleranceVm,
    :schema_name => XSD::QName.new(NsVim25, "CannotMoveHostWithFaultToleranceVmFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClockSkew,
    :schema_name => XSD::QName.new(NsVim25, "ClockSkewFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CloneFromSnapshotNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "CloneFromSnapshotNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConcurrentAccess,
    :schema_name => XSD::QName.new(NsVim25, "ConcurrentAccessFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConnectedIso,
    :schema_name => XSD::QName.new(NsVim25, "ConnectedIsoFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["cdrom", "VSphereCloud::VirtualCdrom"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CpuCompatibilityUnknown,
    :schema_name => XSD::QName.new(NsVim25, "CpuCompatibilityUnknownFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CpuHotPlugNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "CpuHotPlugNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CpuIncompatible,
    :schema_name => XSD::QName.new(NsVim25, "CpuIncompatibleFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CpuIncompatible1ECX,
    :schema_name => XSD::QName.new(NsVim25, "CpuIncompatible1ECXFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["sse3", "SOAP::SOAPBoolean"],
      ["ssse3", "SOAP::SOAPBoolean"],
      ["sse41", "SOAP::SOAPBoolean"],
      ["sse42", "SOAP::SOAPBoolean"],
      ["other", "SOAP::SOAPBoolean"],
      ["otherOnly", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CpuIncompatible81EDX,
    :schema_name => XSD::QName.new(NsVim25, "CpuIncompatible81EDXFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["nx", "SOAP::SOAPBoolean"],
      ["ffxsr", "SOAP::SOAPBoolean"],
      ["rdtscp", "SOAP::SOAPBoolean"],
      ["lm", "SOAP::SOAPBoolean"],
      ["other", "SOAP::SOAPBoolean"],
      ["otherOnly", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationFault,
    :schema_name => XSD::QName.new(NsVim25, "CustomizationFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CustomizationPending,
    :schema_name => XSD::QName.new(NsVim25, "CustomizationPendingFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DVPortNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "DVPortNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DasConfigFault,
    :schema_name => XSD::QName.new(NsVim25, "DasConfigFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["output", "SOAP::SOAPString", [0, 1]],
      ["event", "VSphereCloud::Event[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatabaseError,
    :schema_name => XSD::QName.new(NsVim25, "DatabaseErrorFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatacenterMismatch,
    :schema_name => XSD::QName.new(NsVim25, "DatacenterMismatchFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidArgument", "VSphereCloud::DatacenterMismatchArgument[]", [1, nil]],
      ["expectedDatacenter", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DatastoreNotWritableOnHost,
    :schema_name => XSD::QName.new(NsVim25, "DatastoreNotWritableOnHostFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestinationSwitchFull,
    :schema_name => XSD::QName.new(NsVim25, "DestinationSwitchFullFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceBackingNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "DeviceBackingNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceControllerNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "DeviceControllerNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["controller", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceHotPlugNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "DeviceHotPlugNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceNotFound,
    :schema_name => XSD::QName.new(NsVim25, "DeviceNotFoundFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "DeviceNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceUnsupportedForVmPlatform,
    :schema_name => XSD::QName.new(NsVim25, "DeviceUnsupportedForVmPlatformFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeviceUnsupportedForVmVersion,
    :schema_name => XSD::QName.new(NsVim25, "DeviceUnsupportedForVmVersionFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["currentVersion", "SOAP::SOAPString"],
      ["expectedVersion", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableAdminNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "DisableAdminNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisallowedDiskModeChange,
    :schema_name => XSD::QName.new(NsVim25, "DisallowedDiskModeChangeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisallowedMigrationDeviceAttached,
    :schema_name => XSD::QName.new(NsVim25, "DisallowedMigrationDeviceAttachedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisallowedOperationOnFailoverHost,
    :schema_name => XSD::QName.new(NsVim25, "DisallowedOperationOnFailoverHostFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["hostname", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DiskMoveTypeNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "DiskMoveTypeNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DiskNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "DiskNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["disk", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DomainNotFound,
    :schema_name => XSD::QName.new(NsVim25, "DomainNotFoundFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]],
      ["domainName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsDisabledOnVm,
    :schema_name => XSD::QName.new(NsVim25, "DrsDisabledOnVmFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DrsVmotionIncompatibleFault,
    :schema_name => XSD::QName.new(NsVim25, "DrsVmotionIncompatibleFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DuplicateName,
    :schema_name => XSD::QName.new(NsVim25, "DuplicateNameFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["object", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsFault,
    :schema_name => XSD::QName.new(NsVim25, "DvsFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsNotAuthorized,
    :schema_name => XSD::QName.new(NsVim25, "DvsNotAuthorizedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["sessionExtensionKey", "SOAP::SOAPString", [0, 1]],
      ["dvsExtensionKey", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsOperationBulkFault,
    :schema_name => XSD::QName.new(NsVim25, "DvsOperationBulkFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostFault", "VSphereCloud::DvsOperationBulkFaultFaultOnHost[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DvsScopeViolated,
    :schema_name => XSD::QName.new(NsVim25, "DvsScopeViolatedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["scope", "VSphereCloud::ManagedObjectReference[]", [1, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailed,
    :schema_name => XSD::QName.new(NsVim25, "EVCAdmissionFailedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedCPUFeaturesForMode,
    :schema_name => XSD::QName.new(NsVim25, "EVCAdmissionFailedCPUFeaturesForModeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedCPUModel,
    :schema_name => XSD::QName.new(NsVim25, "EVCAdmissionFailedCPUModelFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedCPUModelForMode,
    :schema_name => XSD::QName.new(NsVim25, "EVCAdmissionFailedCPUModelForModeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["currentEVCModeKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedCPUVendor,
    :schema_name => XSD::QName.new(NsVim25, "EVCAdmissionFailedCPUVendorFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["clusterCPUVendor", "SOAP::SOAPString"],
      ["hostCPUVendor", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedCPUVendorUnknown,
    :schema_name => XSD::QName.new(NsVim25, "EVCAdmissionFailedCPUVendorUnknownFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedHostDisconnected,
    :schema_name => XSD::QName.new(NsVim25, "EVCAdmissionFailedHostDisconnectedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedHostSoftware,
    :schema_name => XSD::QName.new(NsVim25, "EVCAdmissionFailedHostSoftwareFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedHostSoftwareForMode,
    :schema_name => XSD::QName.new(NsVim25, "EVCAdmissionFailedHostSoftwareForModeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EVCAdmissionFailedVmActive,
    :schema_name => XSD::QName.new(NsVim25, "EVCAdmissionFailedVmActiveFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EightHostLimitViolated,
    :schema_name => XSD::QName.new(NsVim25, "EightHostLimitViolatedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExpiredAddonLicense,
    :schema_name => XSD::QName.new(NsVim25, "ExpiredAddonLicenseFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExpiredEditionLicense,
    :schema_name => XSD::QName.new(NsVim25, "ExpiredEditionLicenseFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExpiredFeatureLicense,
    :schema_name => XSD::QName.new(NsVim25, "ExpiredFeatureLicenseFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"],
      ["count", "SOAP::SOAPInt"],
      ["expirationDate", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtendedFault,
    :schema_name => XSD::QName.new(NsVim25, "ExtendedFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["faultTypeId", "SOAP::SOAPString"],
      ["data", "VSphereCloud::KeyValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FailToLockFaultToleranceVMs,
    :schema_name => XSD::QName.new(NsVim25, "FailToLockFaultToleranceVMsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["alreadyLockedVm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultToleranceAntiAffinityViolated,
    :schema_name => XSD::QName.new(NsVim25, "FaultToleranceAntiAffinityViolatedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultToleranceCannotEditMem,
    :schema_name => XSD::QName.new(NsVim25, "FaultToleranceCannotEditMemFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["vm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultToleranceCpuIncompatible,
    :schema_name => XSD::QName.new(NsVim25, "FaultToleranceCpuIncompatibleFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["level", "SOAP::SOAPInt"],
      ["registerName", "SOAP::SOAPString"],
      ["registerBits", "SOAP::SOAPString", [0, 1]],
      ["desiredBits", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["model", "SOAP::SOAPBoolean"],
      ["family", "SOAP::SOAPBoolean"],
      ["stepping", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultToleranceNeedsThickDisk,
    :schema_name => XSD::QName.new(NsVim25, "FaultToleranceNeedsThickDiskFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultToleranceNotLicensed,
    :schema_name => XSD::QName.new(NsVim25, "FaultToleranceNotLicensedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultToleranceNotSameBuild,
    :schema_name => XSD::QName.new(NsVim25, "FaultToleranceNotSameBuildFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["build", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FaultTolerancePrimaryPowerOnNotAttempted,
    :schema_name => XSD::QName.new(NsVim25, "FaultTolerancePrimaryPowerOnNotAttemptedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["secondaryVm", "VSphereCloud::ManagedObjectReference"],
      ["primaryVm", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileAlreadyExists,
    :schema_name => XSD::QName.new(NsVim25, "FileAlreadyExistsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileBackedPortNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "FileBackedPortNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileFault,
    :schema_name => XSD::QName.new(NsVim25, "FileFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileLocked,
    :schema_name => XSD::QName.new(NsVim25, "FileLockedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileNotFound,
    :schema_name => XSD::QName.new(NsVim25, "FileNotFoundFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileNotWritable,
    :schema_name => XSD::QName.new(NsVim25, "FileNotWritableFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FileTooLarge,
    :schema_name => XSD::QName.new(NsVim25, "FileTooLargeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"],
      ["datastore", "SOAP::SOAPString"],
      ["fileSize", "SOAP::SOAPLong"],
      ["maxFileSize", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FilesystemQuiesceFault,
    :schema_name => XSD::QName.new(NsVim25, "FilesystemQuiesceFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FtIssuesOnHost,
    :schema_name => XSD::QName.new(NsVim25, "FtIssuesOnHostFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["hostName", "SOAP::SOAPString"],
      ["errors", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FullStorageVMotionNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "FullStorageVMotionNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GenericDrsFault,
    :schema_name => XSD::QName.new(NsVim25, "GenericDrsFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostFaults", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GenericVmConfigFault,
    :schema_name => XSD::QName.new(NsVim25, "GenericVmConfigFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HAErrorsAtDest,
    :schema_name => XSD::QName.new(NsVim25, "HAErrorsAtDestFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConfigFailed,
    :schema_name => XSD::QName.new(NsVim25, "HostConfigFailedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["failure", "VSphereCloud::LocalizedMethodFault[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConfigFault,
    :schema_name => XSD::QName.new(NsVim25, "HostConfigFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostConnectFault,
    :schema_name => XSD::QName.new(NsVim25, "HostConnectFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInDomain,
    :schema_name => XSD::QName.new(NsVim25, "HostInDomainFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIncompatibleForFaultTolerance,
    :schema_name => XSD::QName.new(NsVim25, "HostIncompatibleForFaultToleranceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostIncompatibleForRecordReplay,
    :schema_name => XSD::QName.new(NsVim25, "HostIncompatibleForRecordReplayFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostInventoryFull,
    :schema_name => XSD::QName.new(NsVim25, "HostInventoryFullFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["capacity", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostPowerOpFailed,
    :schema_name => XSD::QName.new(NsVim25, "HostPowerOpFailedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HotSnapshotMoveNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "HotSnapshotMoveNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IDEDiskNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "IDEDiskNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["disk", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IORMNotSupportedHostOnDatastore,
    :schema_name => XSD::QName.new(NsVim25, "IORMNotSupportedHostOnDatastoreFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["datastoreName", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InUseFeatureManipulationDisallowed,
    :schema_name => XSD::QName.new(NsVim25, "InUseFeatureManipulationDisallowedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InaccessibleDatastore,
    :schema_name => XSD::QName.new(NsVim25, "InaccessibleDatastoreFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IncompatibleDefaultDevice,
    :schema_name => XSD::QName.new(NsVim25, "IncompatibleDefaultDeviceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IncompatibleHostForFtSecondary,
    :schema_name => XSD::QName.new(NsVim25, "IncompatibleHostForFtSecondaryFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IncompatibleSetting,
    :schema_name => XSD::QName.new(NsVim25, "IncompatibleSettingFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["conflictingProperty", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IncorrectFileType,
    :schema_name => XSD::QName.new(NsVim25, "IncorrectFileTypeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IncorrectHostInformation,
    :schema_name => XSD::QName.new(NsVim25, "IncorrectHostInformationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IndependentDiskVMotionNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "IndependentDiskVMotionNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientCpuResourcesFault,
    :schema_name => XSD::QName.new(NsVim25, "InsufficientCpuResourcesFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientFailoverResourcesFault,
    :schema_name => XSD::QName.new(NsVim25, "InsufficientFailoverResourcesFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientHostCapacityFault,
    :schema_name => XSD::QName.new(NsVim25, "InsufficientHostCapacityFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientHostCpuCapacityFault,
    :schema_name => XSD::QName.new(NsVim25, "InsufficientHostCpuCapacityFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientHostMemoryCapacityFault,
    :schema_name => XSD::QName.new(NsVim25, "InsufficientHostMemoryCapacityFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientMemoryResourcesFault,
    :schema_name => XSD::QName.new(NsVim25, "InsufficientMemoryResourcesFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["unreserved", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientPerCpuCapacity,
    :schema_name => XSD::QName.new(NsVim25, "InsufficientPerCpuCapacityFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientResourcesFault,
    :schema_name => XSD::QName.new(NsVim25, "InsufficientResourcesFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientStandbyCpuResource,
    :schema_name => XSD::QName.new(NsVim25, "InsufficientStandbyCpuResourceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["available", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientStandbyMemoryResource,
    :schema_name => XSD::QName.new(NsVim25, "InsufficientStandbyMemoryResourceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["available", "SOAP::SOAPLong"],
      ["requested", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InsufficientStandbyResource,
    :schema_name => XSD::QName.new(NsVim25, "InsufficientStandbyResourceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidAffinitySettingFault,
    :schema_name => XSD::QName.new(NsVim25, "InvalidAffinitySettingFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidBmcRole,
    :schema_name => XSD::QName.new(NsVim25, "InvalidBmcRoleFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidBundle,
    :schema_name => XSD::QName.new(NsVim25, "InvalidBundleFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidClientCertificate,
    :schema_name => XSD::QName.new(NsVim25, "InvalidClientCertificateFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidController,
    :schema_name => XSD::QName.new(NsVim25, "InvalidControllerFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["controllerKey", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDasRestartPriorityForFtVm,
    :schema_name => XSD::QName.new(NsVim25, "InvalidDasRestartPriorityForFtVmFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDatastore,
    :schema_name => XSD::QName.new(NsVim25, "InvalidDatastoreFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDatastorePath,
    :schema_name => XSD::QName.new(NsVim25, "InvalidDatastorePathFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["datastorePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDeviceBacking,
    :schema_name => XSD::QName.new(NsVim25, "InvalidDeviceBackingFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDeviceOperation,
    :schema_name => XSD::QName.new(NsVim25, "InvalidDeviceOperationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"],
      ["badOp", "VSphereCloud::VirtualDeviceConfigSpecOperation", [0, 1]],
      ["badFileOp", "VSphereCloud::VirtualDeviceConfigSpecFileOperation", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDeviceSpec,
    :schema_name => XSD::QName.new(NsVim25, "InvalidDeviceSpecFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDiskFormat,
    :schema_name => XSD::QName.new(NsVim25, "InvalidDiskFormatFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidDrsBehaviorForFtVm,
    :schema_name => XSD::QName.new(NsVim25, "InvalidDrsBehaviorForFtVmFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidEditionLicense,
    :schema_name => XSD::QName.new(NsVim25, "InvalidEditionLicenseFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["feature", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidEvent,
    :schema_name => XSD::QName.new(NsVim25, "InvalidEventFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidFolder,
    :schema_name => XSD::QName.new(NsVim25, "InvalidFolderFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["target", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidFormat,
    :schema_name => XSD::QName.new(NsVim25, "InvalidFormatFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidHostName,
    :schema_name => XSD::QName.new(NsVim25, "InvalidHostNameFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidHostState,
    :schema_name => XSD::QName.new(NsVim25, "InvalidHostStateFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidIndexArgument,
    :schema_name => XSD::QName.new(NsVim25, "InvalidIndexArgumentFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidIpmiLoginInfo,
    :schema_name => XSD::QName.new(NsVim25, "InvalidIpmiLoginInfoFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidIpmiMacAddress,
    :schema_name => XSD::QName.new(NsVim25, "InvalidIpmiMacAddressFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["userProvidedMacAddress", "SOAP::SOAPString"],
      ["observedMacAddress", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidLicense,
    :schema_name => XSD::QName.new(NsVim25, "InvalidLicenseFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["licenseContent", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidLocale,
    :schema_name => XSD::QName.new(NsVim25, "InvalidLocaleFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidLogin,
    :schema_name => XSD::QName.new(NsVim25, "InvalidLoginFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidName,
    :schema_name => XSD::QName.new(NsVim25, "InvalidNameFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidNasCredentials,
    :schema_name => XSD::QName.new(NsVim25, "InvalidNasCredentialsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidNetworkInType,
    :schema_name => XSD::QName.new(NsVim25, "InvalidNetworkInTypeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidNetworkResource,
    :schema_name => XSD::QName.new(NsVim25, "InvalidNetworkResourceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidOperationOnSecondaryVm,
    :schema_name => XSD::QName.new(NsVim25, "InvalidOperationOnSecondaryVmFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidPowerState,
    :schema_name => XSD::QName.new(NsVim25, "InvalidPowerStateFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["requestedState", "VSphereCloud::VirtualMachinePowerState", [0, 1]],
      ["existingState", "VSphereCloud::VirtualMachinePowerState"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidPrivilege,
    :schema_name => XSD::QName.new(NsVim25, "InvalidPrivilegeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["privilege", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidPropertyType,
    :schema_name => XSD::QName.new(NsVim25, "InvalidPropertyTypeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidPropertyValue,
    :schema_name => XSD::QName.new(NsVim25, "InvalidPropertyValueFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidResourcePoolStructureFault,
    :schema_name => XSD::QName.new(NsVim25, "InvalidResourcePoolStructureFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidSnapshotFormat,
    :schema_name => XSD::QName.new(NsVim25, "InvalidSnapshotFormatFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidState,
    :schema_name => XSD::QName.new(NsVim25, "InvalidStateFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidVmConfig,
    :schema_name => XSD::QName.new(NsVim25, "InvalidVmConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InventoryHasStandardAloneHosts,
    :schema_name => XSD::QName.new(NsVim25, "InventoryHasStandardAloneHostsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hosts", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::IpHostnameGeneratorError,
    :schema_name => XSD::QName.new(NsVim25, "IpHostnameGeneratorErrorFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LegacyNetworkInterfaceInUse,
    :schema_name => XSD::QName.new(NsVim25, "LegacyNetworkInterfaceInUseFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseAssignmentFailed,
    :schema_name => XSD::QName.new(NsVim25, "LicenseAssignmentFailedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseDowngradeDisallowed,
    :schema_name => XSD::QName.new(NsVim25, "LicenseDowngradeDisallowedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["edition", "SOAP::SOAPString"],
      ["entityId", "SOAP::SOAPString"],
      ["features", "VSphereCloud::KeyAnyValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseEntityNotFound,
    :schema_name => XSD::QName.new(NsVim25, "LicenseEntityNotFoundFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["entityId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseExpired,
    :schema_name => XSD::QName.new(NsVim25, "LicenseExpiredFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["licenseKey", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseKeyEntityMismatch,
    :schema_name => XSD::QName.new(NsVim25, "LicenseKeyEntityMismatchFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseRestricted,
    :schema_name => XSD::QName.new(NsVim25, "LicenseRestrictedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseServerUnavailable,
    :schema_name => XSD::QName.new(NsVim25, "LicenseServerUnavailableFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["licenseServer", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LicenseSourceUnavailable,
    :schema_name => XSD::QName.new(NsVim25, "LicenseSourceUnavailableFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["licenseSource", "VSphereCloud::LicenseSource"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LimitExceeded,
    :schema_name => XSD::QName.new(NsVim25, "LimitExceededFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["limit", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LinuxVolumeNotClean,
    :schema_name => XSD::QName.new(NsVim25, "LinuxVolumeNotCleanFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LogBundlingFailed,
    :schema_name => XSD::QName.new(NsVim25, "LogBundlingFailedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MaintenanceModeFileMove,
    :schema_name => XSD::QName.new(NsVim25, "MaintenanceModeFileMoveFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MemoryHotPlugNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "MemoryHotPlugNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MemorySizeNotRecommended,
    :schema_name => XSD::QName.new(NsVim25, "MemorySizeNotRecommendedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["memorySizeMB", "SOAP::SOAPInt"],
      ["minMemorySizeMB", "SOAP::SOAPInt"],
      ["maxMemorySizeMB", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MemorySizeNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "MemorySizeNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["memorySizeMB", "SOAP::SOAPInt"],
      ["minMemorySizeMB", "SOAP::SOAPInt"],
      ["maxMemorySizeMB", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MemorySnapshotOnIndependentDisk,
    :schema_name => XSD::QName.new(NsVim25, "MemorySnapshotOnIndependentDiskFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MethodAlreadyDisabledFault,
    :schema_name => XSD::QName.new(NsVim25, "MethodAlreadyDisabledFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["sourceId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MethodDisabled,
    :schema_name => XSD::QName.new(NsVim25, "MethodDisabledFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["source", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrationDisabled,
    :schema_name => XSD::QName.new(NsVim25, "MigrationDisabledFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrationFault,
    :schema_name => XSD::QName.new(NsVim25, "MigrationFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrationFeatureNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "MigrationFeatureNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MigrationNotReady,
    :schema_name => XSD::QName.new(NsVim25, "MigrationNotReadyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MismatchedBundle,
    :schema_name => XSD::QName.new(NsVim25, "MismatchedBundleFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["bundleUuid", "SOAP::SOAPString"],
      ["hostUuid", "SOAP::SOAPString"],
      ["bundleBuildNumber", "SOAP::SOAPInt"],
      ["hostBuildNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MismatchedNetworkPolicies,
    :schema_name => XSD::QName.new(NsVim25, "MismatchedNetworkPoliciesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MismatchedVMotionNetworkNames,
    :schema_name => XSD::QName.new(NsVim25, "MismatchedVMotionNetworkNamesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["sourceNetwork", "SOAP::SOAPString"],
      ["destNetwork", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingBmcSupport,
    :schema_name => XSD::QName.new(NsVim25, "MissingBmcSupportFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingController,
    :schema_name => XSD::QName.new(NsVim25, "MissingControllerFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["deviceIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingLinuxCustResources,
    :schema_name => XSD::QName.new(NsVim25, "MissingLinuxCustResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingNetworkIpConfig,
    :schema_name => XSD::QName.new(NsVim25, "MissingNetworkIpConfigFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingPowerOffConfiguration,
    :schema_name => XSD::QName.new(NsVim25, "MissingPowerOffConfigurationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingPowerOnConfiguration,
    :schema_name => XSD::QName.new(NsVim25, "MissingPowerOnConfigurationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MissingWindowsCustResources,
    :schema_name => XSD::QName.new(NsVim25, "MissingWindowsCustResourcesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MountError,
    :schema_name => XSD::QName.new(NsVim25, "MountErrorFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["diskIndex", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MultipleCertificatesVerifyFault,
    :schema_name => XSD::QName.new(NsVim25, "MultipleCertificatesVerifyFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["thumbprintData", "VSphereCloud::MultipleCertificatesVerifyFaultThumbprintData[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MultipleSnapshotsNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "MultipleSnapshotsNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NasConfigFault,
    :schema_name => XSD::QName.new(NsVim25, "NasConfigFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NasConnectionLimitReached,
    :schema_name => XSD::QName.new(NsVim25, "NasConnectionLimitReachedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NasSessionCredentialConflict,
    :schema_name => XSD::QName.new(NsVim25, "NasSessionCredentialConflictFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NasVolumeNotMounted,
    :schema_name => XSD::QName.new(NsVim25, "NasVolumeNotMountedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["remoteHost", "SOAP::SOAPString"],
      ["remotePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetworkCopyFault,
    :schema_name => XSD::QName.new(NsVim25, "NetworkCopyFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetworkInaccessible,
    :schema_name => XSD::QName.new(NsVim25, "NetworkInaccessibleFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NetworksMayNotBeTheSame,
    :schema_name => XSD::QName.new(NsVim25, "NetworksMayNotBeTheSameFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NicSettingMismatch,
    :schema_name => XSD::QName.new(NsVim25, "NicSettingMismatchFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["numberOfNicsInSpec", "SOAP::SOAPInt"],
      ["numberOfNicsInVM", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoActiveHostInCluster,
    :schema_name => XSD::QName.new(NsVim25, "NoActiveHostInClusterFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["computeResource", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoAvailableIp,
    :schema_name => XSD::QName.new(NsVim25, "NoAvailableIpFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["network", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoClientCertificate,
    :schema_name => XSD::QName.new(NsVim25, "NoClientCertificateFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoCompatibleHardAffinityHost,
    :schema_name => XSD::QName.new(NsVim25, "NoCompatibleHardAffinityHostFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoCompatibleHost,
    :schema_name => XSD::QName.new(NsVim25, "NoCompatibleHostFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoCompatibleHostWithAccessToDevice,
    :schema_name => XSD::QName.new(NsVim25, "NoCompatibleHostWithAccessToDeviceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["error", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoCompatibleSoftAffinityHost,
    :schema_name => XSD::QName.new(NsVim25, "NoCompatibleSoftAffinityHostFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoDiskFound,
    :schema_name => XSD::QName.new(NsVim25, "NoDiskFoundFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoDiskSpace,
    :schema_name => XSD::QName.new(NsVim25, "NoDiskSpaceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["file", "SOAP::SOAPString"],
      ["datastore", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoDisksToCustomize,
    :schema_name => XSD::QName.new(NsVim25, "NoDisksToCustomizeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoGateway,
    :schema_name => XSD::QName.new(NsVim25, "NoGatewayFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoGuestHeartbeat,
    :schema_name => XSD::QName.new(NsVim25, "NoGuestHeartbeatFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoHost,
    :schema_name => XSD::QName.new(NsVim25, "NoHostFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoHostSuitableForFtSecondary,
    :schema_name => XSD::QName.new(NsVim25, "NoHostSuitableForFtSecondaryFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoLicenseServerConfigured,
    :schema_name => XSD::QName.new(NsVim25, "NoLicenseServerConfiguredFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoPeerHostFound,
    :schema_name => XSD::QName.new(NsVim25, "NoPeerHostFoundFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoPermission,
    :schema_name => XSD::QName.new(NsVim25, "NoPermissionFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["object", "VSphereCloud::ManagedObjectReference"],
      ["privilegeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoPermissionOnAD,
    :schema_name => XSD::QName.new(NsVim25, "NoPermissionOnADFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoPermissionOnHost,
    :schema_name => XSD::QName.new(NsVim25, "NoPermissionOnHostFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoPermissionOnNasVolume,
    :schema_name => XSD::QName.new(NsVim25, "NoPermissionOnNasVolumeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoSubjectName,
    :schema_name => XSD::QName.new(NsVim25, "NoSubjectNameFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoVcManagedIpConfigured,
    :schema_name => XSD::QName.new(NsVim25, "NoVcManagedIpConfiguredFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoVirtualNic,
    :schema_name => XSD::QName.new(NsVim25, "NoVirtualNicFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NoVmInVApp,
    :schema_name => XSD::QName.new(NsVim25, "NoVmInVAppFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NonADUserRequired,
    :schema_name => XSD::QName.new(NsVim25, "NonADUserRequiredFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["errorCode", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NonHomeRDMVMotionNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "NonHomeRDMVMotionNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NonPersistentDisksNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "NonPersistentDisksNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotAuthenticated,
    :schema_name => XSD::QName.new(NsVim25, "NotAuthenticatedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["object", "VSphereCloud::ManagedObjectReference"],
      ["privilegeId", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotEnoughCpus,
    :schema_name => XSD::QName.new(NsVim25, "NotEnoughCpusFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["numCpuDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotEnoughLogicalCpus,
    :schema_name => XSD::QName.new(NsVim25, "NotEnoughLogicalCpusFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["numCpuDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotFound,
    :schema_name => XSD::QName.new(NsVim25, "NotFoundFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotSupportedDeviceForFT,
    :schema_name => XSD::QName.new(NsVim25, "NotSupportedDeviceForFTFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString", [0, 1]],
      ["deviceType", "SOAP::SOAPString"],
      ["deviceLabel", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotSupportedHost,
    :schema_name => XSD::QName.new(NsVim25, "NotSupportedHostFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotSupportedHostInCluster,
    :schema_name => XSD::QName.new(NsVim25, "NotSupportedHostInClusterFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotSupportedHostInDvs,
    :schema_name => XSD::QName.new(NsVim25, "NotSupportedHostInDvsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["productName", "SOAP::SOAPString", [0, 1]],
      ["productVersion", "SOAP::SOAPString", [0, 1]],
      ["switchProductSpec", "VSphereCloud::DistributedVirtualSwitchProductSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotUserConfigurableProperty,
    :schema_name => XSD::QName.new(NsVim25, "NotUserConfigurablePropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NumVirtualCpusExceedsLimit,
    :schema_name => XSD::QName.new(NsVim25, "NumVirtualCpusExceedsLimitFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["maxSupportedVcpus", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NumVirtualCpusIncompatible,
    :schema_name => XSD::QName.new(NsVim25, "NumVirtualCpusIncompatibleFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"],
      ["numCpu", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NumVirtualCpusNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "NumVirtualCpusNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["maxSupportedVcpusDest", "SOAP::SOAPInt"],
      ["numCpuVm", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OutOfBounds,
    :schema_name => XSD::QName.new(NsVim25, "OutOfBoundsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["argumentName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfAttribute,
    :schema_name => XSD::QName.new(NsVim25, "OvfAttributeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfConnectedDevice,
    :schema_name => XSD::QName.new(NsVim25, "OvfConnectedDeviceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfConnectedDeviceFloppy,
    :schema_name => XSD::QName.new(NsVim25, "OvfConnectedDeviceFloppyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfConnectedDeviceIso,
    :schema_name => XSD::QName.new(NsVim25, "OvfConnectedDeviceIsoFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["filename", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfConstraint,
    :schema_name => XSD::QName.new(NsVim25, "OvfConstraintFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfDiskMappingNotFound,
    :schema_name => XSD::QName.new(NsVim25, "OvfDiskMappingNotFoundFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["diskName", "SOAP::SOAPString"],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfDiskOrderConstraint,
    :schema_name => XSD::QName.new(NsVim25, "OvfDiskOrderConstraintFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfDuplicateElement,
    :schema_name => XSD::QName.new(NsVim25, "OvfDuplicateElementFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfDuplicatedElementBoundary,
    :schema_name => XSD::QName.new(NsVim25, "OvfDuplicatedElementBoundaryFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["boundary", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfElement,
    :schema_name => XSD::QName.new(NsVim25, "OvfElementFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfElementInvalidValue,
    :schema_name => XSD::QName.new(NsVim25, "OvfElementInvalidValueFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfExport,
    :schema_name => XSD::QName.new(NsVim25, "OvfExportFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfExportFailed,
    :schema_name => XSD::QName.new(NsVim25, "OvfExportFailedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfFault,
    :schema_name => XSD::QName.new(NsVim25, "OvfFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfHardwareCheck,
    :schema_name => XSD::QName.new(NsVim25, "OvfHardwareCheckFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfHardwareExport,
    :schema_name => XSD::QName.new(NsVim25, "OvfHardwareExportFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfHostResourceConstraint,
    :schema_name => XSD::QName.new(NsVim25, "OvfHostResourceConstraintFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfHostValueNotParsed,
    :schema_name => XSD::QName.new(NsVim25, "OvfHostValueNotParsedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfImport,
    :schema_name => XSD::QName.new(NsVim25, "OvfImportFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfImportFailed,
    :schema_name => XSD::QName.new(NsVim25, "OvfImportFailedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInternalError,
    :schema_name => XSD::QName.new(NsVim25, "OvfInternalErrorFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInvalidPackage,
    :schema_name => XSD::QName.new(NsVim25, "OvfInvalidPackageFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInvalidValue,
    :schema_name => XSD::QName.new(NsVim25, "OvfInvalidValueFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInvalidValueConfiguration,
    :schema_name => XSD::QName.new(NsVim25, "OvfInvalidValueConfigurationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInvalidValueEmpty,
    :schema_name => XSD::QName.new(NsVim25, "OvfInvalidValueEmptyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInvalidValueFormatMalformed,
    :schema_name => XSD::QName.new(NsVim25, "OvfInvalidValueFormatMalformedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInvalidValueReference,
    :schema_name => XSD::QName.new(NsVim25, "OvfInvalidValueReferenceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfInvalidVmName,
    :schema_name => XSD::QName.new(NsVim25, "OvfInvalidVmNameFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfMappedOsId,
    :schema_name => XSD::QName.new(NsVim25, "OvfMappedOsIdFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["ovfId", "SOAP::SOAPInt"],
      ["ovfDescription", "SOAP::SOAPString"],
      ["targetDescription", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfMissingAttribute,
    :schema_name => XSD::QName.new(NsVim25, "OvfMissingAttributeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfMissingElement,
    :schema_name => XSD::QName.new(NsVim25, "OvfMissingElementFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfMissingElementNormalBoundary,
    :schema_name => XSD::QName.new(NsVim25, "OvfMissingElementNormalBoundaryFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"],
      ["boundary", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfMissingHardware,
    :schema_name => XSD::QName.new(NsVim25, "OvfMissingHardwareFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"],
      ["resourceType", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfNoHostNic,
    :schema_name => XSD::QName.new(NsVim25, "OvfNoHostNicFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfNoSupportedHardwareFamily,
    :schema_name => XSD::QName.new(NsVim25, "OvfNoSupportedHardwareFamilyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["version", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfProperty,
    :schema_name => XSD::QName.new(NsVim25, "OvfPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfPropertyExport,
    :schema_name => XSD::QName.new(NsVim25, "OvfPropertyExportFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfPropertyNetwork,
    :schema_name => XSD::QName.new(NsVim25, "OvfPropertyNetworkFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfPropertyQualifier,
    :schema_name => XSD::QName.new(NsVim25, "OvfPropertyQualifierFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfPropertyQualifierDuplicate,
    :schema_name => XSD::QName.new(NsVim25, "OvfPropertyQualifierDuplicateFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfPropertyQualifierIgnored,
    :schema_name => XSD::QName.new(NsVim25, "OvfPropertyQualifierIgnoredFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"],
      ["qualifier", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfPropertyType,
    :schema_name => XSD::QName.new(NsVim25, "OvfPropertyTypeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfPropertyValue,
    :schema_name => XSD::QName.new(NsVim25, "OvfPropertyValueFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfSystemFault,
    :schema_name => XSD::QName.new(NsVim25, "OvfSystemFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfToXmlUnsupportedElement,
    :schema_name => XSD::QName.new(NsVim25, "OvfToXmlUnsupportedElementFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnableToExportDisk,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnableToExportDiskFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["diskName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnexpectedElement,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnexpectedElementFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnknownDevice,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnknownDeviceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnknownDeviceBacking,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnknownDeviceBackingFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"],
      ["backing", "VSphereCloud::VirtualDeviceBackingInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnknownEntity,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnknownEntityFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedAttribute,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnsupportedAttributeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedAttributeValue,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnsupportedAttributeValueFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["attributeName", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedDeviceBackingInfo,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnsupportedDeviceBackingInfoFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["elementName", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"],
      ["backingName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedDeviceBackingOption,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnsupportedDeviceBackingOptionFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["elementName", "SOAP::SOAPString", [0, 1]],
      ["instanceId", "SOAP::SOAPString", [0, 1]],
      ["deviceName", "SOAP::SOAPString"],
      ["backingName", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedDeviceExport,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnsupportedDeviceExportFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "VSphereCloud::VirtualDevice", [0, 1]],
      ["vmPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedDiskProvisioning,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnsupportedDiskProvisioningFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["diskProvisioning", "SOAP::SOAPString"],
      ["supportedDiskProvisioning", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedElement,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnsupportedElementFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedElementValue,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnsupportedElementValueFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedPackage,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnsupportedPackageFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedSection,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnsupportedSectionFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["info", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedSubType,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnsupportedSubTypeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["elementName", "SOAP::SOAPString"],
      ["instanceId", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPInt"],
      ["deviceSubType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfUnsupportedType,
    :schema_name => XSD::QName.new(NsVim25, "OvfUnsupportedTypeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt", [0, 1]],
      ["name", "SOAP::SOAPString"],
      ["instanceId", "SOAP::SOAPString"],
      ["deviceType", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfWrongElement,
    :schema_name => XSD::QName.new(NsVim25, "OvfWrongElementFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfWrongNamespace,
    :schema_name => XSD::QName.new(NsVim25, "OvfWrongNamespaceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["namespaceName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OvfXmlFormat,
    :schema_name => XSD::QName.new(NsVim25, "OvfXmlFormatFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["lineNumber", "SOAP::SOAPInt"],
      ["description", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchAlreadyInstalled,
    :schema_name => XSD::QName.new(NsVim25, "PatchAlreadyInstalledFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchBinariesNotFound,
    :schema_name => XSD::QName.new(NsVim25, "PatchBinariesNotFoundFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["binary", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchInstallFailed,
    :schema_name => XSD::QName.new(NsVim25, "PatchInstallFailedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"],
      ["rolledBack", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchIntegrityError,
    :schema_name => XSD::QName.new(NsVim25, "PatchIntegrityErrorFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchMetadataCorrupted,
    :schema_name => XSD::QName.new(NsVim25, "PatchMetadataCorruptedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchMetadataInvalid,
    :schema_name => XSD::QName.new(NsVim25, "PatchMetadataInvalidFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchMetadataNotFound,
    :schema_name => XSD::QName.new(NsVim25, "PatchMetadataNotFoundFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["metaData", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchMissingDependencies,
    :schema_name => XSD::QName.new(NsVim25, "PatchMissingDependenciesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["prerequisitePatch", "SOAP::SOAPString[]", [0, nil]],
      ["prerequisiteLib", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchNotApplicable,
    :schema_name => XSD::QName.new(NsVim25, "PatchNotApplicableFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PatchSuperseded,
    :schema_name => XSD::QName.new(NsVim25, "PatchSupersededFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patchID", "SOAP::SOAPString"],
      ["supersede", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PhysCompatRDMNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "PhysCompatRDMNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PlatformConfigFault,
    :schema_name => XSD::QName.new(NsVim25, "PlatformConfigFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOnFtSecondaryFailed,
    :schema_name => XSD::QName.new(NsVim25, "PowerOnFtSecondaryFailedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"],
      ["hostSelectionBy", "VSphereCloud::FtIssuesOnHostHostSelectionType"],
      ["hostErrors", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["rootCause", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::PowerOnFtSecondaryTimedout,
    :schema_name => XSD::QName.new(NsVim25, "PowerOnFtSecondaryTimedoutFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["vmName", "SOAP::SOAPString"],
      ["timeout", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ProfileUpdateFailed,
    :schema_name => XSD::QName.new(NsVim25, "ProfileUpdateFailedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["failure", "VSphereCloud::ProfileUpdateFailedUpdateFailure[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QuestionPending,
    :schema_name => XSD::QName.new(NsVim25, "QuestionPendingFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["text", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RDMConversionNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "RDMConversionNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RDMNotPreserved,
    :schema_name => XSD::QName.new(NsVim25, "RDMNotPreservedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RDMNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "RDMNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RDMNotSupportedOnDatastore,
    :schema_name => XSD::QName.new(NsVim25, "RDMNotSupportedOnDatastoreFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["datastoreName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RDMPointsToInaccessibleDisk,
    :schema_name => XSD::QName.new(NsVim25, "RDMPointsToInaccessibleDiskFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RawDiskNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "RawDiskNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReadOnlyDisksWithLegacyDestination,
    :schema_name => XSD::QName.new(NsVim25, "ReadOnlyDisksWithLegacyDestinationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["roDiskCount", "SOAP::SOAPInt"],
      ["timeoutDanger", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RebootRequired,
    :schema_name => XSD::QName.new(NsVim25, "RebootRequiredFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["patch", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RecordReplayDisabled,
    :schema_name => XSD::QName.new(NsVim25, "RecordReplayDisabledFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoteDeviceNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "RemoteDeviceNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveFailed,
    :schema_name => XSD::QName.new(NsVim25, "RemoveFailedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourceInUse,
    :schema_name => XSD::QName.new(NsVim25, "ResourceInUseFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["type", "SOAP::SOAPString", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResourceNotAvailable,
    :schema_name => XSD::QName.new(NsVim25, "ResourceNotAvailableFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["containerType", "SOAP::SOAPString", [0, 1]],
      ["containerName", "SOAP::SOAPString", [0, 1]],
      ["type", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RestrictedVersion,
    :schema_name => XSD::QName.new(NsVim25, "RestrictedVersionFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RuleViolation,
    :schema_name => XSD::QName.new(NsVim25, "RuleViolationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["rule", "VSphereCloud::ClusterRuleInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SSLDisabledFault,
    :schema_name => XSD::QName.new(NsVim25, "SSLDisabledFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SSLVerifyFault,
    :schema_name => XSD::QName.new(NsVim25, "SSLVerifyFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["selfSigned", "SOAP::SOAPBoolean"],
      ["thumbprint", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SSPIChallenge,
    :schema_name => XSD::QName.new(NsVim25, "SSPIChallengeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["base64Token", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SecondaryVmAlreadyDisabled,
    :schema_name => XSD::QName.new(NsVim25, "SecondaryVmAlreadyDisabledFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SecondaryVmAlreadyEnabled,
    :schema_name => XSD::QName.new(NsVim25, "SecondaryVmAlreadyEnabledFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SecondaryVmAlreadyRegistered,
    :schema_name => XSD::QName.new(NsVim25, "SecondaryVmAlreadyRegisteredFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SecondaryVmNotRegistered,
    :schema_name => XSD::QName.new(NsVim25, "SecondaryVmNotRegisteredFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["instanceUuid", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SharedBusControllerNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "SharedBusControllerNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotCloneNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "SnapshotCloneNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotCopyNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "SnapshotCopyNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotDisabled,
    :schema_name => XSD::QName.new(NsVim25, "SnapshotDisabledFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotFault,
    :schema_name => XSD::QName.new(NsVim25, "SnapshotFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotIncompatibleDeviceInVm,
    :schema_name => XSD::QName.new(NsVim25, "SnapshotIncompatibleDeviceInVmFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["fault", "VSphereCloud::LocalizedMethodFault"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotLocked,
    :schema_name => XSD::QName.new(NsVim25, "SnapshotLockedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotMoveFromNonHomeNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "SnapshotMoveFromNonHomeNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotMoveNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "SnapshotMoveNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotMoveToNonHomeNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "SnapshotMoveToNonHomeNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotNoChange,
    :schema_name => XSD::QName.new(NsVim25, "SnapshotNoChangeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SnapshotRevertIssue,
    :schema_name => XSD::QName.new(NsVim25, "SnapshotRevertIssueFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["snapshotName", "SOAP::SOAPString", [0, 1]],
      ["event", "VSphereCloud::Event[]", [0, nil]],
      ["errors", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SoftRuleVioCorrectionDisallowed,
    :schema_name => XSD::QName.new(NsVim25, "SoftRuleVioCorrectionDisallowedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SoftRuleVioCorrectionImpact,
    :schema_name => XSD::QName.new(NsVim25, "SoftRuleVioCorrectionImpactFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StorageVMotionNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "StorageVMotionNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SuspendedRelocateNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "SuspendedRelocateNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SwapDatastoreNotWritableOnHost,
    :schema_name => XSD::QName.new(NsVim25, "SwapDatastoreNotWritableOnHostFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SwapDatastoreUnset,
    :schema_name => XSD::QName.new(NsVim25, "SwapDatastoreUnsetFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SwapPlacementOverrideNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "SwapPlacementOverrideNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SwitchNotInUpgradeMode,
    :schema_name => XSD::QName.new(NsVim25, "SwitchNotInUpgradeModeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TaskInProgress,
    :schema_name => XSD::QName.new(NsVim25, "TaskInProgressFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["task", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::Timedout,
    :schema_name => XSD::QName.new(NsVim25, "TimedoutFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TooManyConsecutiveOverrides,
    :schema_name => XSD::QName.new(NsVim25, "TooManyConsecutiveOverridesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TooManyDevices,
    :schema_name => XSD::QName.new(NsVim25, "TooManyDevicesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TooManyDisksOnLegacyHost,
    :schema_name => XSD::QName.new(NsVim25, "TooManyDisksOnLegacyHostFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["diskCount", "SOAP::SOAPInt"],
      ["timeoutDanger", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TooManyHosts,
    :schema_name => XSD::QName.new(NsVim25, "TooManyHostsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::TooManySnapshotLevels,
    :schema_name => XSD::QName.new(NsVim25, "TooManySnapshotLevelsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ToolsAlreadyUpgraded,
    :schema_name => XSD::QName.new(NsVim25, "ToolsAlreadyUpgradedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ToolsAutoUpgradeNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "ToolsAutoUpgradeNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ToolsImageNotAvailable,
    :schema_name => XSD::QName.new(NsVim25, "ToolsImageNotAvailableFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ToolsImageSignatureCheckFailed,
    :schema_name => XSD::QName.new(NsVim25, "ToolsImageSignatureCheckFailedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ToolsInstallationInProgress,
    :schema_name => XSD::QName.new(NsVim25, "ToolsInstallationInProgressFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ToolsUnavailable,
    :schema_name => XSD::QName.new(NsVim25, "ToolsUnavailableFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ToolsUpgradeCancelled,
    :schema_name => XSD::QName.new(NsVim25, "ToolsUpgradeCancelledFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UncommittedUndoableDisk,
    :schema_name => XSD::QName.new(NsVim25, "UncommittedUndoableDiskFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnconfiguredPropertyValue,
    :schema_name => XSD::QName.new(NsVim25, "UnconfiguredPropertyValueFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UncustomizableGuest,
    :schema_name => XSD::QName.new(NsVim25, "UncustomizableGuestFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["uncustomizableGuestOS", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnexpectedCustomizationFault,
    :schema_name => XSD::QName.new(NsVim25, "UnexpectedCustomizationFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnrecognizedHost,
    :schema_name => XSD::QName.new(NsVim25, "UnrecognizedHostFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnsharedSwapVMotionNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "UnsharedSwapVMotionNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHostName", "SOAP::SOAPString"],
      ["failedHost", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnsupportedDatastore,
    :schema_name => XSD::QName.new(NsVim25, "UnsupportedDatastoreFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnsupportedGuest,
    :schema_name => XSD::QName.new(NsVim25, "UnsupportedGuestFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["unsupportedGuestOS", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnsupportedVimApiVersion,
    :schema_name => XSD::QName.new(NsVim25, "UnsupportedVimApiVersionFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnsupportedVmxLocation,
    :schema_name => XSD::QName.new(NsVim25, "UnsupportedVmxLocationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnusedVirtualDiskBlocksNotScrubbed,
    :schema_name => XSD::QName.new(NsVim25, "UnusedVirtualDiskBlocksNotScrubbedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UserNotFound,
    :schema_name => XSD::QName.new(NsVim25, "UserNotFoundFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["principal", "SOAP::SOAPString"],
      ["unresolved", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppConfigFault,
    :schema_name => XSD::QName.new(NsVim25, "VAppConfigFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppNotRunning,
    :schema_name => XSD::QName.new(NsVim25, "VAppNotRunningFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppPropertyFault,
    :schema_name => XSD::QName.new(NsVim25, "VAppPropertyFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["id", "SOAP::SOAPString"],
      ["category", "SOAP::SOAPString"],
      ["label", "SOAP::SOAPString"],
      ["type", "SOAP::SOAPString"],
      ["value", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VAppTaskInProgress,
    :schema_name => XSD::QName.new(NsVim25, "VAppTaskInProgressFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["task", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMINotSupported,
    :schema_name => XSD::QName.new(NsVim25, "VMINotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMOnConflictDVPort,
    :schema_name => XSD::QName.new(NsVim25, "VMOnConflictDVPortFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMOnVirtualIntranet,
    :schema_name => XSD::QName.new(NsVim25, "VMOnVirtualIntranetFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["backing", "SOAP::SOAPString"],
      ["connected", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionInterfaceIssue,
    :schema_name => XSD::QName.new(NsVim25, "VMotionInterfaceIssueFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionLinkCapacityLow,
    :schema_name => XSD::QName.new(NsVim25, "VMotionLinkCapacityLowFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionLinkDown,
    :schema_name => XSD::QName.new(NsVim25, "VMotionLinkDownFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["network", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionNotConfigured,
    :schema_name => XSD::QName.new(NsVim25, "VMotionNotConfiguredFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionNotLicensed,
    :schema_name => XSD::QName.new(NsVim25, "VMotionNotLicensedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "VMotionNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["atSourceHost", "SOAP::SOAPBoolean"],
      ["failedHost", "SOAP::SOAPString"],
      ["failedHostEntity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VMotionProtocolIncompatible,
    :schema_name => XSD::QName.new(NsVim25, "VMotionProtocolIncompatibleFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VimFault,
    :schema_name => XSD::QName.new(NsVim25, "VimFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskBlocksNotFullyProvisioned,
    :schema_name => XSD::QName.new(NsVim25, "VirtualDiskBlocksNotFullyProvisionedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["backing", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualDiskModeNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "VirtualDiskModeNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["mode", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualEthernetCardNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "VirtualEthernetCardNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["reason", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualHardwareCompatibilityIssue,
    :schema_name => XSD::QName.new(NsVim25, "VirtualHardwareCompatibilityIssueFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VirtualHardwareVersionNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "VirtualHardwareVersionNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString"],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmAlreadyExistsInDatacenter,
    :schema_name => XSD::QName.new(NsVim25, "VmAlreadyExistsInDatacenterFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["target", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["hostname", "SOAP::SOAPString"],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmConfigFault,
    :schema_name => XSD::QName.new(NsVim25, "VmConfigFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmConfigIncompatibleForFaultTolerance,
    :schema_name => XSD::QName.new(NsVim25, "VmConfigIncompatibleForFaultToleranceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmConfigIncompatibleForRecordReplay,
    :schema_name => XSD::QName.new(NsVim25, "VmConfigIncompatibleForRecordReplayFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceConfigIssue,
    :schema_name => XSD::QName.new(NsVim25, "VmFaultToleranceConfigIssueFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString", [0, 1]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceConfigIssueWrapper,
    :schema_name => XSD::QName.new(NsVim25, "VmFaultToleranceConfigIssueWrapperFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["entityName", "SOAP::SOAPString", [0, 1]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["error", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceInvalidFileBacking,
    :schema_name => XSD::QName.new(NsVim25, "VmFaultToleranceInvalidFileBackingFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["backingType", "SOAP::SOAPString", [0, 1]],
      ["backingFilename", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceIssue,
    :schema_name => XSD::QName.new(NsVim25, "VmFaultToleranceIssueFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceOpIssuesList,
    :schema_name => XSD::QName.new(NsVim25, "VmFaultToleranceOpIssuesListFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["errors", "VSphereCloud::LocalizedMethodFault[]", [0, nil]],
      ["warnings", "VSphereCloud::LocalizedMethodFault[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmFaultToleranceTooManyVMsOnHost,
    :schema_name => XSD::QName.new(NsVim25, "VmFaultToleranceTooManyVMsOnHostFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["hostName", "SOAP::SOAPString", [0, 1]],
      ["maxNumFtVms", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmHostAffinityRuleViolation,
    :schema_name => XSD::QName.new(NsVim25, "VmHostAffinityRuleViolationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["vmName", "SOAP::SOAPString"],
      ["hostName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmLimitLicense,
    :schema_name => XSD::QName.new(NsVim25, "VmLimitLicenseFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["limit", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmMonitorIncompatibleForFaultTolerance,
    :schema_name => XSD::QName.new(NsVim25, "VmMonitorIncompatibleForFaultToleranceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmPowerOnDisabled,
    :schema_name => XSD::QName.new(NsVim25, "VmPowerOnDisabledFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmToolsUpgradeFault,
    :schema_name => XSD::QName.new(NsVim25, "VmToolsUpgradeFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmValidateMaxDevice,
    :schema_name => XSD::QName.new(NsVim25, "VmValidateMaxDeviceFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["device", "SOAP::SOAPString"],
      ["max", "SOAP::SOAPInt"],
      ["count", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmWwnConflict,
    :schema_name => XSD::QName.new(NsVim25, "VmWwnConflictFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["property", "SOAP::SOAPString", [0, 1]],
      ["vm", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["wwn", "SOAP::SOAPLong", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsAlreadyMounted,
    :schema_name => XSD::QName.new(NsVim25, "VmfsAlreadyMountedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsAmbiguousMount,
    :schema_name => XSD::QName.new(NsVim25, "VmfsAmbiguousMountFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmfsMountFault,
    :schema_name => XSD::QName.new(NsVim25, "VmfsMountFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["uuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VmotionInterfaceNotEnabled,
    :schema_name => XSD::QName.new(NsVim25, "VmotionInterfaceNotEnabledFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::VolumeEditorError,
    :schema_name => XSD::QName.new(NsVim25, "VolumeEditorErrorFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WakeOnLanNotSupported,
    :schema_name => XSD::QName.new(NsVim25, "WakeOnLanNotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WakeOnLanNotSupportedByVmotionNIC,
    :schema_name => XSD::QName.new(NsVim25, "WakeOnLanNotSupportedByVmotionNICFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WillModifyConfigCpuRequirements,
    :schema_name => XSD::QName.new(NsVim25, "WillModifyConfigCpuRequirementsFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::JoinDomainRequestType,
    :schema_name => XSD::QName.new(NsVim25, "JoinDomain_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["domainName", "SOAP::SOAPString"],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::JoinDomain_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "JoinDomain_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LeaveCurrentDomainRequestType,
    :schema_name => XSD::QName.new(NsVim25, "LeaveCurrentDomain_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::LeaveCurrentDomain_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "LeaveCurrentDomain_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureAutostartRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureAutostart"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostAutoStartManagerConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureAutostartResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureAutostartResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AutoStartPowerOnRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AutoStartPowerOn"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AutoStartPowerOnResponse,
    :schema_name => XSD::QName.new(NsVim25, "AutoStartPowerOnResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AutoStartPowerOffRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AutoStartPowerOff"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AutoStartPowerOffResponse,
    :schema_name => XSD::QName.new(NsVim25, "AutoStartPowerOffResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryBootDevicesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryBootDevices"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryBootDevicesResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryBootDevicesResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostBootDeviceInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateBootDeviceRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateBootDevice"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateBootDeviceResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateBootDeviceResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableHyperThreadingRequestType,
    :schema_name => XSD::QName.new(NsVim25, "EnableHyperThreading"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableHyperThreadingResponse,
    :schema_name => XSD::QName.new(NsVim25, "EnableHyperThreadingResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableHyperThreadingRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DisableHyperThreading"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableHyperThreadingResponse,
    :schema_name => XSD::QName.new(NsVim25, "DisableHyperThreadingResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SearchDatastoreRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SearchDatastore_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastorePath", "SOAP::SOAPString"],
      ["searchSpec", "VSphereCloud::HostDatastoreBrowserSearchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SearchDatastore_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "SearchDatastore_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SearchDatastoreSubFoldersRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SearchDatastoreSubFolders_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastorePath", "SOAP::SOAPString"],
      ["searchSpec", "VSphereCloud::HostDatastoreBrowserSearchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SearchDatastoreSubFolders_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "SearchDatastoreSubFolders_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeleteFileRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DeleteFile"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastorePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeleteFileResponse,
    :schema_name => XSD::QName.new(NsVim25, "DeleteFileResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateLocalSwapDatastoreRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateLocalSwapDatastore"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateLocalSwapDatastoreResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateLocalSwapDatastoreResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAvailableDisksForVmfsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryAvailableDisksForVmfs"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAvailableDisksForVmfsResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryAvailableDisksForVmfsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostScsiDisk[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVmfsDatastoreCreateOptionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryVmfsDatastoreCreateOptions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["devicePath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVmfsDatastoreCreateOptionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryVmfsDatastoreCreateOptionsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::VmfsDatastoreOption[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateVmfsDatastoreRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateVmfsDatastore"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::VmfsDatastoreCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateVmfsDatastoreResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateVmfsDatastoreResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVmfsDatastoreExtendOptionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryVmfsDatastoreExtendOptions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["devicePath", "SOAP::SOAPString"],
      ["suppressExpandCandidates", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVmfsDatastoreExtendOptionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryVmfsDatastoreExtendOptionsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::VmfsDatastoreOption[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVmfsDatastoreExpandOptionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryVmfsDatastoreExpandOptions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVmfsDatastoreExpandOptionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryVmfsDatastoreExpandOptionsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::VmfsDatastoreOption[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtendVmfsDatastoreRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ExtendVmfsDatastore"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::VmfsDatastoreExtendSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExtendVmfsDatastoreResponse,
    :schema_name => XSD::QName.new(NsVim25, "ExtendVmfsDatastoreResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExpandVmfsDatastoreRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ExpandVmfsDatastore"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::VmfsDatastoreExpandSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExpandVmfsDatastoreResponse,
    :schema_name => XSD::QName.new(NsVim25, "ExpandVmfsDatastoreResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateNasDatastoreRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateNasDatastore"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostNasVolumeSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateNasDatastoreResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateNasDatastoreResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateLocalDatastoreRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateLocalDatastore"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["path", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateLocalDatastoreResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateLocalDatastoreResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveDatastoreRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveDatastore"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["datastore", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveDatastoreResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveDatastoreResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConfigureDatastorePrincipalRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ConfigureDatastorePrincipal"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["userName", "SOAP::SOAPString"],
      ["password", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConfigureDatastorePrincipalResponse,
    :schema_name => XSD::QName.new(NsVim25, "ConfigureDatastorePrincipalResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryUnresolvedVmfsVolumesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryUnresolvedVmfsVolumes"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryUnresolvedVmfsVolumesResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryUnresolvedVmfsVolumesResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostUnresolvedVmfsVolume[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResignatureUnresolvedVmfsVolumeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ResignatureUnresolvedVmfsVolume_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["resolutionSpec", "VSphereCloud::HostUnresolvedVmfsResignatureSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResignatureUnresolvedVmfsVolume_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ResignatureUnresolvedVmfsVolume_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDateTimeConfigRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateDateTimeConfig"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostDateTimeConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDateTimeConfigResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateDateTimeConfigResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAvailableTimeZonesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryAvailableTimeZones"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAvailableTimeZonesResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryAvailableTimeZonesResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostDateTimeSystemTimeZone[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDateTimeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryDateTime"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryDateTimeResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryDateTimeResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDateTimeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateDateTime"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["dateTime", "SOAP::SOAPDateTime"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDateTimeResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateDateTimeResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshDateTimeSystemRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RefreshDateTimeSystem"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshDateTimeSystemResponse,
    :schema_name => XSD::QName.new(NsVim25, "RefreshDateTimeSystemResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAvailablePartitionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryAvailablePartition"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryAvailablePartitionResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryAvailablePartitionResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostDiagnosticPartition[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SelectActivePartitionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SelectActivePartition"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["partition", "VSphereCloud::HostScsiDiskPartition", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SelectActivePartitionResponse,
    :schema_name => XSD::QName.new(NsVim25, "SelectActivePartitionResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPartitionCreateOptionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryPartitionCreateOptions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["storageType", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPartitionCreateOptionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryPartitionCreateOptionsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostDiagnosticPartitionCreateOption[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPartitionCreateDescRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryPartitionCreateDesc"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["diskUuid", "SOAP::SOAPString"],
      ["diagnosticType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPartitionCreateDescResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryPartitionCreateDescResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostDiagnosticPartitionCreateDescription"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateDiagnosticPartitionRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateDiagnosticPartition"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostDiagnosticPartitionCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateDiagnosticPartitionResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateDiagnosticPartitionResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDefaultPolicyRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateDefaultPolicy"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["defaultPolicy", "VSphereCloud::HostFirewallDefaultPolicy"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDefaultPolicyResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateDefaultPolicyResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableRulesetRequestType,
    :schema_name => XSD::QName.new(NsVim25, "EnableRuleset"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableRulesetResponse,
    :schema_name => XSD::QName.new(NsVim25, "EnableRulesetResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableRulesetRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DisableRuleset"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableRulesetResponse,
    :schema_name => XSD::QName.new(NsVim25, "DisableRulesetResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshFirewallRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RefreshFirewall"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshFirewallResponse,
    :schema_name => XSD::QName.new(NsVim25, "RefreshFirewallResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetFirmwareToFactoryDefaultsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ResetFirmwareToFactoryDefaults"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetFirmwareToFactoryDefaultsResponse,
    :schema_name => XSD::QName.new(NsVim25, "ResetFirmwareToFactoryDefaultsResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::BackupFirmwareConfigurationRequestType,
    :schema_name => XSD::QName.new(NsVim25, "BackupFirmwareConfiguration"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::BackupFirmwareConfigurationResponse,
    :schema_name => XSD::QName.new(NsVim25, "BackupFirmwareConfigurationResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryFirmwareConfigUploadURLRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryFirmwareConfigUploadURL"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryFirmwareConfigUploadURLResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryFirmwareConfigUploadURLResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RestoreFirmwareConfigurationRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RestoreFirmwareConfiguration"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["force", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RestoreFirmwareConfigurationResponse,
    :schema_name => XSD::QName.new(NsVim25, "RestoreFirmwareConfigurationResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshHealthStatusSystemRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RefreshHealthStatusSystem"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshHealthStatusSystemResponse,
    :schema_name => XSD::QName.new(NsVim25, "RefreshHealthStatusSystemResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetSystemHealthInfoRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ResetSystemHealthInfo"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetSystemHealthInfoResponse,
    :schema_name => XSD::QName.new(NsVim25, "ResetSystemHealthInfoResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryModulesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryModules"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryModulesResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryModulesResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::KernelModuleInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateModuleOptionStringRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateModuleOptionString"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"],
      ["options", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateModuleOptionStringResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateModuleOptionStringResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryConfiguredModuleOptionStringRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryConfiguredModuleOptionString"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryConfiguredModuleOptionStringResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryConfiguredModuleOptionStringResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateUserRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateUser"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["user", "VSphereCloud::HostAccountSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateUserResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateUserResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateUserRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateUser"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["user", "VSphereCloud::HostAccountSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateUserResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateUserResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateGroupRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateGroup"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["group", "VSphereCloud::HostAccountSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateGroupResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateGroupResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveUserRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveUser"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["userName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveUserResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveUserResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveGroupRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveGroup"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["groupName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveGroupResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveGroupResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AssignUserToGroupRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AssignUserToGroup"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["user", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AssignUserToGroupResponse,
    :schema_name => XSD::QName.new(NsVim25, "AssignUserToGroupResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnassignUserFromGroupRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UnassignUserFromGroup"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["user", "SOAP::SOAPString"],
      ["group", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnassignUserFromGroupResponse,
    :schema_name => XSD::QName.new(NsVim25, "UnassignUserFromGroupResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureServiceConsoleReservationRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureServiceConsoleReservation"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["cfgBytes", "SOAP::SOAPLong"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureServiceConsoleReservationResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureServiceConsoleReservationResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureVirtualMachineReservationRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureVirtualMachineReservation"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::VirtualMachineMemoryReservationSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureVirtualMachineReservationResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureVirtualMachineReservationResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateNetworkConfigRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateNetworkConfig"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostNetworkConfig"],
      ["changeMode", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateNetworkConfigResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateNetworkConfigResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostNetworkConfigResult"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDnsConfigRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateDnsConfig"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostDnsConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDnsConfigResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateDnsConfigResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateIpRouteConfigRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateIpRouteConfig"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostIpRouteConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateIpRouteConfigResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateIpRouteConfigResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateConsoleIpRouteConfigRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateConsoleIpRouteConfig"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostIpRouteConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateConsoleIpRouteConfigResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateConsoleIpRouteConfigResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateIpRouteTableConfigRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateIpRouteTableConfig"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostIpRouteTableConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateIpRouteTableConfigResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateIpRouteTableConfigResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddVirtualSwitchRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AddVirtualSwitch"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vswitchName", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostVirtualSwitchSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddVirtualSwitchResponse,
    :schema_name => XSD::QName.new(NsVim25, "AddVirtualSwitchResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveVirtualSwitchRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveVirtualSwitch"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vswitchName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveVirtualSwitchResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveVirtualSwitchResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateVirtualSwitchRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateVirtualSwitch"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vswitchName", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostVirtualSwitchSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateVirtualSwitchResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateVirtualSwitchResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddPortGroupRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AddPortGroup"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["portgrp", "VSphereCloud::HostPortGroupSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddPortGroupResponse,
    :schema_name => XSD::QName.new(NsVim25, "AddPortGroupResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemovePortGroupRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemovePortGroup"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pgName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemovePortGroupResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemovePortGroupResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdatePortGroupRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdatePortGroup"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pgName", "SOAP::SOAPString"],
      ["portgrp", "VSphereCloud::HostPortGroupSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdatePortGroupResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdatePortGroupResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdatePhysicalNicLinkSpeedRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdatePhysicalNicLinkSpeed"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"],
      ["linkSpeed", "VSphereCloud::PhysicalNicLinkInfo", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdatePhysicalNicLinkSpeedResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdatePhysicalNicLinkSpeedResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryNetworkHintRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryNetworkHint"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryNetworkHintResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryNetworkHintResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::PhysicalNicHintInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddVirtualNicRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AddVirtualNic"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["portgroup", "SOAP::SOAPString"],
      ["nic", "VSphereCloud::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddVirtualNicResponse,
    :schema_name => XSD::QName.new(NsVim25, "AddVirtualNicResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveVirtualNicRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveVirtualNic"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveVirtualNicResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveVirtualNicResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateVirtualNicRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateVirtualNic"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"],
      ["nic", "VSphereCloud::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateVirtualNicResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateVirtualNicResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddServiceConsoleVirtualNicRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AddServiceConsoleVirtualNic"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["portgroup", "SOAP::SOAPString"],
      ["nic", "VSphereCloud::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddServiceConsoleVirtualNicResponse,
    :schema_name => XSD::QName.new(NsVim25, "AddServiceConsoleVirtualNicResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveServiceConsoleVirtualNicRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveServiceConsoleVirtualNic"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveServiceConsoleVirtualNicResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveServiceConsoleVirtualNicResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateServiceConsoleVirtualNicRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateServiceConsoleVirtualNic"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"],
      ["nic", "VSphereCloud::HostVirtualNicSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateServiceConsoleVirtualNicResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateServiceConsoleVirtualNicResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RestartServiceConsoleVirtualNicRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RestartServiceConsoleVirtualNic"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RestartServiceConsoleVirtualNicResponse,
    :schema_name => XSD::QName.new(NsVim25, "RestartServiceConsoleVirtualNicResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshNetworkSystemRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RefreshNetworkSystem"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshNetworkSystemResponse,
    :schema_name => XSD::QName.new(NsVim25, "RefreshNetworkSystemResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckHostPatchRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CheckHostPatch_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckHostPatch_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CheckHostPatch_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScanHostPatchRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ScanHostPatch_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["repository", "VSphereCloud::HostPatchManagerLocator"],
      ["updateID", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScanHostPatch_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ScanHostPatch_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScanHostPatchV2RequestType,
    :schema_name => XSD::QName.new(NsVim25, "ScanHostPatchV2_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ScanHostPatchV2_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ScanHostPatchV2_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StageHostPatchRequestType,
    :schema_name => XSD::QName.new(NsVim25, "StageHostPatch_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["vibUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StageHostPatch_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "StageHostPatch_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InstallHostPatchRequestType,
    :schema_name => XSD::QName.new(NsVim25, "InstallHostPatch_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["repository", "VSphereCloud::HostPatchManagerLocator"],
      ["updateID", "SOAP::SOAPString"],
      ["force", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InstallHostPatch_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "InstallHostPatch_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InstallHostPatchV2RequestType,
    :schema_name => XSD::QName.new(NsVim25, "InstallHostPatchV2_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["metaUrls", "SOAP::SOAPString[]", [0, nil]],
      ["bundleUrls", "SOAP::SOAPString[]", [0, nil]],
      ["vibUrls", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InstallHostPatchV2_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "InstallHostPatchV2_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UninstallHostPatchRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UninstallHostPatch_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["bulletinIds", "SOAP::SOAPString[]", [0, nil]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UninstallHostPatch_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "UninstallHostPatch_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryHostPatchRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryHostPatch_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostPatchManagerPatchManagerOperationSpec", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryHostPatch_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryHostPatch_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshRequestType,
    :schema_name => XSD::QName.new(NsVim25, "Refresh"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshResponse,
    :schema_name => XSD::QName.new(NsVim25, "RefreshResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdatePassthruConfigRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdatePassthruConfig"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostPciPassthruConfig[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdatePassthruConfigResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdatePassthruConfigResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConfigurePowerPolicyRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ConfigurePowerPolicy"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["key", "SOAP::SOAPInt"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ConfigurePowerPolicyResponse,
    :schema_name => XSD::QName.new(NsVim25, "ConfigurePowerPolicyResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateServicePolicyRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateServicePolicy"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"],
      ["policy", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateServicePolicyResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateServicePolicyResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StartServiceRequestType,
    :schema_name => XSD::QName.new(NsVim25, "StartService"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StartServiceResponse,
    :schema_name => XSD::QName.new(NsVim25, "StartServiceResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StopServiceRequestType,
    :schema_name => XSD::QName.new(NsVim25, "StopService"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::StopServiceResponse,
    :schema_name => XSD::QName.new(NsVim25, "StopServiceResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RestartServiceRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RestartService"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RestartServiceResponse,
    :schema_name => XSD::QName.new(NsVim25, "RestartServiceResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UninstallServiceRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UninstallService"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["id", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UninstallServiceResponse,
    :schema_name => XSD::QName.new(NsVim25, "UninstallServiceResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshServicesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RefreshServices"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshServicesResponse,
    :schema_name => XSD::QName.new(NsVim25, "RefreshServicesResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureSnmpAgentRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureSnmpAgent"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::HostSnmpConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureSnmpAgentResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureSnmpAgentResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SendTestNotificationRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SendTestNotification"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SendTestNotificationResponse,
    :schema_name => XSD::QName.new(NsVim25, "SendTestNotificationResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveDiskPartitionInfoRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveDiskPartitionInfo"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["devicePath", "SOAP::SOAPString[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveDiskPartitionInfoResponse,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveDiskPartitionInfoResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostDiskPartitionInfo[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ComputeDiskPartitionInfoRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ComputeDiskPartitionInfo"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["devicePath", "SOAP::SOAPString"],
      ["layout", "VSphereCloud::HostDiskPartitionLayout"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ComputeDiskPartitionInfoResponse,
    :schema_name => XSD::QName.new(NsVim25, "ComputeDiskPartitionInfoResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostDiskPartitionInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ComputeDiskPartitionInfoForResizeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ComputeDiskPartitionInfoForResize"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["partition", "VSphereCloud::HostScsiDiskPartition"],
      ["blockRange", "VSphereCloud::HostDiskPartitionBlockRange"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ComputeDiskPartitionInfoForResizeResponse,
    :schema_name => XSD::QName.new(NsVim25, "ComputeDiskPartitionInfoForResizeResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostDiskPartitionInfo"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDiskPartitionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateDiskPartitions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["devicePath", "SOAP::SOAPString"],
      ["spec", "VSphereCloud::HostDiskPartitionSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateDiskPartitionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateDiskPartitionsResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FormatVmfsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "FormatVmfs"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["createSpec", "VSphereCloud::HostVmfsSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FormatVmfsResponse,
    :schema_name => XSD::QName.new(NsVim25, "FormatVmfsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostVmfsVolume"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RescanVmfsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RescanVmfs"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RescanVmfsResponse,
    :schema_name => XSD::QName.new(NsVim25, "RescanVmfsResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AttachVmfsExtentRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AttachVmfsExtent"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vmfsPath", "SOAP::SOAPString"],
      ["extent", "VSphereCloud::HostScsiDiskPartition"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AttachVmfsExtentResponse,
    :schema_name => XSD::QName.new(NsVim25, "AttachVmfsExtentResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExpandVmfsExtentRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ExpandVmfsExtent"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vmfsPath", "SOAP::SOAPString"],
      ["extent", "VSphereCloud::HostScsiDiskPartition"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExpandVmfsExtentResponse,
    :schema_name => XSD::QName.new(NsVim25, "ExpandVmfsExtentResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpgradeVmfsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpgradeVmfs"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vmfsPath", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpgradeVmfsResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpgradeVmfsResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpgradeVmLayoutRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpgradeVmLayout"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpgradeVmLayoutResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpgradeVmLayoutResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryUnresolvedVmfsVolumeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryUnresolvedVmfsVolume"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryUnresolvedVmfsVolumeResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryUnresolvedVmfsVolumeResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostUnresolvedVmfsVolume[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResolveMultipleUnresolvedVmfsVolumesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ResolveMultipleUnresolvedVmfsVolumes"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["resolutionSpec", "VSphereCloud::HostUnresolvedVmfsResolutionSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResolveMultipleUnresolvedVmfsVolumesResponse,
    :schema_name => XSD::QName.new(NsVim25, "ResolveMultipleUnresolvedVmfsVolumesResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostUnresolvedVmfsResolutionResult[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnmountForceMountedVmfsVolumeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UnmountForceMountedVmfsVolume"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vmfsUuid", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnmountForceMountedVmfsVolumeResponse,
    :schema_name => XSD::QName.new(NsVim25, "UnmountForceMountedVmfsVolumeResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RescanHbaRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RescanHba"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["hbaDevice", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RescanHbaResponse,
    :schema_name => XSD::QName.new(NsVim25, "RescanHbaResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RescanAllHbaRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RescanAllHba"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RescanAllHbaResponse,
    :schema_name => XSD::QName.new(NsVim25, "RescanAllHbaResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateSoftwareInternetScsiEnabledRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateSoftwareInternetScsiEnabled"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["enabled", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateSoftwareInternetScsiEnabledResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateSoftwareInternetScsiEnabledResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiDiscoveryPropertiesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateInternetScsiDiscoveryProperties"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["discoveryProperties", "VSphereCloud::HostInternetScsiHbaDiscoveryProperties"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiDiscoveryPropertiesResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateInternetScsiDiscoveryPropertiesResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiAuthenticationPropertiesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateInternetScsiAuthenticationProperties"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["authenticationProperties", "VSphereCloud::HostInternetScsiHbaAuthenticationProperties"],
      ["targetSet", "VSphereCloud::HostInternetScsiHbaTargetSet", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiAuthenticationPropertiesResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateInternetScsiAuthenticationPropertiesResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiDigestPropertiesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateInternetScsiDigestProperties"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targetSet", "VSphereCloud::HostInternetScsiHbaTargetSet", [0, 1]],
      ["digestProperties", "VSphereCloud::HostInternetScsiHbaDigestProperties"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiDigestPropertiesResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateInternetScsiDigestPropertiesResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiAdvancedOptionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateInternetScsiAdvancedOptions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targetSet", "VSphereCloud::HostInternetScsiHbaTargetSet", [0, 1]],
      ["options", "VSphereCloud::HostInternetScsiHbaParamValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiAdvancedOptionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateInternetScsiAdvancedOptionsResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiIPPropertiesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateInternetScsiIPProperties"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["ipProperties", "VSphereCloud::HostInternetScsiHbaIPProperties"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiIPPropertiesResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateInternetScsiIPPropertiesResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiNameRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateInternetScsiName"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["iScsiName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiNameResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateInternetScsiNameResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiAliasRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateInternetScsiAlias"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["iScsiAlias", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateInternetScsiAliasResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateInternetScsiAliasResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddInternetScsiSendTargetsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AddInternetScsiSendTargets"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VSphereCloud::HostInternetScsiHbaSendTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddInternetScsiSendTargetsResponse,
    :schema_name => XSD::QName.new(NsVim25, "AddInternetScsiSendTargetsResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveInternetScsiSendTargetsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveInternetScsiSendTargets"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VSphereCloud::HostInternetScsiHbaSendTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveInternetScsiSendTargetsResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveInternetScsiSendTargetsResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddInternetScsiStaticTargetsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AddInternetScsiStaticTargets"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VSphereCloud::HostInternetScsiHbaStaticTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AddInternetScsiStaticTargetsResponse,
    :schema_name => XSD::QName.new(NsVim25, "AddInternetScsiStaticTargetsResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveInternetScsiStaticTargetsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveInternetScsiStaticTargets"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["iScsiHbaDevice", "SOAP::SOAPString"],
      ["targets", "VSphereCloud::HostInternetScsiHbaStaticTarget[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveInternetScsiStaticTargetsResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveInternetScsiStaticTargetsResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableMultipathPathRequestType,
    :schema_name => XSD::QName.new(NsVim25, "EnableMultipathPath"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pathName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::EnableMultipathPathResponse,
    :schema_name => XSD::QName.new(NsVim25, "EnableMultipathPathResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableMultipathPathRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DisableMultipathPath"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["pathName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DisableMultipathPathResponse,
    :schema_name => XSD::QName.new(NsVim25, "DisableMultipathPathResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetMultipathLunPolicyRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SetMultipathLunPolicy"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["lunId", "SOAP::SOAPString"],
      ["policy", "VSphereCloud::HostMultipathInfoLogicalUnitPolicy"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SetMultipathLunPolicyResponse,
    :schema_name => XSD::QName.new(NsVim25, "SetMultipathLunPolicyResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPathSelectionPolicyOptionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryPathSelectionPolicyOptions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPathSelectionPolicyOptionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryPathSelectionPolicyOptionsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostPathSelectionPolicyOption[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryStorageArrayTypePolicyOptionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryStorageArrayTypePolicyOptions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryStorageArrayTypePolicyOptionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryStorageArrayTypePolicyOptionsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostStorageArrayTypePolicyOption[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateScsiLunDisplayNameRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateScsiLunDisplayName"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["lunUuid", "SOAP::SOAPString"],
      ["displayName", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateScsiLunDisplayNameResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateScsiLunDisplayNameResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshStorageSystemRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RefreshStorageSystem"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RefreshStorageSystemResponse,
    :schema_name => XSD::QName.new(NsVim25, "RefreshStorageSystemResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateIpConfigRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateIpConfig"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["ipConfig", "VSphereCloud::HostIpConfig"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateIpConfigResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateIpConfigResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SelectVnicRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SelectVnic"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SelectVnicResponse,
    :schema_name => XSD::QName.new(NsVim25, "SelectVnicResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeselectVnicRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DeselectVnic"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeselectVnicResponse,
    :schema_name => XSD::QName.new(NsVim25, "DeselectVnicResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryNetConfigRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryNetConfig"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["nicType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryNetConfigResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryNetConfigResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::VirtualNicManagerNetConfig", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SelectVnicForNicTypeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "SelectVnicForNicType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["nicType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SelectVnicForNicTypeResponse,
    :schema_name => XSD::QName.new(NsVim25, "SelectVnicForNicTypeResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeselectVnicForNicTypeRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DeselectVnicForNicType"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["nicType", "SOAP::SOAPString"],
      ["device", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DeselectVnicForNicTypeResponse,
    :schema_name => XSD::QName.new(NsVim25, "DeselectVnicForNicTypeResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryOptionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryOptions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryOptionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryOptionsResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::OptionValue[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateOptionsRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateOptions"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["changedValue", "VSphereCloud::OptionValue[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateOptionsResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateOptionsResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckComplianceRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CheckCompliance_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["profile", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckCompliance_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CheckCompliance_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryComplianceStatusRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryComplianceStatus"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["profile", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryComplianceStatusResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryComplianceStatusResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ComplianceResult[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClearComplianceStatusRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ClearComplianceStatus"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["profile", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ClearComplianceStatusResponse,
    :schema_name => XSD::QName.new(NsVim25, "ClearComplianceStatusResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryExpressionMetadataRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryExpressionMetadata"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["expressionName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryExpressionMetadataResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryExpressionMetadataResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ProfileExpressionMetadata[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyProfileRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DestroyProfile"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyProfileResponse,
    :schema_name => XSD::QName.new(NsVim25, "DestroyProfileResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AssociateProfileRequestType,
    :schema_name => XSD::QName.new(NsVim25, "AssociateProfile"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::AssociateProfileResponse,
    :schema_name => XSD::QName.new(NsVim25, "AssociateProfileResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DissociateProfileRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DissociateProfile"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DissociateProfileResponse,
    :schema_name => XSD::QName.new(NsVim25, "DissociateProfileResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckProfileComplianceRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CheckProfileCompliance_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckProfileCompliance_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CheckProfileCompliance_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExportProfileRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ExportProfile"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExportProfileResponse,
    :schema_name => XSD::QName.new(NsVim25, "ExportProfileResponse"),
    :schema_element => [
      ["returnval", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateProfileRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateProfile"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["createSpec", "VSphereCloud::ProfileCreateSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateProfileResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateProfileResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPolicyMetadataRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryPolicyMetadata"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["policyName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryPolicyMetadataResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryPolicyMetadataResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ProfilePolicyMetadata[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindAssociatedProfileRequestType,
    :schema_name => XSD::QName.new(NsVim25, "FindAssociatedProfile"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::FindAssociatedProfileResponse,
    :schema_name => XSD::QName.new(NsVim25, "FindAssociatedProfileResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateClusterProfileRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateClusterProfile"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::ClusterProfileConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateClusterProfileResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateClusterProfileResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateReferenceHostRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateReferenceHost"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateReferenceHostResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateReferenceHostResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateHostProfileRequestType,
    :schema_name => XSD::QName.new(NsVim25, "UpdateHostProfile"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["config", "VSphereCloud::HostProfileConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UpdateHostProfileResponse,
    :schema_name => XSD::QName.new(NsVim25, "UpdateHostProfileResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExecuteHostProfileRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ExecuteHostProfile"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["deferredParam", "VSphereCloud::ProfileDeferredPolicyOptionParameter[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ExecuteHostProfileResponse,
    :schema_name => XSD::QName.new(NsVim25, "ExecuteHostProfileResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ProfileExecuteResult"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ApplyHostConfigRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ApplyHostConfig_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference"],
      ["configSpec", "VSphereCloud::HostConfigSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ApplyHostConfig_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ApplyHostConfig_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GenerateConfigTaskListRequestType,
    :schema_name => XSD::QName.new(NsVim25, "GenerateConfigTaskList"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["configSpec", "VSphereCloud::HostConfigSpec"],
      ["host", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::GenerateConfigTaskListResponse,
    :schema_name => XSD::QName.new(NsVim25, "GenerateConfigTaskListResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::HostProfileManagerConfigTaskList"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryHostProfileMetadataRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryHostProfileMetadata"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["profileName", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryHostProfileMetadataResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryHostProfileMetadataResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ProfileMetadata[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateDefaultProfileRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateDefaultProfile"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["profileType", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateDefaultProfileResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateDefaultProfileResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ApplyProfile"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveScheduledTaskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveScheduledTask"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveScheduledTaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveScheduledTaskResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureScheduledTaskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureScheduledTask"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::ScheduledTaskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ReconfigureScheduledTaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "ReconfigureScheduledTaskResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RunScheduledTaskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RunScheduledTask"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RunScheduledTaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "RunScheduledTaskResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateScheduledTaskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateScheduledTask"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::ScheduledTaskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateScheduledTaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateScheduledTaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveEntityScheduledTaskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveEntityScheduledTask"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveEntityScheduledTaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveEntityScheduledTaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateObjectScheduledTaskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateObjectScheduledTask"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::ScheduledTaskSpec"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateObjectScheduledTaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateObjectScheduledTaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveObjectScheduledTaskRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveObjectScheduledTask"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrieveObjectScheduledTaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveObjectScheduledTaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OpenInventoryViewFolderRequestType,
    :schema_name => XSD::QName.new(NsVim25, "OpenInventoryViewFolder"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::OpenInventoryViewFolderResponse,
    :schema_name => XSD::QName.new(NsVim25, "OpenInventoryViewFolderResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CloseInventoryViewFolderRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CloseInventoryViewFolder"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["entity", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CloseInventoryViewFolderResponse,
    :schema_name => XSD::QName.new(NsVim25, "CloseInventoryViewFolderResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ModifyListViewRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ModifyListView"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["add", "VSphereCloud::ManagedObjectReference[]", [0, nil]],
      ["remove", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ModifyListViewResponse,
    :schema_name => XSD::QName.new(NsVim25, "ModifyListViewResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetListViewRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ResetListView"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetListViewResponse,
    :schema_name => XSD::QName.new(NsVim25, "ResetListViewResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetListViewFromViewRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ResetListViewFromView"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["view", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ResetListViewFromViewResponse,
    :schema_name => XSD::QName.new(NsVim25, "ResetListViewFromViewResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyViewRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DestroyView"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyViewResponse,
    :schema_name => XSD::QName.new(NsVim25, "DestroyViewResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateInventoryViewRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateInventoryView"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateInventoryViewResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateInventoryViewResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateContainerViewRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateContainerView"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["container", "VSphereCloud::ManagedObjectReference"],
      ["type", "SOAP::SOAPString[]", [0, nil]],
      ["recursive", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateContainerViewResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateContainerViewResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateListViewRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateListView"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["obj", "VSphereCloud::ManagedObjectReference[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateListViewResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateListViewResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateListViewFromViewRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateListViewFromView"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["view", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateListViewFromViewResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateListViewFromViewResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RevertToSnapshotRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RevertToSnapshot_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["suppressPowerOn", "SOAP::SOAPBoolean", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RevertToSnapshot_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "RevertToSnapshot_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveSnapshotRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RemoveSnapshot_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["removeChildren", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RemoveSnapshot_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "RemoveSnapshot_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RenameSnapshotRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RenameSnapshot"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["name", "SOAP::SOAPString", [0, 1]],
      ["description", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RenameSnapshotResponse,
    :schema_name => XSD::QName.new(NsVim25, "RenameSnapshotResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckCompatibilityRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CheckCompatibility_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckCompatibility_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CheckCompatibility_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVMotionCompatibilityExRequestType,
    :schema_name => XSD::QName.new(NsVim25, "QueryVMotionCompatibilityEx_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference[]", [1, nil]],
      ["host", "VSphereCloud::ManagedObjectReference[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::QueryVMotionCompatibilityEx_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "QueryVMotionCompatibilityEx_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckMigrateRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CheckMigrate_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["host", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["pool", "VSphereCloud::ManagedObjectReference", [0, 1]],
      ["state", "VSphereCloud::VirtualMachinePowerState", [0, 1]],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckMigrate_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CheckMigrate_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckRelocateRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CheckRelocate_Task"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["vm", "VSphereCloud::ManagedObjectReference"],
      ["spec", "VSphereCloud::VirtualMachineRelocateSpec"],
      ["testType", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckRelocate_TaskResponse,
    :schema_name => XSD::QName.new(NsVim25, "CheckRelocate_TaskResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidCollectorVersion,
    :schema_name => XSD::QName.new(NsVim25, "InvalidCollectorVersionFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidProperty,
    :schema_name => XSD::QName.new(NsVim25, "InvalidPropertyFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["name", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyPropertyFilterRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DestroyPropertyFilter"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyPropertyFilterResponse,
    :schema_name => XSD::QName.new(NsVim25, "DestroyPropertyFilterResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateFilterRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreateFilter"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["spec", "VSphereCloud::PropertyFilterSpec"],
      ["partialUpdates", "SOAP::SOAPBoolean"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreateFilterResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreateFilterResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrievePropertiesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RetrieveProperties"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["specSet", "VSphereCloud::PropertyFilterSpec[]", [1, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrievePropertiesResponse,
    :schema_name => XSD::QName.new(NsVim25, "RetrievePropertiesResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ObjectContent[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckForUpdatesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CheckForUpdates"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CheckForUpdatesResponse,
    :schema_name => XSD::QName.new(NsVim25, "CheckForUpdatesResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::UpdateSet", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WaitForUpdatesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "WaitForUpdates"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WaitForUpdatesResponse,
    :schema_name => XSD::QName.new(NsVim25, "WaitForUpdatesResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::UpdateSet"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CancelWaitForUpdatesRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CancelWaitForUpdates"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CancelWaitForUpdatesResponse,
    :schema_name => XSD::QName.new(NsVim25, "CancelWaitForUpdatesResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WaitForUpdatesExRequestType,
    :schema_name => XSD::QName.new(NsVim25, "WaitForUpdatesEx"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["version", "SOAP::SOAPString", [0, 1]],
      ["options", "VSphereCloud::WaitOptions", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::WaitForUpdatesExResponse,
    :schema_name => XSD::QName.new(NsVim25, "WaitForUpdatesExResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::UpdateSet", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrievePropertiesExRequestType,
    :schema_name => XSD::QName.new(NsVim25, "RetrievePropertiesEx"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["specSet", "VSphereCloud::PropertyFilterSpec[]", [1, nil]],
      ["options", "VSphereCloud::RetrieveOptions"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RetrievePropertiesExResponse,
    :schema_name => XSD::QName.new(NsVim25, "RetrievePropertiesExResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::RetrieveResult", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ContinueRetrievePropertiesExRequestType,
    :schema_name => XSD::QName.new(NsVim25, "ContinueRetrievePropertiesEx"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["token", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ContinueRetrievePropertiesExResponse,
    :schema_name => XSD::QName.new(NsVim25, "ContinueRetrievePropertiesExResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::RetrieveResult"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CancelRetrievePropertiesExRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CancelRetrievePropertiesEx"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]],
      ["token", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CancelRetrievePropertiesExResponse,
    :schema_name => XSD::QName.new(NsVim25, "CancelRetrievePropertiesExResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreatePropertyCollectorRequestType,
    :schema_name => XSD::QName.new(NsVim25, "CreatePropertyCollector"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::CreatePropertyCollectorResponse,
    :schema_name => XSD::QName.new(NsVim25, "CreatePropertyCollectorResponse"),
    :schema_element => [
      ["returnval", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyPropertyCollectorRequestType,
    :schema_name => XSD::QName.new(NsVim25, "DestroyPropertyCollector"),
    :schema_element => [
      ["v__this", ["VSphereCloud::ManagedObjectReference", XSD::QName.new(NsVim25, "_this")]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::DestroyPropertyCollectorResponse,
    :schema_name => XSD::QName.new(NsVim25, "DestroyPropertyCollectorResponse"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostCommunication,
    :schema_name => XSD::QName.new(NsVim25, "HostCommunicationFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNotConnected,
    :schema_name => XSD::QName.new(NsVim25, "HostNotConnectedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::HostNotReachable,
    :schema_name => XSD::QName.new(NsVim25, "HostNotReachableFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidArgument,
    :schema_name => XSD::QName.new(NsVim25, "InvalidArgumentFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["invalidProperty", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidRequest,
    :schema_name => XSD::QName.new(NsVim25, "InvalidRequestFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::InvalidType,
    :schema_name => XSD::QName.new(NsVim25, "InvalidTypeFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["argument", "SOAP::SOAPString", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::ManagedObjectNotFound,
    :schema_name => XSD::QName.new(NsVim25, "ManagedObjectNotFoundFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["obj", "VSphereCloud::ManagedObjectReference"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MethodNotFound,
    :schema_name => XSD::QName.new(NsVim25, "MethodNotFoundFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["receiver", "VSphereCloud::ManagedObjectReference"],
      ["method", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotEnoughLicenses,
    :schema_name => XSD::QName.new(NsVim25, "NotEnoughLicensesFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotImplemented,
    :schema_name => XSD::QName.new(NsVim25, "NotImplementedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::NotSupported,
    :schema_name => XSD::QName.new(NsVim25, "NotSupportedFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RequestCanceled,
    :schema_name => XSD::QName.new(NsVim25, "RequestCanceledFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::C_SecurityError,
    :schema_name => XSD::QName.new(NsVim25, "SecurityErrorFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::SystemError,
    :schema_name => XSD::QName.new(NsVim25, "SystemErrorFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["reason", "SOAP::SOAPString"]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::UnexpectedFault,
    :schema_name => XSD::QName.new(NsVim25, "UnexpectedFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]],
      ["faultName", "SOAP::SOAPString"],
      ["fault", "VSphereCloud::LocalizedMethodFault", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::MethodFault,
    :schema_name => XSD::QName.new(NsVim25, "MethodFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => VSphereCloud::RuntimeFault,
    :schema_name => XSD::QName.new(NsVim25, "RuntimeFaultFault"),
    :schema_element => [
      ["dynamicType", "SOAP::SOAPString", [0, 1]],
      ["dynamicProperty", "VSphereCloud::DynamicProperty[]", [0, nil]],
      ["faultCause", "VSphereCloud::LocalizedMethodFault", [0, 1]],
      ["faultMessage", "VSphereCloud::LocalizableMessage[]", [0, nil]]
    ]
  )
end

end
